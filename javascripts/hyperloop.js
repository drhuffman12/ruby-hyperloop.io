/* Generated by Opal 0.10.3 */
Opal.modules["browser/interval"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$convert', '$nil?', '$stopped?', '$aborted?', '$raise', '$call', '$tap', '$to_proc', '$new', '$every', '$every!']);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Interval(){};
      var self = $Interval = $klass($base, $super, 'Interval', $Interval);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

      def.id = def.aborted = def.window = def.block = def.every = nil;
      self.$attr_reader("every");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(window, time) {
        var self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        self.window = $scope.get('Native').$convert(window);
        self.every = time;
        self.block = block;
        return self.aborted = false;
      }, TMP_1.$$arity = 2);

      Opal.defn(self, '$stopped?', TMP_2 = function() {
        var self = this;

        return self.id['$nil?']();
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$aborted?', TMP_3 = function() {
        var self = this;

        return self.aborted;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$abort', TMP_4 = function $$abort() {
        var self = this;

        self.window.clearInterval(self.id);
        self.aborted = true;
        return self.id = nil;
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$stop', TMP_5 = function $$stop() {
        var $a, self = this;

        if ((($a = self['$stopped?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        self.window.clearInterval(self.id);
        self.stopped = true;
        return self.id = nil;
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$start', TMP_6 = function $$start() {
        var $a, self = this;

        if ((($a = self['$aborted?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise("the interval has been aborted")};
        if ((($a = self['$stopped?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        return self.id = self.window.setInterval(self.block, self.every * 1000);
      }, TMP_6.$$arity = 0);

      return (Opal.defn(self, '$call', TMP_7 = function $$call() {
        var self = this;

        return self.block.$call();
      }, TMP_7.$$arity = 0), nil) && 'call';
    })($scope.base, null);

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9;

      def["native"] = nil;
      Opal.defn(self, '$every', TMP_8 = function $$every(time) {
        var $a, $b, $c, $d, self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        return ($a = ($b = ($c = ($d = $scope.get('Interval')).$new, $c.$$p = block.$to_proc(), $c).call($d, self["native"], time)).$tap, $a.$$p = "start".$to_proc(), $a).call($b);
      }, TMP_8.$$arity = 1);

      return (Opal.defn(self, '$every!', TMP_9 = function(time) {
        var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

        TMP_9.$$p = null;
        return ($a = ($b = $scope.get('Interval')).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], time);
      }, TMP_9.$$arity = 1), nil) && 'every!';
    })($scope.base, null);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11;

    Opal.defn(self, '$every', TMP_10 = function $$every(time) {
      var $a, $b, self = this, $iter = TMP_10.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_10.$$p = null;
      return ($a = ($b = $gvars.window).$every, $a.$$p = block.$to_proc(), $a).call($b, time);
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$every!', TMP_11 = function(time) {
      var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_11.$$p = null;
      return ($a = ($b = $gvars.window)['$every!'], $a.$$p = block.$to_proc(), $a).call($b, time);
    }, TMP_11.$$arity = 1);
  })($scope.base);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_12, TMP_13;

    Opal.defn(self, '$every', TMP_12 = function $$every(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window).$every, $a.$$p = self.$to_proc(), $a).call($b, time);
    }, TMP_12.$$arity = 1);

    return (Opal.defn(self, '$every!', TMP_13 = function(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window)['$every!'], $a.$$p = self.$to_proc(), $a).call($b, time);
    }, TMP_13.$$arity = 1), nil) && 'every!';
  })($scope.base, null);
};

/* Generated by Opal 0.10.3 */
Opal.modules["browser/delay"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$convert', '$to_n', '$tap', '$to_proc', '$new', '$after', '$after!']);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Delay(){};
      var self = $Delay = $klass($base, $super, 'Delay', $Delay);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      def.window = def.id = def.block = def.after = nil;
      self.$attr_reader("after");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(window, time) {
        var self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        self.window = $scope.get('Native').$convert(window);
        self.after = time;
        return self.block = block;
      }, TMP_1.$$arity = 2);

      Opal.defn(self, '$abort', TMP_2 = function $$abort() {
        var self = this;

        return self.window.clearTimeout(self.id);
      }, TMP_2.$$arity = 0);

      return (Opal.defn(self, '$start', TMP_3 = function $$start() {
        var self = this;

        return self.id = self.window.setTimeout(self.block.$to_n(), self.after * 1000);
      }, TMP_3.$$arity = 0), nil) && 'start';
    })($scope.base, null);

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5;

      def["native"] = nil;
      Opal.defn(self, '$after', TMP_4 = function $$after(time) {
        var $a, $b, $c, $d, self = this, $iter = TMP_4.$$p, block = $iter || nil;

        TMP_4.$$p = null;
        return ($a = ($b = ($c = ($d = $scope.get('Delay')).$new, $c.$$p = block.$to_proc(), $c).call($d, self["native"], time)).$tap, $a.$$p = "start".$to_proc(), $a).call($b);
      }, TMP_4.$$arity = 1);

      return (Opal.defn(self, '$after!', TMP_5 = function(time) {
        var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

        TMP_5.$$p = null;
        return ($a = ($b = $scope.get('Delay')).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], time);
      }, TMP_5.$$arity = 1), nil) && 'after!';
    })($scope.base, null);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7;

    Opal.defn(self, '$after', TMP_6 = function $$after(time) {
      var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_6.$$p = null;
      return ($a = ($b = $gvars.window).$after, $a.$$p = block.$to_proc(), $a).call($b, time);
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$after!', TMP_7 = function(time) {
      var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_7.$$p = null;
      return ($a = ($b = $gvars.window)['$after!'], $a.$$p = block.$to_proc(), $a).call($b, time);
    }, TMP_7.$$arity = 1);
  })($scope.base);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9;

    Opal.defn(self, '$after', TMP_8 = function $$after(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window).$after, $a.$$p = self.$to_proc(), $a).call($b, time);
    }, TMP_8.$$arity = 1);

    return (Opal.defn(self, '$after!', TMP_9 = function(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window)['$after!'], $a.$$p = self.$to_proc(), $a).call($b, time);
    }, TMP_9.$$arity = 1), nil) && 'after!';
  })($scope.base, null);
};

/* Generated by Opal 0.10.3 */
Opal.modules["native"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$is_a?', '$map', '$alias_method', '$to_a', '$_Array', '$include', '$method_missing', '$bind', '$instance_method', '$[]=', '$slice', '$-', '$length', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$exiting_mid', '$native_module']);
  (function($base) {
    var $Native, self = $Native = $module($base, 'Native');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_19, TMP_20, TMP_21;

    Opal.defs(self, '$is_a?', TMP_1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    ;
    }, TMP_1.$$arity = 2);

    Opal.defs(self, '$try_convert', TMP_2 = function $$try_convert(value, default$) {
      var self = this;

      if (default$ == null) {
        default$ = nil;
      }
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    ;
    }, TMP_2.$$arity = -2);

    Opal.defs(self, '$convert', TMP_3 = function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($scope.get('ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    ;
    }, TMP_3.$$arity = 1);

    Opal.defs(self, '$call', TMP_4 = function $$call(obj, key, $a_rest) {
      var self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      TMP_4.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    }, TMP_4.$$arity = -3);

    Opal.defs(self, '$proc', TMP_5 = function $$proc() {
      var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        self.$raise($scope.get('LocalJumpError'), "no block given")
      };
      return ($a = ($b = $scope.get('Kernel')).$proc, $a.$$p = (TMP_6 = function($c_rest){var self = TMP_6.$$s || this, args, $d, $e, TMP_7, instance = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      ($d = ($e = args)['$map!'], $d.$$p = (TMP_7 = function(arg){var self = TMP_7.$$s || this;
if (arg == null) arg = nil;
        return self.$Native(arg)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $d).call($e);
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6), $a).call($b);
    }, TMP_5.$$arity = 0);

    (function($base) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_14, TMP_17, TMP_18;

      Opal.defn(self, '$alias_native', TMP_11 = function $$alias_native(new$, $old, $kwargs) {
        var $a, $b, TMP_8, $c, TMP_9, $d, TMP_10, self = this, $post_args, as, old;

        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        $kwargs = Opal.extract_kwargs($post_args);
        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        if ((as = $kwargs.$$smap['as']) == null) {
          as = nil
        }
        if (0 < $post_args.length) {
          old = $post_args.splice(0,1)[0];
        }
        if (old == null) {
          old = new$;
        }
        if ((($a = old['$end_with?']("=")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          self["native"][old['$[]']($range(0, -2, false))] = $scope.get('Native').$convert(value);
            return value;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b, new$)
        } else if (as !== false && as !== nil && as != null) {
          return ($a = ($c = self).$define_method, $a.$$p = (TMP_9 = function($d_rest){var self = TMP_9.$$s || this, block, args, $e, $f, $g, value = nil;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_9.$$p || nil, TMP_9.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          if ((($e = value = ($f = ($g = $scope.get('Native')).$call, $f.$$p = block.$to_proc(), $f).apply($g, [self["native"], old].concat(Opal.to_a(args)))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9), $a).call($c, new$)
          } else {
          return ($a = ($d = self).$define_method, $a.$$p = (TMP_10 = function($e_rest){var self = TMP_10.$$s || this, block, args, $f, $g;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_10.$$p || nil, TMP_10.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return ($f = ($g = $scope.get('Native')).$call, $f.$$p = block.$to_proc(), $f).apply($g, [self["native"], old].concat(Opal.to_a(args)))}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10), $a).call($d, new$)
        };
      }, TMP_11.$$arity = -2);

      Opal.defn(self, '$native_reader', TMP_14 = function $$native_reader($a_rest) {
        var $b, $c, TMP_12, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = ($c = names).$each, $b.$$p = (TMP_12 = function(name){var self = TMP_12.$$s || this, $a, $d, TMP_13;
if (name == null) name = nil;
        return ($a = ($d = self).$define_method, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($d, name)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $b).call($c);
      }, TMP_14.$$arity = -1);

      Opal.defn(self, '$native_writer', TMP_17 = function $$native_writer($a_rest) {
        var $b, $c, TMP_15, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = ($c = names).$each, $b.$$p = (TMP_15 = function(name){var self = TMP_15.$$s || this, $a, $d, TMP_16;
if (name == null) name = nil;
        return ($a = ($d = self).$define_method, $a.$$p = (TMP_16 = function(value){var self = TMP_16.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($d, "" + (name) + "=")}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $b).call($c);
      }, TMP_17.$$arity = -1);

      Opal.defn(self, '$native_accessor', TMP_18 = function $$native_accessor($a_rest) {
        var $b, $c, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        ($b = self).$native_reader.apply($b, Opal.to_a(names));
        return ($c = self).$native_writer.apply($c, Opal.to_a(names));
      }, TMP_18.$$arity = -1);
    })($scope.base);

    Opal.defs(self, '$included', TMP_19 = function $$included(klass) {
      var self = this;

      return klass.$extend($scope.get('Helpers'));
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$initialize', TMP_20 = function $$initialize(native$) {
      var $a, self = this;

      if ((($a = $scope.get('Kernel')['$native?'](native$)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return self["native"] = native$;
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$to_n', TMP_21 = function $$to_n() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"];
    }, TMP_21.$$arity = 0);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_22, TMP_25, TMP_26;

    Opal.defn(self, '$native?', TMP_22 = function(value) {
      var self = this;

      return value == null || !value.$$class;
    }, TMP_22.$$arity = 1);

    Opal.defn(self, '$Native', TMP_25 = function $$Native(obj) {
      var $a, $b, TMP_23, $c, TMP_24, self = this;

      if ((($a = obj == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
      } else if ((($a = self['$native?'](obj)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Native')).$$scope.get('Object')).$new(obj)
      } else if ((($a = obj['$is_a?']($scope.get('Array'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = obj).$map, $a.$$p = (TMP_23 = function(o){var self = TMP_23.$$s || this;
if (o == null) o = nil;
        return self.$Native(o)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b)
      } else if ((($a = obj['$is_a?']($scope.get('Proc'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = self).$proc, $a.$$p = (TMP_24 = function($d_rest){var self = TMP_24.$$s || this, block, args, $e, $f;

          block = TMP_24.$$p || nil, TMP_24.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return self.$Native(($e = ($f = obj).$call, $e.$$p = block.$to_proc(), $e).apply($f, Opal.to_a(args)))}, TMP_24.$$s = self, TMP_24.$$arity = -1, TMP_24), $a).call($c)
        } else {
        return obj
      };
    }, TMP_25.$$arity = 1);

    self.$alias_method("_Array", "Array");

    Opal.defn(self, '$Array', TMP_26 = function $$Array(object, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_26.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_26.$$p = null;
      if ((($b = self['$native?'](object)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return ($b = ($c = (($scope.get('Native')).$$scope.get('Array'))).$new, $b.$$p = block.$to_proc(), $b).apply($c, [object].concat(Opal.to_a(args))).$to_a()};
      return self.$_Array(object);
    }, TMP_26.$$arity = -2);
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41;

    def["native"] = nil;
    self.$include(Opal.get('Native'));

    Opal.defn(self, '$==', TMP_27 = function(other) {
      var self = this;

      return self["native"] === $scope.get('Native').$try_convert(other);
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$has_key?', TMP_28 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name);
    }, TMP_28.$$arity = 1);

    Opal.alias(self, 'key?', 'has_key?');

    Opal.alias(self, 'include?', 'has_key?');

    Opal.alias(self, 'member?', 'has_key?');

    Opal.defn(self, '$each', TMP_29 = function $$each($a_rest) {
      var $b, self = this, args, $iter = TMP_29.$$p, $yield = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_29.$$p = null;
      if (($yield !== nil)) {
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
        } else {
        return ($b = self).$method_missing.apply($b, ["each"].concat(Opal.to_a(args)))
      };
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$[]', TMP_30 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.get('Native').$call(self["native"], key)
      }
    ;
    }, TMP_30.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_31 = function(key, value) {
      var $a, self = this, native$ = nil;

      native$ = $scope.get('Native').$try_convert(value);
      if ((($a = native$ === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][key] = value;
        } else {
        return self["native"][key] = native$;
      };
    }, TMP_31.$$arity = 2);

    Opal.defn(self, '$merge!', TMP_32 = function(other) {
      var self = this;

      
      other = $scope.get('Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$respond_to?', TMP_33 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return $scope.get('Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all);
    }, TMP_33.$$arity = -2);

    Opal.defn(self, '$respond_to_missing?', TMP_34 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.hasOwnProperty.call(self["native"], name);
    }, TMP_34.$$arity = -2);

    Opal.defn(self, '$method_missing', TMP_35 = function $$method_missing(mid, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_35.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_35.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return self['$[]='](mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0));
      }
      else {
        return ($b = ($c = Opal.get('Native')).$call, $b.$$p = block.$to_proc(), $b).apply($c, [self["native"], mid].concat(Opal.to_a(args)));
      }
    ;
    }, TMP_35.$$arity = -2);

    Opal.defn(self, '$nil?', TMP_36 = function() {
      var self = this;

      return false;
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$is_a?', TMP_37 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    }, TMP_37.$$arity = 1);

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$instance_of?', TMP_38 = function(klass) {
      var self = this;

      return self.$$class === klass;
    }, TMP_38.$$arity = 1);

    Opal.defn(self, '$class', TMP_39 = function() {
      var self = this;

      return self.$$class;
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_40 = function $$to_a(options) {
      var $a, $b, self = this, $iter = TMP_40.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      TMP_40.$$p = null;
      return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], options).$to_a();
    }, TMP_40.$$arity = -1);

    return (Opal.defn(self, '$inspect', TMP_41 = function $$inspect() {
      var self = this;

      return "#<Native:" + (String(self["native"])) + ">";
    }, TMP_41.$$arity = 0), nil) && 'inspect';
  })($scope.get('Native'), $scope.get('BasicObject'));
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    self.$include($scope.get('Native'));

    self.$include($scope.get('Enumerable'));

    Opal.defn(self, '$initialize', TMP_42 = function $$initialize(native$, options) {
      var $a, $b, self = this, $iter = TMP_42.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      TMP_42.$$p = null;
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_42, false)), $a.$$p = null, $a).call($b, native$);
      self.get = ((($a = options['$[]']("get")) !== false && $a !== nil && $a != null) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ((($a = options['$[]']("set")) !== false && $a !== nil && $a != null) ? $a : options['$[]']("access"));
      self.length = ((($a = options['$[]']("length")) !== false && $a !== nil && $a != null) ? $a : "length");
      self.block = block;
      if ((($a = self.$length() == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    }, TMP_42.$$arity = -2);

    Opal.defn(self, '$each', TMP_43 = function $$each() {
      var self = this, $iter = TMP_43.$$p, block = $iter || nil;

      TMP_43.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$[]', TMP_44 = function(index) {
      var $a, self = this, result = nil, $case = nil;

      result = (function() {$case = index;if ($scope.get('String')['$===']($case) || $scope.get('Symbol')['$===']($case)) {if ((($a = self.named) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.named](index);
        } else {
        return self["native"][index];
      }}else if ($scope.get('Integer')['$===']($case)) {if ((($a = self.get) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.get](index);
        } else {
        return self["native"][index];
      }}else { return nil }})();
      if (result !== false && result !== nil && result != null) {
        if ((($a = self.block) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_45 = function(index, value) {
      var $a, self = this;

      if ((($a = self.set) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.set](index, $scope.get('Native').$convert(value));
        } else {
        return self["native"][index] = $scope.get('Native').$convert(value);
      };
    }, TMP_45.$$arity = 2);

    Opal.defn(self, '$last', TMP_46 = function $$last(count) {
      var $a, $b, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil;
      }
      if (count !== false && count !== nil && count != null) {
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ((($b = $rb_ge(index, 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        result['$<<'](self['$[]'](index));
        index = $rb_minus(index, 1);};
        return result;
        } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      };
    }, TMP_46.$$arity = -1);

    Opal.defn(self, '$length', TMP_47 = function $$length() {
      var self = this;

      return self["native"][self.length];
    }, TMP_47.$$arity = 0);

    Opal.alias(self, 'to_ary', 'to_a');

    return (Opal.defn(self, '$inspect', TMP_48 = function $$inspect() {
      var self = this;

      return self.$to_a().$inspect();
    }, TMP_48.$$arity = 0), nil) && 'inspect';
  })($scope.get('Native'), null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_49;

    return (Opal.defn(self, '$to_n', TMP_49 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_49.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_50;

    return (Opal.defn(self, '$to_n', TMP_50 = function $$to_n() {
      var self = this;

      return self;
    }, TMP_50.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_51;

    return (Opal.defn(self, '$to_n', TMP_51 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_51.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope, TMP_52;

    return (Opal.defn(self, '$to_n', TMP_52 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_52.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope, TMP_53;

    def.matches = nil;
    return (Opal.defn(self, '$to_n', TMP_53 = function $$to_n() {
      var self = this;

      return self.matches;
    }, TMP_53.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope, TMP_55;

    return (Opal.defn(self, '$to_n', TMP_55 = function $$to_n() {
      var $a, $b, TMP_54, self = this, result = nil;

      result = {};
      ($a = ($b = self).$each_pair, $a.$$p = (TMP_54 = function(name, value){var self = TMP_54.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = $scope.get('Native').$try_convert(value, value);}, TMP_54.$$s = self, TMP_54.$$arity = 2, TMP_54), $a).call($b);
      return result;
    }, TMP_55.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_56;

    return (Opal.defn(self, '$to_n', TMP_56 = function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push($scope.get('Native').$try_convert(obj, obj));
      }

      return result;
    
    }, TMP_56.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope, TMP_57;

    return (Opal.defn(self, '$to_n', TMP_57 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_57.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_58;

    return (Opal.defn(self, '$to_n', TMP_58 = function $$to_n() {
      var self = this;

      return self;
    }, TMP_58.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_59;

    return (Opal.defn(self, '$to_n', TMP_59 = function $$to_n() {
      var self = this;

      return null;
    }, TMP_59.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_60, TMP_61;

    self.$alias_method("_initialize", "initialize");

    Opal.defn(self, '$initialize', TMP_60 = function $$initialize(defaults) {
      var $a, $b, self = this, $iter = TMP_60.$$p, block = $iter || nil;

      TMP_60.$$p = null;
      
      if (defaults != null && defaults.constructor === Object) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value && value.constructor === Object) {
            smap[key] = $scope.get('Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item && item.constructor === Object) {
                return $scope.get('Hash').$new(item);
              }

              return item;
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return ($a = ($b = self).$_initialize, $a.$$p = block.$to_proc(), $a).call($b, defaults);
    
    }, TMP_60.$$arity = -1);

    return (Opal.defn(self, '$to_n', TMP_61 = function $$to_n() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = $scope.get('Native').$try_convert(value, value);
      }

      return result;
    
    }, TMP_61.$$arity = 0), nil) && 'to_n';
  })($scope.base, null);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_62;

    return (Opal.defn(self, '$native_module', TMP_62 = function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self;
    }, TMP_62.$$arity = 0), nil) && 'native_module'
  })($scope.base, null);
  (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, TMP_63, TMP_64;

    Opal.defn(self, '$native_alias', TMP_63 = function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", self.$exiting_mid()));
      }
      self.$$proto[new_jsid] = aliased;
    ;
    }, TMP_63.$$arity = 2);

    return (Opal.defn(self, '$native_class', TMP_64 = function $$native_class() {
      var self = this;

      self.$native_module();
      self["new"] = self.$new;
    }, TMP_64.$$arity = 0), nil) && 'native_class';
  })($scope.base, null);
  return $gvars.$ = $gvars.global = self.$Native(Opal.global);
};

/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/constants"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$raise']);
  self.$require("native");
  if ((($a = ($scope.JQUERY_CLASS != null)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    return nil
    } else {
    return (function() {if ((($a = !!Opal.global.jQuery) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {return Opal.cdecl($scope, 'JQUERY_CLASS', Opal.cdecl($scope, 'JQUERY_SELECTOR', Opal.global.jQuery))}else if ((($a = !!Opal.global.Zepto) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {Opal.cdecl($scope, 'JQUERY_SELECTOR', Opal.global.Zepto);
    return Opal.cdecl($scope, 'JQUERY_CLASS', Opal.global.Zepto.zepto.Z);}else {return self.$raise($scope.get('NameError'), "Can't find jQuery or Zepto. jQuery must be included before opal-jquery")}})()
  };
};

/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/element"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$to_n', '$include', '$each', '$alias_native', '$attr_reader', '$nil?', '$[]', '$[]=', '$raise', '$is_a?', '$has_key?', '$delete', '$call', '$gsub', '$upcase', '$compact', '$map', '$respond_to?', '$<<', '$Native', '$new']);
  self.$require("native");
  self.$require("opal/jquery/constants");
  return (function($base, $super) {
    function $Element(){};
    var self = $Element = $klass($base, $super, 'Element', $Element);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45;

    var $ = $scope.get('JQUERY_SELECTOR').$to_n();

    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$find', TMP_1 = function $$find(selector) {
      var self = this;

      return $(selector);
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$[]', TMP_2 = function(selector) {
      var self = this;

      return $(selector);
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$id', TMP_3 = function $$id(id) {
      var self = this;

      
      var el = document.getElementById(id);

      if (!el) {
        return nil;
      }

      return $(el);
    
    }, TMP_3.$$arity = 1);

    Opal.defs(self, '$new', TMP_4 = function(tag) {
      var self = this;

      if (tag == null) {
        tag = "div";
      }
      return $(document.createElement(tag));
    }, TMP_4.$$arity = -1);

    Opal.defs(self, '$parse', TMP_5 = function $$parse(str) {
      var self = this;

      return $.parseHTML ? $($.parseHTML(str)) : $(str);
    }, TMP_5.$$arity = 1);

    Opal.defs(self, '$expose', TMP_7 = function $$expose($a_rest) {
      var $b, $c, TMP_6, self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = ($c = methods).$each, $b.$$p = (TMP_6 = function(method){var self = TMP_6.$$s || this;
if (method == null) method = nil;
      return self.$alias_native(method)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $b).call($c);
    }, TMP_7.$$arity = -1);

    self.$attr_reader("selector");

    self.$alias_native("after");

    self.$alias_native("before");

    self.$alias_native("parent");

    self.$alias_native("parents");

    self.$alias_native("prev");

    self.$alias_native("remove");

    self.$alias_native("hide");

    self.$alias_native("show");

    self.$alias_native("toggle");

    self.$alias_native("children");

    self.$alias_native("blur");

    self.$alias_native("closest");

    self.$alias_native("detach");

    self.$alias_native("focus");

    self.$alias_native("find");

    self.$alias_native("next");

    self.$alias_native("siblings");

    self.$alias_native("text");

    self.$alias_native("trigger");

    self.$alias_native("append");

    self.$alias_native("prepend");

    self.$alias_native("serialize");

    self.$alias_native("is");

    self.$alias_native("filter");

    self.$alias_native("not");

    self.$alias_native("last");

    self.$alias_native("wrap");

    self.$alias_native("stop");

    self.$alias_native("clone");

    self.$alias_native("empty");

    self.$alias_native("get");

    self.$alias_native("prop");

    Opal.alias(self, 'succ', 'next');

    Opal.alias(self, '<<', 'append');

    self.$alias_native("add_class", "addClass");

    self.$alias_native("append_to", "appendTo");

    self.$alias_native("has_class?", "hasClass");

    self.$alias_native("html=", "html");

    self.$alias_native("index");

    self.$alias_native("is?", "is");

    self.$alias_native("remove_attr", "removeAttr");

    self.$alias_native("remove_class", "removeClass");

    self.$alias_native("submit");

    self.$alias_native("text=", "text");

    self.$alias_native("toggle_class", "toggleClass");

    self.$alias_native("value=", "val");

    self.$alias_native("scroll_top=", "scrollTop");

    self.$alias_native("scroll_top", "scrollTop");

    self.$alias_native("scroll_left=", "scrollLeft");

    self.$alias_native("scroll_left", "scrollLeft");

    self.$alias_native("remove_attribute", "removeAttr");

    self.$alias_native("slide_down", "slideDown");

    self.$alias_native("slide_up", "slideUp");

    self.$alias_native("slide_toggle", "slideToggle");

    self.$alias_native("fade_toggle", "fadeToggle");

    self.$alias_native("height=", "height");

    self.$alias_native("width=", "width");

    self.$alias_native("outer_width", "outerWidth");

    self.$alias_native("outer_height", "outerHeight");

    Opal.defn(self, '$to_n', TMP_8 = function $$to_n() {
      var self = this;

      return self;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$[]', TMP_9 = function(name) {
      var self = this;

      
      var value = self.attr(name);
      if(value === undefined) return nil;
      return value;
    
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_10 = function(name, value) {
      var $a, self = this;

      if ((($a = value['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.removeAttr(name);};
      return self.attr(name, value);
    }, TMP_10.$$arity = 2);

    Opal.defn(self, '$attr', TMP_11 = function $$attr($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var size = args.length;
      switch (size) {
      case 1:
        return self['$[]'](args[0]);
        break;
      case 2:
        return self['$[]='](args[0], args[1]);
        break;
      default:
        self.$raise($scope.get('ArgumentError'), "#attr only accepts 1 or 2 arguments")
      }
    ;
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$has_attribute?', TMP_12 = function(name) {
      var self = this;

      return self.attr(name) !== undefined;
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$append_to_body', TMP_13 = function $$append_to_body() {
      var self = this;

      return self.appendTo(document.body);
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$append_to_head', TMP_14 = function $$append_to_head() {
      var self = this;

      return self.appendTo(document.head);
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$at', TMP_15 = function $$at(index) {
      var self = this;

      
      var length = self.length;

      if (index < 0) {
        index += length;
      }

      if (index < 0 || index >= length) {
        return nil;
      }

      return $(self[index]);
    
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$class_name', TMP_16 = function $$class_name() {
      var self = this;

      
      var first = self[0];
      return (first && first.className) || "";
    
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$class_name=', TMP_17 = function(name) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        self[i].className = name;
      }
    
      return self;
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$css', TMP_18 = function $$css(name, value) {
      var $a, $b, self = this;

      if (value == null) {
        value = nil;
      }
      if ((($a = ($b = value['$nil?'](), $b !== false && $b !== nil && $b != null ?name['$is_a?']($scope.get('String')) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.css(name)
      } else if ((($a = name['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.css(name.$to_n());
        } else {
        self.css(name, value);
      };
      return self;
    }, TMP_18.$$arity = -2);

    Opal.defn(self, '$animate', TMP_19 = function $$animate(params) {
      var $a, self = this, $iter = TMP_19.$$p, block = $iter || nil, speed = nil;

      TMP_19.$$p = null;
      speed = (function() {if ((($a = params['$has_key?']("speed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return params.$delete("speed")
        } else {
        return 400
      }; return nil; })();
      
      self.animate(params.$to_n(), speed, function() {
        (function() {if ((block !== nil)) {
        return block.$call()
        } else {
        return nil
      }; return nil; })()
      })
    ;
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$data', TMP_20 = function $$data($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = self.data.apply(self, args);
      return result == null ? nil : result;
    
    }, TMP_20.$$arity = -1);

    Opal.defn(self, '$effect', TMP_21 = function $$effect(name, $a_rest) {
      var $b, $c, TMP_22, $d, TMP_23, self = this, args, $iter = TMP_21.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_21.$$p = null;
      name = ($b = ($c = name).$gsub, $b.$$p = (TMP_22 = function(match){var self = TMP_22.$$s || this;
if (match == null) match = nil;
      return match['$[]'](1).$upcase()}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $b).call($c, /_\w/);
      args = ($b = ($d = args).$map, $b.$$p = (TMP_23 = function(a){var self = TMP_23.$$s || this, $a;
if (a == null) a = nil;
      if ((($a = a['$respond_to?']("to_n")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return a.$to_n()
          } else {
          return nil
        }}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $b).call($d).$compact();
      args['$<<'](function() { (function() {if ((block !== nil)) {
        return block.$call()
        } else {
        return nil
      }; return nil; })() });
      return self[name].apply(self, args);
    }, TMP_21.$$arity = -2);

    Opal.defn(self, '$visible?', TMP_24 = function() {
      var self = this;

      return self.is(':visible');
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$offset', TMP_25 = function $$offset() {
      var self = this;

      return self.$Native(self.offset());
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$each', TMP_26 = function $$each() {
      var self = this, $iter = TMP_26.$$p, $yield = $iter || nil;

      TMP_26.$$p = null;
      for (var i = 0, length = self.length; i < length; i++) {
      Opal.yield1($yield, $(self[i]));
      };
      return self;
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$first', TMP_27 = function $$first() {
      var self = this;

      return self.length ? self.first() : nil;
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$html', TMP_28 = function $$html(content) {
      var self = this;

      
      if (content != null) {
        return self.html(content);
      }

      return self.html() || '';
    
    }, TMP_28.$$arity = -1);

    Opal.defn(self, '$id', TMP_29 = function $$id() {
      var self = this;

      
      var first = self[0];
      return (first && first.id) || "";
    
    }, TMP_29.$$arity = 0);

    Opal.defn(self, '$id=', TMP_30 = function(id) {
      var self = this;

      
      var first = self[0];

      if (first) {
        first.id = id;
      }

      return self;
    
    }, TMP_30.$$arity = 1);

    Opal.defn(self, '$tag_name', TMP_31 = function $$tag_name() {
      var self = this;

      return self.length > 0 ? self[0].tagName.toLowerCase() : nil;
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_32 = function $$inspect() {
      var self = this;

      
      if      (self[0] === document) return '#<Element [document]>'
      else if (self[0] === window  ) return '#<Element [window]>'

      var val, el, str, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];
        if (!el.tagName) { return '#<Element ['+el.toString()+']'; }

        str = "<" + el.tagName.toLowerCase();

        if (val = el.id) str += (' id="' + val + '"');
        if (val = el.className) str += (' class="' + val + '"');

        result.push(str + '>');
      }

      return '#<Element [' + result.join(', ') + ']>';
    
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_33 = function $$to_s() {
      var self = this;

      
      var val, el, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];

        result.push(el.outerHTML)
      }

      return result.join(', ');
    
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$length', TMP_34 = function $$length() {
      var self = this;

      return self.length;
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$any?', TMP_35 = function() {
      var self = this;

      return self.length > 0;
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_36 = function() {
      var self = this;

      return self.length === 0;
    }, TMP_36.$$arity = 0);

    Opal.alias(self, 'empty?', 'none?');

    Opal.defn(self, '$on', TMP_37 = function $$on(name, sel) {
      var self = this, $iter = TMP_37.$$p, block = $iter || nil;

      if (sel == null) {
        sel = nil;
      }
      TMP_37.$$p = null;
      
      var wrapper = function(evt) {
        if (evt.preventDefault) {
          evt = $scope.get('Event').$new(evt);
        }

        return block.apply(null, arguments);
      };

      block._jq_wrap = wrapper;

      if (sel == nil) {
        self.on(name, wrapper);
      }
      else {
        self.on(name, sel, wrapper);
      }
    ;
      return block;
    }, TMP_37.$$arity = -2);

    Opal.defn(self, '$one', TMP_38 = function $$one(name, sel) {
      var self = this, $iter = TMP_38.$$p, block = $iter || nil;

      if (sel == null) {
        sel = nil;
      }
      TMP_38.$$p = null;
      
      var wrapper = function(evt) {
        if (evt.preventDefault) {
          evt = $scope.get('Event').$new(evt);
        }

        return block.apply(null, arguments);
      };

      block._jq_wrap = wrapper;

      if (sel == nil) {
        self.one(name, wrapper);
      }
      else {
        self.one(name, sel, wrapper);
      }
    ;
      return block;
    }, TMP_38.$$arity = -2);

    Opal.defn(self, '$off', TMP_39 = function $$off(name, sel, block) {
      var self = this;

      if (block == null) {
        block = nil;
      }
      
      if (sel == null) {
        return self.off(name);
      }
      else if (block === nil) {
        return self.off(name, sel._jq_wrap);
      }
      else {
        return self.off(name, sel, block._jq_wrap);
      }
    
    }, TMP_39.$$arity = -3);

    Opal.defn(self, '$serialize_array', TMP_41 = function $$serialize_array() {
      var $a, $b, TMP_40, self = this;

      return ($a = ($b = (self.serializeArray())).$map, $a.$$p = (TMP_40 = function(e){var self = TMP_40.$$s || this;
if (e == null) e = nil;
      return $scope.get('Hash').$new(e)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
    }, TMP_41.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$value', TMP_42 = function $$value() {
      var self = this;

      return self.val() || "";
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$height', TMP_43 = function $$height() {
      var self = this;

      return self.height() || nil;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$width', TMP_44 = function $$width() {
      var self = this;

      return self.width() || nil;
    }, TMP_44.$$arity = 0);

    return (Opal.defn(self, '$position', TMP_45 = function $$position() {
      var self = this;

      return self.$Native(self.position());
    }, TMP_45.$$arity = 0), nil) && 'position';
  })($scope.base, $scope.get('JQUERY_CLASS').$to_n());
};

/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/window"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$find', '$on', '$to_proc', '$element', '$off', '$trigger', '$new']);
  self.$require("opal/jquery/element");
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

      def.element = nil;
      self.$include($scope.get('Native'));

      Opal.defn(self, '$element', TMP_1 = function $$element() {
        var $a, self = this;

        return ((($a = self.element) !== false && $a !== nil && $a != null) ? $a : self.element = $scope.get('Element').$find(window));
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$on', TMP_2 = function $$on($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_2.$$p = null;
        return ($b = ($c = self.$element()).$on, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      }, TMP_2.$$arity = -1);

      Opal.defn(self, '$off', TMP_3 = function $$off($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_3.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_3.$$p = null;
        return ($b = ($c = self.$element()).$off, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      }, TMP_3.$$arity = -1);

      return (Opal.defn(self, '$trigger', TMP_4 = function $$trigger($a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = self.$element()).$trigger.apply($b, Opal.to_a(args));
      }, TMP_4.$$arity = -1), nil) && 'trigger';
    })($scope.base, null)
  })($scope.base);
  Opal.cdecl($scope, 'Window', (($scope.get('Browser')).$$scope.get('Window')).$new(window));
  return $gvars.window = $scope.get('Window');
};

/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/document"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$to_n', '$call', '$new', '$ready?', '$resolve', '$module_function', '$find', '$extend']);
  self.$require("opal/jquery/constants");
  self.$require("opal/jquery/element");
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DocumentMethods, self = $DocumentMethods = $module($base, 'DocumentMethods');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, $a, $b, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

      var $ = $scope.get('JQUERY_SELECTOR').$to_n();

      Opal.defn(self, '$ready?', TMP_1 = function() {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        if ((block !== nil)) {
          if ((($a = (($b = Opal.cvars['@@__isReady']) == null ? nil : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return block.$call()
            } else {
            return $(block);
          }
          } else {
          return nil
        };
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$ready', TMP_3 = function $$ready() {
        var $a, $b, TMP_2, self = this, promise = nil;

        promise = $scope.get('Promise').$new();
        ($a = ($b = $scope.get('Document'))['$ready?'], $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return promise.$resolve()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b);
        return promise;
      }, TMP_3.$$arity = 0);

      self.$module_function("ready?");

      ($a = ($b = self)['$ready?'], $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

      return (Opal.cvars['@@__isReady'] = true)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b);

      Opal.defn(self, '$title', TMP_5 = function $$title() {
        var self = this;

        return document.title;
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$title=', TMP_6 = function(title) {
        var self = this;

        return document.title = title;
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$head', TMP_7 = function $$head() {
        var self = this;

        return $scope.get('Element').$find(document.head);
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$body', TMP_8 = function $$body() {
        var self = this;

        return $scope.get('Element').$find(document.body);
      }, TMP_8.$$arity = 0);
    })($scope.base)
  })($scope.base);
  Opal.cdecl($scope, 'Document', $scope.get('Element').$find(document));
  $scope.get('Document').$extend((($scope.get('Browser')).$$scope.get('DocumentMethods')));
  return $gvars.document = $scope.get('Document');
};

/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/event"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$to_n', '$stop', '$prevent']);
  self.$require("opal/jquery/constants");
  return (function($base, $super) {
    function $Event(){};
    var self = $Event = $klass($base, $super, 'Event', $Event);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22;

    def["native"] = nil;
    var $ = $scope.get('JQUERY_SELECTOR').$to_n();

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize(native$) {
      var self = this;

      return self["native"] = native$;
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$to_n', TMP_2 = function $$to_n() {
      var self = this;

      return self["native"];
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$[]', TMP_3 = function(name) {
      var self = this;

      return self["native"][name];
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$type', TMP_4 = function $$type() {
      var self = this;

      return self["native"].type;
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$element', TMP_5 = function $$element() {
      var self = this;

      return $(self["native"].currentTarget);
    }, TMP_5.$$arity = 0);

    Opal.alias(self, 'current_target', 'element');

    Opal.defn(self, '$target', TMP_6 = function $$target() {
      var self = this;

      return $(self["native"].target);
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$prevented?', TMP_7 = function() {
      var self = this;

      return self["native"].isDefaultPrevented();
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$prevent', TMP_8 = function $$prevent() {
      var self = this;

      return self["native"].preventDefault();
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$stopped?', TMP_9 = function() {
      var self = this;

      return self["native"].isPropagationStopped();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$stop', TMP_10 = function $$stop() {
      var self = this;

      return self["native"].stopPropagation();
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$stop_immediate', TMP_11 = function $$stop_immediate() {
      var self = this;

      return self["native"].stopImmediatePropagation();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$kill', TMP_12 = function $$kill() {
      var self = this;

      self.$stop();
      return self.$prevent();
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$page_x', TMP_13 = function $$page_x() {
      var self = this;

      return self["native"].pageX;
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$page_y', TMP_14 = function $$page_y() {
      var self = this;

      return self["native"].pageY;
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$touch_x', TMP_15 = function $$touch_x() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageX;
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$touch_y', TMP_16 = function $$touch_y() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageY;
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$ctrl_key', TMP_17 = function $$ctrl_key() {
      var self = this;

      return self["native"].ctrlKey;
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$meta_key', TMP_18 = function $$meta_key() {
      var self = this;

      return self["native"].metaKey;
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$alt_key', TMP_19 = function $$alt_key() {
      var self = this;

      return self["native"].altKey;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$shift_key', TMP_20 = function $$shift_key() {
      var self = this;

      return self["native"].shiftKey;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$key_code', TMP_21 = function $$key_code() {
      var self = this;

      return self["native"].keyCode;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$which', TMP_22 = function $$which() {
      var self = this;

      return self["native"].which;
    }, TMP_22.$$arity = 0);

    Opal.alias(self, 'default_prevented?', 'prevented?');

    Opal.alias(self, 'prevent_default', 'prevent');

    Opal.alias(self, 'propagation_stopped?', 'stopped?');

    Opal.alias(self, 'stop_propagation', 'stop');

    return Opal.alias(self, 'stop_immediate_propagation', 'stop_immediate');
  })($scope.base, null);
};

/* Generated by Opal 0.10.3 */
Opal.modules["json"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$push', '$[]=', '$[]', '$create_id', '$json_create', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  (function($base) {
    var $JSON, self = $JSON = $module($base, 'JSON');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    
    var $parse  = JSON.parse,
        $hasOwn = Opal.hasOwnProperty;

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (hash)['$[]='](k, to_opal(value[k], options));
              }
            }

            if (!options.parse && (klass = (hash)['$[]']($scope.get('JSON').$create_id())) != nil) {
              klass = Opal.get(klass);
              return (klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self));

    (($a = ["json_class"]), $b = self, $b['$create_id='].apply($b, $a), $a[$a.length-1]);

    Opal.defs(self, '$[]', TMP_1 = function(value, options) {
      var $a, self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      if ((($a = $scope.get('String')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$parse(value, options)
        } else {
        return self.$generate(value, options)
      };
    }, TMP_1.$$arity = -2);

    Opal.defs(self, '$parse', TMP_2 = function $$parse(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})));
    }, TMP_2.$$arity = -2);

    Opal.defs(self, '$parse!', TMP_3 = function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$parse(source, options);
    }, TMP_3.$$arity = -2);

    Opal.defs(self, '$load', TMP_4 = function $$load(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options);
    }, TMP_4.$$arity = -2);

    Opal.defs(self, '$from_object', TMP_5 = function $$from_object(js_object, options) {
      var $a, $b, $c, self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      ($a = "object_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $scope.get('Hash'))));
      ($a = "array_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $scope.get('Array'))));
      return to_opal(js_object, options.$$smap);
    }, TMP_5.$$arity = -2);

    Opal.defs(self, '$generate', TMP_6 = function $$generate(obj, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return obj.$to_json(options);
    }, TMP_6.$$arity = -2);

    Opal.defs(self, '$dump', TMP_7 = function $$dump(obj, io, limit) {
      var $a, self = this, string = nil;

      if (io == null) {
        io = nil;
      }
      if (limit == null) {
        limit = nil;
      }
      string = self.$generate(obj);
      if (io !== false && io !== nil && io != null) {
        if ((($a = io['$responds_to?']("to_io")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
        } else {
        return string
      };
    }, TMP_7.$$arity = -2);
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_8;

    return (Opal.defn(self, '$to_json', TMP_8 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json();
    }, TMP_8.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_9;

    Opal.defn(self, '$to_json', TMP_9 = function $$to_json() {
      var self = this;

      return self.$to_a().$to_json();
    }, TMP_9.$$arity = 0)
  })($scope.base);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_10;

    return (Opal.defn(self, '$to_json', TMP_10 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, TMP_10.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope, TMP_11;

    return (Opal.defn(self, '$to_json', TMP_11 = function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, TMP_11.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_12;

    return (Opal.defn(self, '$to_json', TMP_12 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(', ') + '}';
    ;
    }, TMP_12.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_13;

    return (Opal.defn(self, '$to_json', TMP_13 = function $$to_json() {
      var self = this;

      return "null";
    }, TMP_13.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_14;

    return (Opal.defn(self, '$to_json', TMP_14 = function $$to_json() {
      var self = this;

      return self.toString();
    }, TMP_14.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return Opal.alias(self, 'to_json', 'inspect')
  })($scope.base, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_15;

    return (Opal.defn(self, '$to_json', TMP_15 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json();
    }, TMP_15.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  return (function($base, $super) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $scope = self.$$scope, TMP_16, TMP_17;

    Opal.defn(self, '$to_json', TMP_16 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json();
    }, TMP_16.$$arity = 0);

    return (Opal.defn(self, '$as_json', TMP_17 = function $$as_json() {
      var self = this;

      return self.$to_s();
    }, TMP_17.$$arity = 0), nil) && 'as_json';
  })($scope.base, null);
};

/* Generated by Opal 0.10.3 */
Opal.modules["promise"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$resolve', '$new', '$reject', '$attr_reader', '$===', '$value', '$has_key?', '$keys', '$!', '$==', '$<<', '$>>', '$exception?', '$[]', '$resolved?', '$rejected?', '$error', '$include?', '$action', '$realized?', '$raise', '$^', '$call', '$resolve!', '$exception!', '$any?', '$each', '$reject!', '$there_can_be_only_one!', '$then', '$to_proc', '$fail', '$always', '$trace', '$class', '$object_id', '$+', '$inspect', '$act?', '$nil?', '$prev', '$push', '$concat', '$it', '$proc', '$reverse', '$pop', '$<=', '$length', '$shift', '$-', '$wait', '$map', '$reduce', '$try', '$tap', '$all?', '$find']);
  return (function($base, $super) {
    function $Promise(){};
    var self = $Promise = $klass($base, $super, 'Promise', $Promise);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_18, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31;

    def.value = def.action = def.exception = def.realized = def.next = def.delayed = def.error = def.prev = nil;
    Opal.defs(self, '$value', TMP_1 = function $$value(value) {
      var self = this;

      return self.$new().$resolve(value);
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$error', TMP_2 = function $$error(value) {
      var self = this;

      return self.$new().$reject(value);
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$when', TMP_3 = function $$when($a_rest) {
      var self = this, promises;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      promises = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        promises[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $scope.get('When').$new(promises);
    }, TMP_3.$$arity = -1);

    self.$attr_reader("error", "prev", "next");

    Opal.defn(self, '$initialize', TMP_4 = function $$initialize(action) {
      var self = this;

      if (action == null) {
        action = $hash2([], {});
      }
      self.action = action;
      self.realized = false;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = false;
      self.prev = nil;
      return self.next = [];
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$value', TMP_5 = function $$value() {
      var $a, self = this;

      if ((($a = $scope.get('Promise')['$==='](self.value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.value.$value()
        } else {
        return self.value
      };
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$act?', TMP_6 = function() {
      var $a, self = this;

      return ((($a = self.action['$has_key?']("success")) !== false && $a !== nil && $a != null) ? $a : self.action['$has_key?']("always"));
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$action', TMP_7 = function $$action() {
      var self = this;

      return self.action.$keys();
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$exception?', TMP_8 = function() {
      var self = this;

      return self.exception;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$realized?', TMP_9 = function() {
      var self = this;

      return self.realized['$!']()['$!']();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$resolved?', TMP_10 = function() {
      var self = this;

      return self.realized['$==']("resolve");
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$rejected?', TMP_11 = function() {
      var self = this;

      return self.realized['$==']("reject");
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$^', TMP_12 = function(promise) {
      var self = this;

      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$<<', TMP_13 = function(promise) {
      var self = this;

      self.prev = promise;
      return self;
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$>>', TMP_14 = function(promise) {
      var $a, $b, $c, self = this;

      self.next['$<<'](promise);
      if ((($a = self['$exception?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        promise.$reject(self.delayed['$[]'](0))
      } else if ((($a = self['$resolved?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        promise.$resolve((function() {if ((($a = self.delayed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.$value()
        }; return nil; })())
      } else if ((($a = self['$rejected?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = self.action['$has_key?']("failure")['$!']()) !== false && $b !== nil && $b != null) ? $b : $scope.get('Promise')['$==='](((function() {if ((($c = self.delayed) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.error
        }; return nil; })())))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())
        } else if ((($a = promise.$action()['$include?']("always")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())}};
      return self;
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$resolve', TMP_15 = function $$resolve(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      if ((($a = self['$realized?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
        if ((($a = block = ((($b = self.action['$[]']("success")) !== false && $b !== nil && $b != null) ? $b : self.action['$[]']("always"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        self['$resolve!'](value);
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return self;
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$resolve!', TMP_17 = function(value) {
      var $a, $b, TMP_16, self = this;

      self.realized = "resolve";
      self.value = value;
      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self.next).$each, $a.$$p = (TMP_16 = function(p){var self = TMP_16.$$s || this;
if (p == null) p = nil;
        return p.$resolve(value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b)
        } else {
        return self.delayed = [value]
      };
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$reject', TMP_18 = function $$reject(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      if ((($a = self['$realized?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
        if ((($a = block = ((($b = self.action['$[]']("failure")) !== false && $b !== nil && $b != null) ? $b : self.action['$[]']("always"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        if ((($a = self.action['$has_key?']("always")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self['$resolve!'](value)
          } else {
          self['$reject!'](value)
        };
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return self;
    }, TMP_18.$$arity = -1);

    Opal.defn(self, '$reject!', TMP_20 = function(value) {
      var $a, $b, TMP_19, self = this;

      self.realized = "reject";
      self.error = value;
      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self.next).$each, $a.$$p = (TMP_19 = function(p){var self = TMP_19.$$s || this;
if (p == null) p = nil;
        return p.$reject(value)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($b)
        } else {
        return self.delayed = [value]
      };
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$exception!', TMP_21 = function(error) {
      var self = this;

      self.exception = true;
      return self['$reject!'](error);
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$then', TMP_22 = function $$then() {
      var self = this, $iter = TMP_22.$$p, block = $iter || nil;

      TMP_22.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["success"], {"success": block})));
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$then!', TMP_23 = function() {
      var $a, $b, self = this, $iter = TMP_23.$$p, block = $iter || nil;

      TMP_23.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$then, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_23.$$arity = 0);

    Opal.alias(self, 'do', 'then');

    Opal.alias(self, 'do!', 'then!');

    Opal.defn(self, '$fail', TMP_24 = function $$fail() {
      var self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["failure"], {"failure": block})));
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$fail!', TMP_25 = function() {
      var $a, $b, self = this, $iter = TMP_25.$$p, block = $iter || nil;

      TMP_25.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$fail, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_25.$$arity = 0);

    Opal.alias(self, 'rescue', 'fail');

    Opal.alias(self, 'catch', 'fail');

    Opal.alias(self, 'rescue!', 'fail!');

    Opal.alias(self, 'catch!', 'fail!');

    Opal.defn(self, '$always', TMP_26 = function $$always() {
      var self = this, $iter = TMP_26.$$p, block = $iter || nil;

      TMP_26.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["always"], {"always": block})));
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$always!', TMP_27 = function() {
      var $a, $b, self = this, $iter = TMP_27.$$p, block = $iter || nil;

      TMP_27.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$always, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_27.$$arity = 0);

    Opal.alias(self, 'finally', 'always');

    Opal.alias(self, 'ensure', 'always');

    Opal.alias(self, 'finally!', 'always!');

    Opal.alias(self, 'ensure!', 'always!');

    Opal.defn(self, '$trace', TMP_28 = function $$trace(depth) {
      var self = this, $iter = TMP_28.$$p, block = $iter || nil;

      if (depth == null) {
        depth = nil;
      }
      TMP_28.$$p = null;
      return self['$^']($scope.get('Trace').$new(depth, block));
    }, TMP_28.$$arity = -1);

    Opal.defn(self, '$trace!', TMP_29 = function($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_29.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_29.$$p = null;
      self['$there_can_be_only_one!']();
      return ($b = ($c = self).$trace, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$there_can_be_only_one!', TMP_30 = function() {
      var $a, self = this;

      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "a promise has already been chained")
        } else {
        return nil
      };
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_31 = function $$inspect() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, " >> " + (self.next.$inspect()))};
      if ((($a = self['$realized?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, ": " + ((((($a = self.value) !== false && $a !== nil && $a != null) ? $a : self.error)).$inspect()) + ">")
        } else {
        result = $rb_plus(result, ">")
      };
      return result;
    }, TMP_31.$$arity = 0);

    (function($base, $super) {
      function $Trace(){};
      var self = $Trace = $klass($base, $super, 'Trace', $Trace);

      var def = self.$$proto, $scope = self.$$scope, TMP_32, TMP_33;

      Opal.defs(self, '$it', TMP_32 = function $$it(promise) {
        var $a, $b, self = this, current = nil, prev = nil;

        current = [];
        if ((($a = ((($b = promise['$act?']()) !== false && $b !== nil && $b != null) ? $b : promise.$prev()['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          current.$push(promise.$value())};
        if ((($a = prev = promise.$prev()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return current.$concat(self.$it(prev))
          } else {
          return current
        };
      }, TMP_32.$$arity = 1);

      return (Opal.defn(self, '$initialize', TMP_33 = function $$initialize(depth, block) {
        var $a, $b, $c, $d, TMP_34, self = this, $iter = TMP_33.$$p, $yield = $iter || nil;

        TMP_33.$$p = null;
        self.depth = depth;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_33, false)), $a.$$p = null, $a).call($b, $hash2(["success"], {"success": ($c = ($d = self).$proc, $c.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this, $e, $f, trace = nil;

        trace = $scope.get('Trace').$it(self).$reverse();
          trace.$pop();
          if ((($e = (($f = depth !== false && depth !== nil && depth != null) ? $rb_le(depth, trace.$length()) : depth)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            trace.$shift($rb_minus(trace.$length(), depth))};
          return ($e = block).$call.apply($e, Opal.to_a(trace));}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $c).call($d)}));
      }, TMP_33.$$arity = 2), nil) && 'initialize';
    })($scope.base, self);

    return (function($base, $super) {
      function $When(){};
      var self = $When = $klass($base, $super, 'When', $When);

      var def = self.$$proto, $scope = self.$$scope, TMP_35, TMP_37, TMP_39, TMP_41, TMP_44, TMP_46, TMP_47;

      def.wait = nil;
      Opal.defn(self, '$initialize', TMP_35 = function $$initialize(promises) {
        var $a, $b, $c, TMP_36, self = this, $iter = TMP_35.$$p, $yield = $iter || nil;

        if (promises == null) {
          promises = [];
        }
        TMP_35.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_35, false)), $a.$$p = null, $a).call($b);
        self.wait = [];
        return ($a = ($c = promises).$each, $a.$$p = (TMP_36 = function(promise){var self = TMP_36.$$s || this;
if (promise == null) promise = nil;
        return self.$wait(promise)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $a).call($c);
      }, TMP_35.$$arity = -1);

      Opal.defn(self, '$each', TMP_37 = function $$each() {
        var $a, $b, TMP_38, self = this, $iter = TMP_37.$$p, block = $iter || nil;

        TMP_37.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_38 = function(values){var self = TMP_38.$$s || this, $c, $d;
if (values == null) values = nil;
        return ($c = ($d = values).$each, $c.$$p = block.$to_proc(), $c).call($d)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $a).call($b);
      }, TMP_37.$$arity = 0);

      Opal.defn(self, '$collect', TMP_39 = function $$collect() {
        var $a, $b, TMP_40, self = this, $iter = TMP_39.$$p, block = $iter || nil;

        TMP_39.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_40 = function(values){var self = TMP_40.$$s || this, $c, $d;
if (values == null) values = nil;
        return $scope.get('When').$new(($c = ($d = values).$map, $c.$$p = block.$to_proc(), $c).call($d))}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
      }, TMP_39.$$arity = 0);

      Opal.defn(self, '$inject', TMP_41 = function $$inject($a_rest) {
        var $b, $c, TMP_42, self = this, args, $iter = TMP_41.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_41.$$p = null;
        return ($b = ($c = self).$then, $b.$$p = (TMP_42 = function(values){var self = TMP_42.$$s || this, $a, $d;
if (values == null) values = nil;
        return ($a = ($d = values).$reduce, $a.$$p = block.$to_proc(), $a).apply($d, Opal.to_a(args))}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42), $b).call($c);
      }, TMP_41.$$arity = -1);

      Opal.alias(self, 'map', 'collect');

      Opal.alias(self, 'reduce', 'inject');

      Opal.defn(self, '$wait', TMP_44 = function $$wait(promise) {
        var $a, $b, TMP_43, self = this;

        if ((($a = $scope.get('Promise')['$==='](promise)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          promise = $scope.get('Promise').$value(promise)
        };
        if ((($a = promise['$act?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          promise = promise.$then()};
        self.wait['$<<'](promise);
        ($a = ($b = promise).$always, $a.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this, $c;
          if (self.next == null) self.next = nil;

        if ((($c = self.next['$any?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return self.$try()
            } else {
            return nil
          }}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43), $a).call($b);
        return self;
      }, TMP_44.$$arity = 1);

      Opal.alias(self, 'and', 'wait');

      Opal.defn(self, '$>>', TMP_46 = function($a_rest) {
        var $b, $c, TMP_45, $d, $e, self = this, $iter = TMP_46.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_46.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return ($b = ($c = ($d = ($e = self, Opal.find_super_dispatcher(self, '>>', TMP_46, false)), $d.$$p = $iter, $d).apply($e, $zuper)).$tap, $b.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$try()}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45), $b).call($c);
      }, TMP_46.$$arity = -1);

      return (Opal.defn(self, '$try', TMP_47 = function() {
        var $a, $b, $c, $d, self = this, promise = nil;

        if ((($a = ($b = ($c = self.wait)['$all?'], $b.$$p = "realized?".$to_proc(), $b).call($c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = promise = ($b = ($d = self.wait).$find, $b.$$p = "rejected?".$to_proc(), $b).call($d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$reject(promise.$error())
            } else {
            return self.$resolve(($a = ($b = self.wait).$map, $a.$$p = "value".$to_proc(), $a).call($b))
          }
          } else {
          return nil
        };
      }, TMP_47.$$arity = 0), nil) && 'try';
    })($scope.base, self);
  })($scope.base, null)
};

/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/http"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$to_n', '$each', '$define_singleton_method', '$send', '$new', '$define_method', '$attr_reader', '$delete', '$update', '$upcase', '$succeed', '$fail', '$promise', '$parse', '$private', '$tap', '$proc', '$ok?', '$resolve', '$reject', '$from_object', '$call']);
  self.$require("json");
  self.$require("native");
  self.$require("promise");
  self.$require("opal/jquery/constants");
  return (function($base, $super) {
    function $HTTP(){};
    var self = $HTTP = $klass($base, $super, 'HTTP', $HTTP);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_13, TMP_14, TMP_15;

    def.settings = def.payload = def.url = def.method = def.handler = def.json = def.body = def.ok = def.xhr = def.promise = def.status_code = nil;
    var $ = $scope.get('JQUERY_SELECTOR').$to_n();

    Opal.cdecl($scope, 'ACTIONS', ["get", "post", "put", "delete", "patch", "head"]);

    ($a = ($b = $scope.get('ACTIONS')).$each, $a.$$p = (TMP_1 = function(action){var self = TMP_1.$$s || this, $c, $d, TMP_2, $e, TMP_3;
if (action == null) action = nil;
    ($c = ($d = self).$define_singleton_method, $c.$$p = (TMP_2 = function(url, options){var self = TMP_2.$$s || this, block;

        block = TMP_2.$$p || nil, TMP_2.$$p = null;
        if (options == null) {
          options = $hash2([], {});
        }if (url == null) url = nil;
      return self.$new().$send(action, url, options, block)}, TMP_2.$$s = self, TMP_2.$$arity = -2, TMP_2), $c).call($d, action);
      return ($c = ($e = self).$define_method, $c.$$p = (TMP_3 = function(url, options){var self = TMP_3.$$s || this, block;

        block = TMP_3.$$p || nil, TMP_3.$$p = null;
        if (options == null) {
          options = $hash2([], {});
        }if (url == null) url = nil;
      return self.$send(action, url, options, block)}, TMP_3.$$s = self, TMP_3.$$arity = -2, TMP_3), $c).call($e, action);}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);

    Opal.defs(self, '$setup', TMP_4 = function $$setup() {
      var self = this;

      return $scope.get('Hash').$new($.ajaxSetup());
    }, TMP_4.$$arity = 0);

    Opal.defs(self, '$setup=', TMP_5 = function(settings) {
      var self = this;

      return $.ajaxSetup(settings.$to_n());
    }, TMP_5.$$arity = 1);

    self.$attr_reader("body", "error_message", "method", "status_code", "url", "xhr");

    Opal.defn(self, '$initialize', TMP_6 = function $$initialize() {
      var self = this;

      self.settings = $hash2([], {});
      return self.ok = true;
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$send', TMP_7 = function $$send(method, url, options, block) {
      var $a, self = this, settings = nil, payload = nil;

      self.method = method;
      self.url = url;
      self.payload = options.$delete("payload");
      self.handler = block;
      self.settings.$update(options);
      $a = [self.settings.$to_n(), self.payload], settings = $a[0], payload = $a[1], $a;
      
      if (typeof(payload) === 'string') {
        settings.data = payload;
      }
      else if (payload != nil) {
        settings.data = payload.$to_json();
        settings.contentType = 'application/json';
      }

      settings.url  = self.url;
      settings.type = self.method.$upcase();

      settings.success = function(data, status, xhr) {
        return self.$succeed(data, status, xhr);
      };

      settings.error = function(xhr, status, error) {
        return self.$fail(xhr, status, error);
      };

      $.ajax(settings);
    ;
      if ((($a = self.handler) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return self.$promise()
      };
    }, TMP_7.$$arity = 4);

    Opal.defn(self, '$json', TMP_8 = function $$json() {
      var $a, self = this;

      return ((($a = self.json) !== false && $a !== nil && $a != null) ? $a : self.json = $scope.get('JSON').$parse(self.body));
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$ok?', TMP_9 = function() {
      var self = this;

      return self.ok;
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$get_header', TMP_10 = function $$get_header(key) {
      var self = this;

      
      var value = self.xhr.getResponseHeader(key);
      return (value === null) ? nil : value;
    ;
    }, TMP_10.$$arity = 1);

    self.$private();

    Opal.defn(self, '$promise', TMP_13 = function $$promise() {
      var $a, $b, TMP_11, self = this;

      if ((($a = self.promise) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.promise};
      return self.promise = ($a = ($b = $scope.get('Promise').$new()).$tap, $a.$$p = (TMP_11 = function(promise){var self = TMP_11.$$s || this, $c, $d, TMP_12;
if (promise == null) promise = nil;
      return self.handler = ($c = ($d = self).$proc, $c.$$p = (TMP_12 = function(res){var self = TMP_12.$$s || this, $e;
if (res == null) res = nil;
        if ((($e = res['$ok?']()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            return promise.$resolve(res)
            } else {
            return promise.$reject(res)
          }}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $c).call($d)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$succeed', TMP_14 = function $$succeed(data, status, xhr) {
      var $a, self = this;

      
      self.body = data;
      self.xhr  = xhr;
      self.status_code = xhr.status;

      if (typeof(data) === 'object') {
        self.json = $scope.get('JSON').$from_object(data);
      }
    ;
      if ((($a = self.handler) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.handler.$call(self)
        } else {
        return nil
      };
    }, TMP_14.$$arity = 3);

    return (Opal.defn(self, '$fail', TMP_15 = function $$fail(xhr, status, error) {
      var $a, self = this;

      
      self.body = xhr.responseText;
      self.xhr = xhr;
      self.status_code = xhr.status;
    ;
      self.ok = false;
      if ((($a = self.handler) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.handler.$call(self)
        } else {
        return nil
      };
    }, TMP_15.$$arity = 3), nil) && 'fail';
  })($scope.base, null);
};

/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery/kernel"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$alert', TMP_1 = function $$alert(msg) {
      var self = this;

      alert(msg);
      return nil;
    }, TMP_1.$$arity = 1)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["opal/jquery"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("opal/jquery/window");
    self.$require("opal/jquery/document");
    self.$require("opal/jquery/element");
    self.$require("opal/jquery/event");
    self.$require("opal/jquery/http");
    return self.$require("opal/jquery/kernel");}
};

/* Generated by Opal 0.10.3 */
Opal.modules["opal-jquery"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("opal/jquery")
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $scope = self.$$scope;

      return Opal.cdecl($scope, 'VERSION', "0.5.0")
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyperloop/client_stubs"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3;

      Opal.defn(self, '$import', TMP_1 = function($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil;
      }, TMP_1.$$arity = -1);
      Opal.defn(self, '$imports', TMP_2 = function $$imports($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil;
      }, TMP_2.$$arity = -1);
      return (Opal.defn(self, '$import_tree', TMP_3 = function $$import_tree($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil;
      }, TMP_3.$$arity = -1), nil) && 'import_tree';
    })(Opal.get_singleton_class(self))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyperloop/on_client"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$!']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defs(self, '$on_client?', TMP_1 = function() {
      var self = this;

      if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
        return ((typeof Opal.global.document === 'undefined'))['$!']()};
    }, TMP_1.$$arity = 0)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyperloop-config"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("hyperloop/client_stubs");
    return self.$require("hyperloop/on_client");}
};

/* Generated by Opal 0.10.3 */
Opal.modules["set"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$call', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);
  (function($base, $super) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_10, TMP_13, TMP_15, TMP_16, TMP_17, TMP_20, TMP_21, TMP_22, TMP_24, TMP_25, TMP_26, TMP_28, TMP_29, TMP_30, TMP_32, TMP_33, TMP_35, TMP_37, TMP_39, TMP_41, TMP_42;

    def.hash = nil;
    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$[]', TMP_1 = function($a_rest) {
      var self = this, ary;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      ary = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        ary[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$new(ary);
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_2 = function $$initialize(enum$) {
      var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil;
      }
      TMP_2.$$p = null;
      self.hash = $scope.get('Hash').$new();
      if ((($a = enum$['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = $scope.get('Enumerable')['$==='](enum$)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      if (block !== false && block !== nil && block != null) {
        return ($a = ($b = enum$).$each, $a.$$p = (TMP_3 = function(item){var self = TMP_3.$$s || this;
if (item == null) item = nil;
        return self.$add(block.$call(item))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)
        } else {
        return self.$merge(enum$)
      };
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$dup', TMP_4 = function $$dup() {
      var self = this, result = nil;

      result = self.$class().$new();
      return result.$merge(self);
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$-', TMP_5 = function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, TMP_5.$$arity = 1);

    Opal.alias(self, 'difference', '-');

    Opal.defn(self, '$inspect', TMP_6 = function $$inspect() {
      var self = this;

      return "#<Set: {" + (self.$to_a().$join(",")) + "}>";
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$==', TMP_8 = function(other) {
      var $a, $b, TMP_7, self = this;

      if ((($a = self['$equal?'](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true
      } else if ((($a = other['$instance_of?'](self.$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ((($a = ($b = other['$is_a?']($scope.get('Set')), $b !== false && $b !== nil && $b != null ?self.$size()['$=='](other.$size()) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = other)['$all?'], $a.$$p = (TMP_7 = function(o){var self = TMP_7.$$s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b)
        } else {
        return false
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$add', TMP_9 = function $$add(o) {
      var self = this;

      self.hash['$[]='](o, true);
      return self;
    }, TMP_9.$$arity = 1);

    Opal.alias(self, '<<', 'add');

    Opal.defn(self, '$classify', TMP_10 = function $$classify() {
      var $a, $b, TMP_11, $c, TMP_12, self = this, $iter = TMP_10.$$p, block = $iter || nil, result = nil;

      TMP_10.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("classify")
      };
      result = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_11 = function(h, k){var self = TMP_11.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
      return h['$[]='](k, self.$class().$new())}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $a).call($b);
      ($a = ($c = self).$each, $a.$$p = (TMP_12 = function(item){var self = TMP_12.$$s || this;
if (item == null) item = nil;
      return result['$[]'](Opal.yield1(block, item)).$add(item)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($c);
      return result;
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$collect!', TMP_13 = function() {
      var $a, $b, TMP_14, self = this, $iter = TMP_13.$$p, block = $iter || nil, result = nil;

      TMP_13.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      ($a = ($b = self).$each, $a.$$p = (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return result['$<<'](Opal.yield1(block, item))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
      return self.$replace(result);
    }, TMP_13.$$arity = 0);

    Opal.alias(self, 'map!', 'collect!');

    Opal.defn(self, '$delete', TMP_15 = function(o) {
      var self = this;

      self.hash.$delete(o);
      return self;
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$delete?', TMP_16 = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$delete(o);
        return self;
        } else {
        return nil
      };
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$delete_if', TMP_17 = function $$delete_if() {try {

      var $a, $b, TMP_18, $c, $d, TMP_19, self = this, $iter = TMP_17.$$p, $yield = $iter || nil;

      TMP_17.$$p = null;
      ((($a = ($yield !== nil)) !== false && $a !== nil && $a != null) ? $a : Opal.ret(self.$enum_for("delete_if")));
      ($a = ($b = ($c = ($d = self).$select, $c.$$p = (TMP_19 = function(o){var self = TMP_19.$$s || this;
if (o == null) o = nil;
      return Opal.yield1($yield, o);}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $c).call($d)).$each, $a.$$p = (TMP_18 = function(o){var self = TMP_18.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b);
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$add?', TMP_20 = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self.$add(o)
      };
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$each', TMP_21 = function $$each() {
      var $a, $b, self = this, $iter = TMP_21.$$p, block = $iter || nil;

      TMP_21.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      ($a = ($b = self.hash).$each_key, $a.$$p = block.$to_proc(), $a).call($b);
      return self;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_22 = function() {
      var self = this;

      return self.hash['$empty?']();
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_24 = function(other) {
      var $a, $b, TMP_23, self = this;

      return self.hash['$eql?'](($a = ($b = other).$instance_eval, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($b));
    }, TMP_24.$$arity = 1);

    Opal.defn(self, '$clear', TMP_25 = function $$clear() {
      var self = this;

      self.hash.$clear();
      return self;
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$include?', TMP_26 = function(o) {
      var self = this;

      return self.hash['$include?'](o);
    }, TMP_26.$$arity = 1);

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$merge', TMP_28 = function $$merge(enum$) {
      var $a, $b, TMP_27, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_27 = function(item){var self = TMP_27.$$s || this;
if (item == null) item = nil;
      return self.$add(item)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
      return self;
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$replace', TMP_29 = function $$replace(enum$) {
      var self = this;

      self.$clear();
      self.$merge(enum$);
      return self;
    }, TMP_29.$$arity = 1);

    Opal.defn(self, '$size', TMP_30 = function $$size() {
      var self = this;

      return self.hash.$size();
    }, TMP_30.$$arity = 0);

    Opal.alias(self, 'length', 'size');

    Opal.defn(self, '$subtract', TMP_32 = function $$subtract(enum$) {
      var $a, $b, TMP_31, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_31 = function(item){var self = TMP_31.$$s || this;
if (item == null) item = nil;
      return self.$delete(item)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($b);
      return self;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$|', TMP_33 = function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$superset?', TMP_35 = function(set) {
      var $a, $b, TMP_34, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(self.$size(), set.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_34 = function(o){var self = TMP_34.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34), $a).call($b);
    }, TMP_35.$$arity = 1);

    Opal.alias(self, '>=', 'superset?');

    Opal.defn(self, '$proper_superset?', TMP_37 = function(set) {
      var $a, $b, TMP_36, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(self.$size(), set.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_36 = function(o){var self = TMP_36.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $a).call($b);
    }, TMP_37.$$arity = 1);

    Opal.alias(self, '>', 'proper_superset?');

    Opal.defn(self, '$subset?', TMP_39 = function(set) {
      var $a, $b, TMP_38, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(set.$size(), self.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_38 = function(o){var self = TMP_38.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $a).call($b);
    }, TMP_39.$$arity = 1);

    Opal.alias(self, '<=', 'subset?');

    Opal.defn(self, '$proper_subset?', TMP_41 = function(set) {
      var $a, $b, TMP_40, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(set.$size(), self.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_40 = function(o){var self = TMP_40.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
    }, TMP_41.$$arity = 1);

    Opal.alias(self, '<', 'proper_subset?');

    Opal.alias(self, '+', '|');

    Opal.alias(self, 'union', '|');

    return (Opal.defn(self, '$to_a', TMP_42 = function $$to_a() {
      var self = this;

      return self.hash.$keys();
    }, TMP_42.$$arity = 0), nil) && 'to_a';
  })($scope.base, null);
  return (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_43;

    Opal.defn(self, '$to_set', TMP_43 = function $$to_set(klass, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_43.$$p, block = $iter || nil;

      if (klass == null) {
        klass = $scope.get('Set');
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_43.$$p = null;
      return ($b = ($c = klass).$new, $b.$$p = block.$to_proc(), $b).apply($c, [self].concat(Opal.to_a(args)));
    }, TMP_43.$$arity = -1)
  })($scope.base);
};

/* Generated by Opal 0.10.3 */
Opal.modules["active_support/inflector/inflections"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$extend', '$instance', '$split', '$empty?', '$const_get', '$>', '$size', '$first', '$shift', '$inject', '$==', '$const_defined?', '$ancestors', '$apply_inflections', '$plurals', '$inflections', '$singulars', '$to_s', '$include?', '$uncountables', '$downcase', '$each', '$sub', '$new', '$attr_reader', '$unshift', '$<<']);
  self.$require("set");
  return (function($base) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Inflector, self = $Inflector = $module($base, 'Inflector');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5, TMP_6, TMP_8;

      self.$extend(self);

      Opal.defn(self, '$inflections', TMP_1 = function $$inflections() {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        if (($yield !== nil)) {
          return Opal.yield1($yield, $scope.get('Inflections').$instance());
          } else {
          return $scope.get('Inflections').$instance()
        };
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$constantize', TMP_4 = function $$constantize(camel_cased_word) {
        var $a, $b, TMP_2, self = this, names = nil;

        names = camel_cased_word.$split("::");
        if ((($a = names['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          $scope.get('Object').$const_get(camel_cased_word)};
        if ((($a = ($b = $rb_gt(names.$size(), 1), $b !== false && $b !== nil && $b != null ?names.$first()['$empty?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          names.$shift()};
        return ($a = ($b = names).$inject, $a.$$p = (TMP_2 = function(constant, name){var self = TMP_2.$$s || this, $c, $d, TMP_3, candidate = nil;
if (constant == null) constant = nil;if (name == null) name = nil;
        if (constant['$==']($scope.get('Object'))) {
            return constant.$const_get(name)
            } else {
            candidate = constant.$const_get(name);
            if ((($c = constant['$const_defined?'](name, false)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return candidate;};
            if ((($c = $scope.get('Object')['$const_defined?'](name)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              } else {
              return candidate;
            };
            constant = (function(){var $brk = Opal.new_brk(); try {return ($c = ($d = constant.$ancestors()).$inject, $c.$$p = (TMP_3 = function(const$, ancestor){var self = TMP_3.$$s || this, $e;
if (const$ == null) const$ = nil;if (ancestor == null) ancestor = nil;
            if (ancestor['$==']($scope.get('Object'))) {
                
                Opal.brk(const$, $brk)};
              if ((($e = ancestor['$const_defined?'](name, false)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                
                Opal.brk(ancestor, $brk)};
              return const$;}, TMP_3.$$s = self, TMP_3.$$brk = $brk, TMP_3.$$arity = 2, TMP_3), $c).call($d)
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
            return constant.$const_get(name, false);
          }}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b, $scope.get('Object'));
      }, TMP_4.$$arity = 1);

      Opal.defn(self, '$pluralize', TMP_5 = function $$pluralize(word) {
        var self = this;

        return self.$apply_inflections(word, self.$inflections().$plurals());
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$singularize', TMP_6 = function $$singularize(word) {
        var self = this;

        return self.$apply_inflections(word, self.$inflections().$singulars());
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$apply_inflections', TMP_8 = function $$apply_inflections(word, rules) {
        var $a, $b, TMP_7, self = this, result = nil;

        result = word.$to_s();
        if ((($a = self.$inflections().$uncountables()['$include?'](result.$downcase())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return result
          } else {
          (function(){var $brk = Opal.new_brk(); try {return ($a = ($b = rules).$each, $a.$$p = (TMP_7 = function(rule, replacement){var self = TMP_7.$$s || this, changed = nil;
if (rule == null) rule = nil;if (replacement == null) replacement = nil;
          changed = result.$sub(rule, replacement);
            if (changed['$=='](result)) {
              return nil
              } else {
              result = changed;
              
              Opal.brk(nil, $brk);
            };}, TMP_7.$$s = self, TMP_7.$$brk = $brk, TMP_7.$$arity = 2, TMP_7), $a).call($b)
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        };
      }, TMP_8.$$arity = 2);

      (function($base, $super) {
        function $Inflections(){};
        var self = $Inflections = $klass($base, $super, 'Inflections', $Inflections);

        var def = self.$$proto, $scope = self.$$scope, TMP_9, TMP_10, TMP_11, TMP_12, TMP_14, TMP_15;

        def.plurals = def.singulars = nil;
        Opal.defs(self, '$instance', TMP_9 = function $$instance() {
          var $a, self = this;
          if (self.__instance__ == null) self.__instance__ = nil;

          return ((($a = self.__instance__) !== false && $a !== nil && $a != null) ? $a : self.__instance__ = self.$new());
        }, TMP_9.$$arity = 0);

        self.$attr_reader("plurals", "singulars", "uncountables");

        Opal.defn(self, '$initialize', TMP_10 = function $$initialize() {
          var $a, self = this;

          return $a = [[], [], $scope.get('Set').$new()], self.plurals = $a[0], self.singulars = $a[1], self.uncountables = $a[2], $a;
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$plural', TMP_11 = function $$plural(rule, replacement) {
          var self = this;

          return self.plurals.$unshift([rule, replacement]);
        }, TMP_11.$$arity = 2);

        Opal.defn(self, '$singular', TMP_12 = function $$singular(rule, replacement) {
          var self = this;

          return self.singulars.$unshift([rule, replacement]);
        }, TMP_12.$$arity = 2);

        Opal.defn(self, '$uncountable', TMP_14 = function $$uncountable(words) {
          var $a, $b, TMP_13, self = this;

          return ($a = ($b = words).$each, $a.$$p = (TMP_13 = function(w){var self = TMP_13.$$s || this;
            if (self.uncountables == null) self.uncountables = nil;
if (w == null) w = nil;
          return self.uncountables['$<<'](w.$downcase())}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
        }, TMP_14.$$arity = 1);

        return (Opal.defn(self, '$irregular', TMP_15 = function $$irregular() {
          var self = this;

          return nil;
        }, TMP_15.$$arity = 0), nil) && 'irregular';
      })($scope.base, null);
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.10.3 */
Opal.modules["active_support/inflections"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$inflections', '$plural', '$singular', '$irregular', '$uncountable']);
  return (function($base) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

    ($a = ($b = $scope.get('Inflector')).$inflections, $a.$$p = (TMP_1 = function(inflect){var self = TMP_1.$$s || this;
if (inflect == null) inflect = nil;
    inflect.$plural(/$/, "s");
      inflect.$plural(/s$/i, "s");
      inflect.$plural(/^(ax|test)is$/i, "\\1es");
      inflect.$plural(/(octop|vir)us$/i, "\\1i");
      inflect.$plural(/(octop|vir)i$/i, "\\1i");
      inflect.$plural(/(alias|status)$/i, "\\1es");
      inflect.$plural(/(bu)s$/i, "\\1ses");
      inflect.$plural(/(buffal|tomat)o$/i, "\\1oes");
      inflect.$plural(/([ti])um$/i, "\\1a");
      inflect.$plural(/([ti])a$/i, "\\1a");
      inflect.$plural(/sis$/i, "ses");
      inflect.$plural(/(?:([^f])fe|([lr])f)$/i, "\\1\\2ves");
      inflect.$plural(/(hive)$/i, "\\1s");
      inflect.$plural(/([^aeiouy]|qu)y$/i, "\\1ies");
      inflect.$plural(/(x|ch|ss|sh)$/i, "\\1es");
      inflect.$plural(/(matr|vert|ind)(?:ix|ex)$/i, "\\1ices");
      inflect.$plural(/^(m|l)ouse$/i, "\\1ice");
      inflect.$plural(/^(m|l)ice$/i, "\\1ice");
      inflect.$plural(/^(ox)$/i, "\\1en");
      inflect.$plural(/^(oxen)$/i, "\\1");
      inflect.$plural(/(quiz)$/i, "\\1zes");
      inflect.$singular(/s$/i, "");
      inflect.$singular(/(ss)$/i, "\\1");
      inflect.$singular(/(n)ews$/i, "\\1ews");
      inflect.$singular(/([ti])a$/i, "\\1um");
      inflect.$singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/(^analy)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/([^f])ves$/i, "\\1fe");
      inflect.$singular(/(hive)s$/i, "\\1");
      inflect.$singular(/(tive)s$/i, "\\1");
      inflect.$singular(/([lr])ves$/i, "\\1f");
      inflect.$singular(/([^aeiouy]|qu)ies$/i, "\\1y");
      inflect.$singular(/(s)eries$/i, "\\1eries");
      inflect.$singular(/(m)ovies$/i, "\\1ovie");
      inflect.$singular(/(x|ch|ss|sh)es$/i, "\\1");
      inflect.$singular(/^(m|l)ice$/i, "\\1ouse");
      inflect.$singular(/(bus)(es)?$/i, "\\1");
      inflect.$singular(/(o)es$/i, "\\1");
      inflect.$singular(/(shoe)s$/i, "\\1");
      inflect.$singular(/(cris|test)(is|es)$/i, "\\1is");
      inflect.$singular(/^(a)x[ie]s$/i, "\\1xis");
      inflect.$singular(/(octop|vir)(us|i)$/i, "\\1us");
      inflect.$singular(/(alias|status)(es)?$/i, "\\1");
      inflect.$singular(/^(ox)en/i, "\\1");
      inflect.$singular(/(vert|ind)ices$/i, "\\1ex");
      inflect.$singular(/(matr)ices$/i, "\\1ix");
      inflect.$singular(/(quiz)zes$/i, "\\1");
      inflect.$singular(/(database)s$/i, "\\1");
      inflect.$irregular("person", "people");
      inflect.$irregular("man", "men");
      inflect.$irregular("child", "children");
      inflect.$irregular("sex", "sexes");
      inflect.$irregular("move", "moves");
      inflect.$irregular("zombie", "zombies");
      return inflect.$uncountable(["equipment", "information", "rice", "money", "species", "series", "fish", "sheep", "jeans", "police"]);}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b, "en")
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["active_support/inflector"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/inflector/inflections");
  return self.$require("active_support/inflections");
};

/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/string/inflections"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$pluralize', '$singularize', '$constantize']);
  self.$require("active_support/inflector");
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    Opal.defn(self, '$pluralize', TMP_1 = function $$pluralize() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$pluralize(self);
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$singularize', TMP_2 = function $$singularize() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$singularize(self);
    }, TMP_2.$$arity = 0);

    return (Opal.defn(self, '$constantize', TMP_3 = function $$constantize() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$constantize(self);
    }, TMP_3.$$arity = 0), nil) && 'constantize';
  })($scope.base, null);
};

/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/string"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$gsub', '$strip', '$downcase', '$underscore', '$alias_method']);
  self.$require("active_support/core_ext/string/inflections");
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

    Opal.defn(self, '$parameterize', TMP_1 = function $$parameterize() {
      var self = this;

      return self.$downcase().$strip().$gsub(/\W+/, "-");
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$dasherize', TMP_2 = function $$dasherize() {
      var self = this;

      return self.replace(/[-_\s]+/g, '-')
            .replace(/([A-Z\d]+)([A-Z][a-z])/g, '$1-$2')
            .replace(/([a-z\d])([A-Z])/g, '$1-$2')
            .toLowerCase();
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$demodulize', TMP_3 = function $$demodulize() {
      var self = this;

      
      var idx = self.lastIndexOf('::');

      if (idx > -1) {
        return self.substr(idx + 2);
      }

      return self;
    ;
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$underscore', TMP_4 = function $$underscore() {
      var self = this;

      return self.replace(/[-\s]+/g, '_')
    .replace(/([A-Z\d]+)([A-Z][a-z])/g, '$1_$2')
    .replace(/([a-z\d])([A-Z])/g, '$1_$2')
    .replace(/-/g, '_')
    .toLowerCase();
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$camelize', TMP_5 = function $$camelize(first_letter) {
      var self = this;

      if (first_letter == null) {
        first_letter = "upper";
      }
      return self.$underscore().replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = first_letter === "upper" || index > 0;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    });
    }, TMP_5.$$arity = -1);

    return self.$alias_method("camelcase", "camelize");
  })($scope.base, null);
};

/* Generated by Opal 0.10.3 */
Opal.modules["active_support/hash_with_indifferent_access"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$dup', '$respond_to?', '$update', '$to_hash', '$tap', '$default=', '$default', '$default_proc', '$default_proc=', '$new']);
  return (function($base) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $HashWithIndifferentAccess(){};
      var self = $HashWithIndifferentAccess = $klass($base, $super, 'HashWithIndifferentAccess', $HashWithIndifferentAccess);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6;

      Opal.defn(self, '$extractable_options?', TMP_1 = function() {
        var self = this;

        return true;
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$with_indifferent_access', TMP_2 = function $$with_indifferent_access() {
        var self = this;

        return self.$dup();
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$nested_under_indifferent_access', TMP_3 = function $$nested_under_indifferent_access() {
        var self = this;

        return self;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$initialize', TMP_4 = function $$initialize(constructor) {
        var $a, $b, $c, self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

        if (constructor == null) {
          constructor = $hash2([], {});
        }
        TMP_4.$$p = null;
        if ((($a = constructor['$respond_to?']("to_hash")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_4, false)), $a.$$p = null, $a).call($b);
          return self.$update(constructor);
          } else {
          return ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_4, false)), $a.$$p = null, $a).call($c, constructor)
        };
      }, TMP_4.$$arity = -1);

      return (Opal.defs(self, '$new_from_hash_copying_default', TMP_6 = function $$new_from_hash_copying_default(hash) {
        var $a, $b, TMP_5, self = this;

        hash = hash.$to_hash();
        return ($a = ($b = self.$new(hash)).$tap, $a.$$p = (TMP_5 = function(new_hash){var self = TMP_5.$$s || this, $c, $d;
if (new_hash == null) new_hash = nil;
        (($c = [hash.$default()]), $d = new_hash, $d['$default='].apply($d, $c), $c[$c.length-1]);
          if ((($c = hash.$default_proc()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return (($c = [hash.$default_proc()]), $d = new_hash, $d['$default_proc='].apply($d, $c), $c[$c.length-1])
            } else {
            return nil
          };}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
      }, TMP_6.$$arity = 1), nil) && 'new_from_hash_copying_default';
    })($scope.base, $scope.get('Hash'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/hash/indifferent_access"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$new_from_hash_copying_default']);
  self.$require("active_support/hash_with_indifferent_access");
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$with_indifferent_access', TMP_1 = function $$with_indifferent_access() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('HashWithIndifferentAccess')).$new_from_hash_copying_default(self);
    }, TMP_1.$$arity = 0);

    return Opal.alias(self, 'nested_under_indifferent_access', 'with_indifferent_access');
  })($scope.base, null);
};

/* Generated by Opal 0.10.3 */
Opal.modules["date"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$<=>', '$nonzero?', '$d', '$zero?', '$new', '$class', '$-@', '$+@', '$===', '$coerce', '$==', '$>', '$+', '$allocate', '$join', '$compact', '$map', '$to_proc', '$downcase', '$wrap', '$raise', '$clone', '$jd', '$>>', '$wday', '$-', '$to_s', '$alias_method']);
  return (function($base, $super) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $scope = self.$$scope, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50;

    def.date = nil;
    (function($base, $super) {
      function $Infinity(){};
      var self = $Infinity = $klass($base, $super, 'Infinity', $Infinity);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

      def.d = nil;
      self.$include($scope.get('Comparable'));

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(d) {
        var self = this;

        if (d == null) {
          d = 1;
        }
        return self.d = d['$<=>'](0);
      }, TMP_1.$$arity = -1);

      Opal.defn(self, '$d', TMP_2 = function $$d() {
        var self = this;

        return self.d;
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$zero?', TMP_3 = function() {
        var self = this;

        return false;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$finite?', TMP_4 = function() {
        var self = this;

        return false;
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$infinite?', TMP_5 = function() {
        var self = this;

        return self.$d()['$nonzero?']();
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$nan?', TMP_6 = function() {
        var self = this;

        return self.$d()['$zero?']();
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$abs', TMP_7 = function $$abs() {
        var self = this;

        return self.$class().$new();
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$-@', TMP_8 = function() {
        var self = this;

        return self.$class().$new(self.$d()['$-@']());
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$+@', TMP_9 = function() {
        var self = this;

        return self.$class().$new(self.$d()['$+@']());
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$<=>', TMP_10 = function(other) {
        var $a, $b, self = this, $case = nil, l = nil, r = nil;

        $case = other;if ($scope.get('Infinity')['$===']($case)) {return self.$d()['$<=>'](other.$d())}else if ($scope.get('Numeric')['$===']($case)) {return self.$d()}else {try {
          $b = other.$coerce(self), $a = Opal.to_ary($b), l = ($a[0] == null ? nil : $a[0]), r = ($a[1] == null ? nil : $a[1]), $b;
          return l['$<=>'](r);
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('NoMethodError')])) {
            try {
              nil
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }};
        return nil;
      }, TMP_10.$$arity = 1);

      Opal.defn(self, '$coerce', TMP_11 = function $$coerce(other) {
        var $a, $b, self = this, $iter = TMP_11.$$p, $yield = $iter || nil, $case = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_11.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return (function() {$case = other;if ($scope.get('Numeric')['$===']($case)) {return [self.$d()['$-@'](), self.$d()]}else {return ($a = ($b = self, Opal.find_super_dispatcher(self, 'coerce', TMP_11, false)), $a.$$p = $iter, $a).apply($b, $zuper)}})();
      }, TMP_11.$$arity = 1);

      return (Opal.defn(self, '$to_f', TMP_12 = function $$to_f() {
        var $a, self = this;

        if (self.d['$=='](0)) {
          return 0};
        if ((($a = $rb_gt(self.d, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (($scope.get('Float')).$$scope.get('INFINITY'))
          } else {
          return (($scope.get('Float')).$$scope.get('INFINITY'))['$-@']()
        };
      }, TMP_12.$$arity = 0), nil) && 'to_f';
    })($scope.base, $scope.get('Numeric'));

    Opal.cdecl($scope, 'JULIAN', $scope.get('Infinity').$new());

    Opal.cdecl($scope, 'GREGORIAN', $scope.get('Infinity').$new()['$-@']());

    Opal.cdecl($scope, 'ITALY', 2299161);

    Opal.cdecl($scope, 'ENGLAND', 2361222);

    Opal.cdecl($scope, 'MONTHNAMES', $rb_plus([nil], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]));

    Opal.cdecl($scope, 'ABBR_MONTHNAMES', ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]);

    Opal.cdecl($scope, 'DAYNAMES', ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);

    Opal.cdecl($scope, 'ABBR_DAYNAMES', ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_13, TMP_14, TMP_15, TMP_16;

      Opal.alias(self, 'civil', 'new');
      Opal.defn(self, '$wrap', TMP_13 = function $$wrap(native$) {
        var self = this, instance = nil;

        instance = self.$allocate();
        instance.date = native$;
        return instance;
      }, TMP_13.$$arity = 1);
      Opal.defn(self, '$parse', TMP_14 = function $$parse(string, comp) {
        var $a, $b, $c, self = this;

        if (comp == null) {
          comp = true;
        }
        
        var current_date = new Date();

        var current_day = current_date.getDate(),
            current_month = current_date.getMonth(),
            current_year = current_date.getFullYear(),
            current_wday = current_date.getDay(),
            full_month_name_regexp = $scope.get('MONTHNAMES').$compact().$join("|");

        function match1(match) { return match[1]; }
        function match2(match) { return match[2]; }
        function match3(match) { return match[3]; }
        function match4(match) { return match[4]; }

        // Converts passed short year (0..99)
        // to a 4-digits year in the range (1969..2068)
        function fromShortYear(fn) {
          return function(match) {
            var short_year = fn(match);

            if (short_year >= 69) {
              short_year += 1900;
            } else {
              short_year += 2000;
            }
            return short_year;
          }
        }

        // Converts month abbr (nov) to a month number
        function fromMonthAbbr(fn) {
          return function(match) {
            var abbr = fn(match);
            return $scope.get('ABBR_MONTHNAMES').indexOf(abbr) + 1;
          }
        }

        function toInt(fn) {
          return function(match) {
            var value = fn(match);
            return parseInt(value, 10);
          }
        }

        // Depending on the 'comp' value appends 20xx to a passed year
        function to2000(fn) {
          return function(match) {
            var value = fn(match);
            if (comp) {
              return value + 2000;
            } else {
              return value;
            }
          }
        }

        // Converts passed week day name to a day number
        function fromDayName(fn) {
          return function(match) {
            var dayname = fn(match),
                wday = ($a = ($b = $scope.get('DAYNAMES')).$map, $a.$$p = "downcase".$to_proc(), $a).call($b).indexOf((dayname).$downcase());

            return current_day - current_wday + wday;
          }
        }

        // Converts passed month name to a month number
        function fromFullMonthName(fn) {
          return function(match) {
            var month_name = fn(match);
            return ($a = ($c = $scope.get('MONTHNAMES').$compact()).$map, $a.$$p = "downcase".$to_proc(), $a).call($c).indexOf((month_name).$downcase()) + 1;
          }
        }

        var rules = [
          {
            // DD as month day number
            regexp: /^(\d{2})$/,
            year: current_year,
            month: current_month,
            day: toInt(match1)
          },
          {
            // DDD as year day number
            regexp: /^(\d{3})$/,
            year: current_year,
            month: 0,
            day: toInt(match1)
          },
          {
            // MMDD as month and day
            regexp: /^(\d{2})(\d{2})$/,
            year: current_year,
            month: toInt(match1),
            day: toInt(match2)
          },
          {
            // YYDDD as year and day number in 1969--2068
            regexp: /^(\d{2})(\d{3})$/,
            year: fromShortYear(toInt(match1)),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYMMDD as year, month and day in 1969--2068
            regexp: /^(\d{2})(\d{2})(\d{2})$/,
            year: fromShortYear(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YYYYDDD as year and day number
            regexp: /^(\d{4})(\d{3})$/,
            year: toInt(match1),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYYYMMDD as year, month and day number
            regexp: /^(\d{4})(\d{2})(\d{2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // mmm YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{3,4})$/,
            year: toInt(match2),
            month: fromMonthAbbr(match1),
            day: 1
          },
          {
            // DD mmm YYYY
            regexp: /^(\d{1,2})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match2),
            day: toInt(match1)
          },
          {
            // mmm DD YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match1),
            day: toInt(match2)
          },
          {
            // YYYY mmm DD
            regexp: /^(\d{3,4})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{1,2})$/i,
            year: toInt(match1),
            month: fromMonthAbbr(match2),
            day: toInt(match3)
          },
          {
            // YYYY-MM-DD YYYY/MM/DD YYYY.MM.DD
            regexp: /^(\-?\d{3,4})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YY-MM-DD
            regexp: /^(\d{2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: to2000(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // DD-MM-YYYY
            regexp: /^(\d{1,2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\-?\d{3,4})$/,
            year: toInt(match3),
            month: toInt(match2),
            day: toInt(match1)
          },
          {
            // ddd
            regexp: new RegExp("^(" + $scope.get('DAYNAMES').$join("|") + ")$", 'i'),
            year: current_year,
            month: current_month,
            day: fromDayName(match1)
          },
          {
            // monthname daynumber YYYY
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // monthname daynumber
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)", "i"),
            year: current_year,
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // daynumber monthname YYYY
            regexp: new RegExp("^(\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match3),
            day: toInt(match1)
          },
          {
            // YYYY monthname daynumber
            regexp: new RegExp("^(\\-?\\d{3,4})[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)$", "i"),
            year: toInt(match1),
            month: fromFullMonthName(match2),
            day: toInt(match3)
          }
        ]

        var rule, i, match;

        for (i = 0; i < rules.length; i++) {
          rule = rules[i];
          match = rule.regexp.exec(string);
          if (match) {
            var year = rule.year;
            if (typeof(year) === 'function') {
              year = year(match);
            }

            var month = rule.month;
            if (typeof(month) === 'function') {
              month = month(match) - 1
            }

            var day = rule.day;
            if (typeof(day) === 'function') {
              day = day(match);
            }

            var result = new Date(year, month, day);

            // an edge case, JS can't handle 'new Date(1)', minimal year is 1970
            if (year >= 0 && year <= 1970) {
              result.setFullYear(year);
            }

            return self.$wrap(result);
          }
        }
      ;
        return self.$raise($scope.get('ArgumentError'), "invalid date");
      }, TMP_14.$$arity = -2);
      Opal.defn(self, '$today', TMP_15 = function $$today() {
        var self = this;

        return self.$wrap(new Date());
      }, TMP_15.$$arity = 0);
      return (Opal.defn(self, '$gregorian_leap?', TMP_16 = function(year) {
        var self = this;

        return (new Date(year, 1, 29).getMonth()-1) === 0;
      }, TMP_16.$$arity = 1), nil) && 'gregorian_leap?';
    })(Opal.get_singleton_class(self));

    Opal.defn(self, '$initialize', TMP_17 = function $$initialize(year, month, day, start) {
      var self = this;

      if (year == null) {
        year = -4712;
      }
      if (month == null) {
        month = 1;
      }
      if (day == null) {
        day = 1;
      }
      if (start == null) {
        start = $scope.get('ITALY');
      }
      return self.date = new Date(year, month - 1, day);
    }, TMP_17.$$arity = -1);

    Opal.defn(self, '$-', TMP_18 = function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() - date);
        return result;
      }
      else if (date.date) {
        return Math.round((self.date - date.date) / (1000 * 60 * 60 * 24));
      }
      else {
        self.$raise($scope.get('TypeError'));
      }
    ;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$+', TMP_19 = function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() + date);
        return result;
      }
      else {
        self.$raise($scope.get('TypeError'));
      }
    ;
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$<', TMP_20 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a < b;
    ;
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$<=', TMP_21 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a <= b;
    ;
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$>', TMP_22 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a > b;
    ;
    }, TMP_22.$$arity = 1);

    Opal.defn(self, '$>=', TMP_23 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a >= b;
    ;
    }, TMP_23.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_24 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.$jd()['$<=>'](other)
      }

      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);

      if (a < b) {
        return -1;
      }
      else if (a > b) {
        return 1;
      }
      else {
        return 0;
      }
    ;
    }, TMP_24.$$arity = 1);

    Opal.defn(self, '$==', TMP_25 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      return (a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate());
    ;
    }, TMP_25.$$arity = 1);

    Opal.defn(self, '$>>', TMP_26 = function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise($scope.get('TypeError'));
      }

      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + n);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    }, TMP_26.$$arity = 1);

    Opal.defn(self, '$<<', TMP_27 = function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise($scope.get('TypeError'));
      }

      return self['$>>'](-n);
    ;
    }, TMP_27.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$clone', TMP_28 = function $$clone() {
      var self = this;

      return $scope.get('Date').$wrap(new Date(self.date.getTime()));
    }, TMP_28.$$arity = 0);

    Opal.defn(self, '$day', TMP_29 = function $$day() {
      var self = this;

      return self.date.getDate();
    }, TMP_29.$$arity = 0);

    Opal.defn(self, '$friday?', TMP_30 = function() {
      var self = this;

      return self.$wday()['$=='](5);
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$jd', TMP_31 = function $$jd() {
      var self = this;

      
    //Adapted from http://www.physics.sfasu.edu/astro/javascript/julianday.html

    var mm = self.date.getMonth() + 1,
        dd = self.date.getDate(),
        yy = self.date.getFullYear(),
        hr = 12, mn = 0, sc = 0,
        ggg, s, a, j1, jd;

    hr = hr + (mn / 60) + (sc/3600);

    ggg = 1;
    if (yy <= 1585) {
      ggg = 0;
    }

    jd = -1 * Math.floor(7 * (Math.floor((mm + 9) / 12) + yy) / 4);

    s = 1;
    if ((mm - 9) < 0) {
      s =- 1;
    }

    a = Math.abs(mm - 9);
    j1 = Math.floor(yy + s * Math.floor(a / 7));
    j1 = -1 * Math.floor((Math.floor(j1 / 100) + 1) * 3 / 4);

    jd = jd + Math.floor(275 * mm / 9) + dd + (ggg * j1);
    jd = jd + 1721027 + 2 * ggg + 367 * yy - 0.5;
    jd = jd + (hr / 24);

    return jd;
    ;
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$julian?', TMP_32 = function() {
      var self = this;

      return self.date < new Date(1582, 10 - 1, 15, 12);
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$monday?', TMP_33 = function() {
      var self = this;

      return self.$wday()['$=='](1);
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$month', TMP_34 = function $$month() {
      var self = this;

      return self.date.getMonth() + 1;
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$next', TMP_35 = function $$next() {
      var self = this;

      return $rb_plus(self, 1);
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$next_day', TMP_36 = function $$next_day(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      return $rb_plus(self, n);
    }, TMP_36.$$arity = -1);

    Opal.defn(self, '$next_month', TMP_37 = function $$next_month() {
      var self = this;

      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + 1);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    }, TMP_37.$$arity = 0);

    Opal.defn(self, '$prev_day', TMP_38 = function $$prev_day(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      return $rb_minus(self, n);
    }, TMP_38.$$arity = -1);

    Opal.defn(self, '$prev_month', TMP_39 = function $$prev_month() {
      var self = this;

      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() - 1);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$saturday?', TMP_40 = function() {
      var self = this;

      return self.$wday()['$=='](6);
    }, TMP_40.$$arity = 0);

    Opal.defn(self, '$strftime', TMP_41 = function $$strftime(format) {
      var self = this;

      if (format == null) {
        format = "";
      }
      
      if (format == '') {
        return self.$to_s();
      }

      return self.date.$strftime(format);
    ;
    }, TMP_41.$$arity = -1);

    self.$alias_method("succ", "next");

    Opal.defn(self, '$sunday?', TMP_42 = function() {
      var self = this;

      return self.$wday()['$=='](0);
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$thursday?', TMP_43 = function() {
      var self = this;

      return self.$wday()['$=='](4);
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_44 = function $$to_s() {
      var self = this;

      
      var d = self.date, year = d.getFullYear(), month = d.getMonth() + 1, day = d.getDate();
      if (month < 10) { month = '0' + month; }
      if (day < 10) { day = '0' + day; }
      return year + '-' + month + '-' + day;
    ;
    }, TMP_44.$$arity = 0);

    Opal.defn(self, '$tuesday?', TMP_45 = function() {
      var self = this;

      return self.$wday()['$=='](2);
    }, TMP_45.$$arity = 0);

    Opal.defn(self, '$wday', TMP_46 = function $$wday() {
      var self = this;

      return self.date.getDay();
    }, TMP_46.$$arity = 0);

    Opal.defn(self, '$wednesday?', TMP_47 = function() {
      var self = this;

      return self.$wday()['$=='](3);
    }, TMP_47.$$arity = 0);

    Opal.defn(self, '$year', TMP_48 = function $$year() {
      var self = this;

      return self.date.getFullYear();
    }, TMP_48.$$arity = 0);

    Opal.defn(self, '$cwday', TMP_49 = function $$cwday() {
      var self = this;

      return self.date.getDay() || 7;;
    }, TMP_49.$$arity = 0);

    Opal.defn(self, '$cweek', TMP_50 = function $$cweek() {
      var self = this;

      
      var d = new Date(self.date);
      d.setHours(0,0,0);
      d.setDate(d.getDate()+4-(d.getDay()||7));
      return Math.ceil((((d-new Date(d.getFullYear(),0,1))/8.64e7)+1)/7);
    ;
    }, TMP_50.$$arity = 0);

    
    function days_in_month(year, month) {
      var leap = ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
      return [31, (leap ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
    }
  
  })($scope.base, null)
};

/* Generated by Opal 0.10.3 */
Opal.modules["time"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$strftime']);
  return (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defs(self, '$parse', TMP_1 = function $$parse(str) {
      var self = this;

      return new Date(Date.parse(str));
    }, TMP_1.$$arity = 1);

    return (Opal.defn(self, '$iso8601', TMP_2 = function $$iso8601() {
      var self = this;

      return self.$strftime("%FT%T%z");
    }, TMP_2.$$arity = 0), nil) && 'iso8601';
  })($scope.base, null)
};

/* Generated by Opal 0.10.3 */
Opal.modules["js"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$insert', '$<<', '$global', '$extend']);
  return (function($base) {
    var $JS, self = $JS = $module($base, 'JS');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, $a, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9;

    Opal.defn(self, '$delete', TMP_1 = function(object, property) {
      var self = this;

      return delete object[property];
    }, TMP_1.$$arity = 2);

    Opal.defn(self, '$global', TMP_2 = function $$global() {
      var self = this;

      return Opal.global;
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$in', TMP_3 = function(property, object) {
      var self = this;

      return property in object;
    }, TMP_3.$$arity = 2);

    Opal.defn(self, '$instanceof', TMP_4 = function(value, func) {
      var self = this;

      return value instanceof func;
    }, TMP_4.$$arity = 2);

    if ((($a = typeof Function.prototype.bind == 'function') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      Opal.defn(self, '$new', TMP_5 = function(func, $a_rest) {
        var self = this, args, $iter = TMP_5.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_5.$$p = null;
        args.$insert(0, this);
        if (block !== false && block !== nil && block != null) {
          args['$<<'](block)};
        return new (func.bind.apply(func, args))();
      }, TMP_5.$$arity = -2)
      } else {
      Opal.defn(self, '$new', TMP_6 = function(func, $a_rest) {
        var self = this, args, $iter = TMP_6.$$p, block = $iter || nil, f = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_6.$$p = null;
        if (block !== false && block !== nil && block != null) {
          args['$<<'](block)};
        f = function(){return func.apply(this, args)};
        f["prototype"]=func["prototype"];
        return new f();
      }, TMP_6.$$arity = -2)
    };

    Opal.defn(self, '$typeof', TMP_7 = function(value) {
      var self = this;

      return typeof value;
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$void', TMP_8 = function(expr) {
      var self = this;

      return void expr;
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$call', TMP_9 = function $$call(func, $a_rest) {
      var self = this, args, $iter = TMP_9.$$p, block = $iter || nil, g = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_9.$$p = null;
      g = self.$global();
      if (block !== false && block !== nil && block != null) {
        args['$<<'](block)};
      return g[func].apply(g, args);
    }, TMP_9.$$arity = -2);

    Opal.alias(self, 'method_missing', 'call');

    self.$extend(self);
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["bigdecimal/kernel"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new']);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$BigDecimal', TMP_1 = function $$BigDecimal(initial, digits) {
      var self = this;

      if (digits == null) {
        digits = 0;
      }
      return $scope.get('BigDecimal').$new(initial, digits);
    }, TMP_1.$$arity = -2)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["bigdecimal/bignumber"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super) {
    function $BigDecimal(){};
    var self = $BigDecimal = $klass($base, $super, 'BigDecimal', $BigDecimal);

    var def = self.$$proto, $scope = self.$$scope;

    
    var define = function (f) { Opal.casgn(self, 'BigNumber', f()); };
    define.amd = true;

    /* jshint ignore:start */
    /* bignumber.js v2.1.4 https://github.com/MikeMcl/bignumber.js/LICENCE */
    !function(e){"use strict";function n(e){function E(e,n){var t,r,i,o,u,s,f=this;if(!(f instanceof E))return j&&L(26,"constructor call without new",e),new E(e,n);if(null!=n&&H(n,2,64,M,"base")){if(n=0|n,s=e+"",10==n)return f=new E(e instanceof E?e:s),U(f,P+f.e+1,k);if((o="number"==typeof e)&&0*e!=0||!new RegExp("^-?"+(t="["+N.slice(0,n)+"]+")+"(?:\\."+t+")?$",37>n?"i":"").test(s))return h(f,s,o,n);o?(f.s=0>1/e?(s=s.slice(1),-1):1,j&&s.replace(/^0\.0*|\./,"").length>15&&L(M,v,e),o=!1):f.s=45===s.charCodeAt(0)?(s=s.slice(1),-1):1,s=D(s,10,n,f.s)}else{if(e instanceof E)return f.s=e.s,f.e=e.e,f.c=(e=e.c)?e.slice():e,void(M=0);if((o="number"==typeof e)&&0*e==0){if(f.s=0>1/e?(e=-e,-1):1,e===~~e){for(r=0,i=e;i>=10;i/=10,r++);return f.e=r,f.c=[e],void(M=0)}s=e+""}else{if(!g.test(s=e+""))return h(f,s,o);f.s=45===s.charCodeAt(0)?(s=s.slice(1),-1):1}}for((r=s.indexOf("."))>-1&&(s=s.replace(".","")),(i=s.search(/e/i))>0?(0>r&&(r=i),r+=+s.slice(i+1),s=s.substring(0,i)):0>r&&(r=s.length),i=0;48===s.charCodeAt(i);i++);for(u=s.length;48===s.charCodeAt(--u););if(s=s.slice(i,u+1))if(u=s.length,o&&j&&u>15&&L(M,v,f.s*e),r=r-i-1,r>z)f.c=f.e=null;else if(G>r)f.c=[f.e=0];else{if(f.e=r,f.c=[],i=(r+1)%O,0>r&&(i+=O),u>i){for(i&&f.c.push(+s.slice(0,i)),u-=O;u>i;)f.c.push(+s.slice(i,i+=O));s=s.slice(i),i=O-s.length}else i-=u;for(;i--;s+="0");f.c.push(+s)}else f.c=[f.e=0];M=0}function D(e,n,t,i){var o,u,f,c,a,h,g,p=e.indexOf("."),d=P,m=k;for(37>t&&(e=e.toLowerCase()),p>=0&&(f=J,J=0,e=e.replace(".",""),g=new E(t),a=g.pow(e.length-p),J=f,g.c=s(l(r(a.c),a.e),10,n),g.e=g.c.length),h=s(e,t,n),u=f=h.length;0==h[--f];h.pop());if(!h[0])return"0";if(0>p?--u:(a.c=h,a.e=u,a.s=i,a=C(a,g,d,m,n),h=a.c,c=a.r,u=a.e),o=u+d+1,p=h[o],f=n/2,c=c||0>o||null!=h[o+1],c=4>m?(null!=p||c)&&(0==m||m==(a.s<0?3:2)):p>f||p==f&&(4==m||c||6==m&&1&h[o-1]||m==(a.s<0?8:7)),1>o||!h[0])e=c?l("1",-d):"0";else{if(h.length=o,c)for(--n;++h[--o]>n;)h[o]=0,o||(++u,h.unshift(1));for(f=h.length;!h[--f];);for(p=0,e="";f>=p;e+=N.charAt(h[p++]));e=l(e,u)}return e}function F(e,n,t,i){var o,u,s,c,a;if(t=null!=t&&H(t,0,8,i,w)?0|t:k,!e.c)return e.toString();if(o=e.c[0],s=e.e,null==n)a=r(e.c),a=19==i||24==i&&B>=s?f(a,s):l(a,s);else if(e=U(new E(e),n,t),u=e.e,a=r(e.c),c=a.length,19==i||24==i&&(u>=n||B>=u)){for(;n>c;a+="0",c++);a=f(a,u)}else if(n-=s,a=l(a,u),u+1>c){if(--n>0)for(a+=".";n--;a+="0");}else if(n+=u-c,n>0)for(u+1==c&&(a+=".");n--;a+="0");return e.s<0&&o?"-"+a:a}function _(e,n){var t,r,i=0;for(u(e[0])&&(e=e[0]),t=new E(e[0]);++i<e.length;){if(r=new E(e[i]),!r.s){t=r;break}n.call(t,r)&&(t=r)}return t}function x(e,n,t,r,i){return(n>e||e>t||e!=c(e))&&L(r,(i||"decimal places")+(n>e||e>t?" out of range":" not an integer"),e),!0}function I(e,n,t){for(var r=1,i=n.length;!n[--i];n.pop());for(i=n[0];i>=10;i/=10,r++);return(t=r+t*O-1)>z?e.c=e.e=null:G>t?e.c=[e.e=0]:(e.e=t,e.c=n),e}function L(e,n,t){var r=new Error(["new BigNumber","cmp","config","div","divToInt","eq","gt","gte","lt","lte","minus","mod","plus","precision","random","round","shift","times","toDigits","toExponential","toFixed","toFormat","toFraction","pow","toPrecision","toString","BigNumber"][e]+"() "+n+": "+t);throw r.name="BigNumber Error",M=0,r}function U(e,n,t,r){var i,o,u,s,f,l,c,a=e.c,h=S;if(a){e:{for(i=1,s=a[0];s>=10;s/=10,i++);if(o=n-i,0>o)o+=O,u=n,f=a[l=0],c=f/h[i-u-1]%10|0;else if(l=p((o+1)/O),l>=a.length){if(!r)break e;for(;a.length<=l;a.push(0));f=c=0,i=1,o%=O,u=o-O+1}else{for(f=s=a[l],i=1;s>=10;s/=10,i++);o%=O,u=o-O+i,c=0>u?0:f/h[i-u-1]%10|0}if(r=r||0>n||null!=a[l+1]||(0>u?f:f%h[i-u-1]),r=4>t?(c||r)&&(0==t||t==(e.s<0?3:2)):c>5||5==c&&(4==t||r||6==t&&(o>0?u>0?f/h[i-u]:0:a[l-1])%10&1||t==(e.s<0?8:7)),1>n||!a[0])return a.length=0,r?(n-=e.e+1,a[0]=h[(O-n%O)%O],e.e=-n||0):a[0]=e.e=0,e;if(0==o?(a.length=l,s=1,l--):(a.length=l+1,s=h[O-o],a[l]=u>0?d(f/h[i-u]%h[u])*s:0),r)for(;;){if(0==l){for(o=1,u=a[0];u>=10;u/=10,o++);for(u=a[0]+=s,s=1;u>=10;u/=10,s++);o!=s&&(e.e++,a[0]==b&&(a[0]=1));break}if(a[l]+=s,a[l]!=b)break;a[l--]=0,s=1}for(o=a.length;0===a[--o];a.pop());}e.e>z?e.c=e.e=null:e.e<G&&(e.c=[e.e=0])}return e}var C,M=0,T=E.prototype,q=new E(1),P=20,k=4,B=-7,$=21,G=-1e7,z=1e7,j=!0,H=x,V=!1,W=1,J=100,X={decimalSeparator:".",groupSeparator:",",groupSize:3,secondaryGroupSize:0,fractionGroupSeparator:" ",fractionGroupSize:0};return E.another=n,E.ROUND_UP=0,E.ROUND_DOWN=1,E.ROUND_CEIL=2,E.ROUND_FLOOR=3,E.ROUND_HALF_UP=4,E.ROUND_HALF_DOWN=5,E.ROUND_HALF_EVEN=6,E.ROUND_HALF_CEIL=7,E.ROUND_HALF_FLOOR=8,E.EUCLID=9,E.config=function(){var e,n,t=0,r={},i=arguments,s=i[0],f=s&&"object"==typeof s?function(){return s.hasOwnProperty(n)?null!=(e=s[n]):void 0}:function(){return i.length>t?null!=(e=i[t++]):void 0};return f(n="DECIMAL_PLACES")&&H(e,0,A,2,n)&&(P=0|e),r[n]=P,f(n="ROUNDING_MODE")&&H(e,0,8,2,n)&&(k=0|e),r[n]=k,f(n="EXPONENTIAL_AT")&&(u(e)?H(e[0],-A,0,2,n)&&H(e[1],0,A,2,n)&&(B=0|e[0],$=0|e[1]):H(e,-A,A,2,n)&&(B=-($=0|(0>e?-e:e)))),r[n]=[B,$],f(n="RANGE")&&(u(e)?H(e[0],-A,-1,2,n)&&H(e[1],1,A,2,n)&&(G=0|e[0],z=0|e[1]):H(e,-A,A,2,n)&&(0|e?G=-(z=0|(0>e?-e:e)):j&&L(2,n+" cannot be zero",e))),r[n]=[G,z],f(n="ERRORS")&&(e===!!e||1===e||0===e?(M=0,H=(j=!!e)?x:o):j&&L(2,n+m,e)),r[n]=j,f(n="CRYPTO")&&(e===!!e||1===e||0===e?(V=!(!e||!a),e&&!V&&j&&L(2,"crypto unavailable",a)):j&&L(2,n+m,e)),r[n]=V,f(n="MODULO_MODE")&&H(e,0,9,2,n)&&(W=0|e),r[n]=W,f(n="POW_PRECISION")&&H(e,0,A,2,n)&&(J=0|e),r[n]=J,f(n="FORMAT")&&("object"==typeof e?X=e:j&&L(2,n+" not an object",e)),r[n]=X,r},E.max=function(){return _(arguments,T.lt)},E.min=function(){return _(arguments,T.gt)},E.random=function(){var e=9007199254740992,n=Math.random()*e&2097151?function(){return d(Math.random()*e)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)};return function(e){var t,r,i,o,u,s=0,f=[],l=new E(q);if(e=null!=e&&H(e,0,A,14)?0|e:P,o=p(e/O),V)if(a&&a.getRandomValues){for(t=a.getRandomValues(new Uint32Array(o*=2));o>s;)u=131072*t[s]+(t[s+1]>>>11),u>=9e15?(r=a.getRandomValues(new Uint32Array(2)),t[s]=r[0],t[s+1]=r[1]):(f.push(u%1e14),s+=2);s=o/2}else if(a&&a.randomBytes){for(t=a.randomBytes(o*=7);o>s;)u=281474976710656*(31&t[s])+1099511627776*t[s+1]+4294967296*t[s+2]+16777216*t[s+3]+(t[s+4]<<16)+(t[s+5]<<8)+t[s+6],u>=9e15?a.randomBytes(7).copy(t,s):(f.push(u%1e14),s+=7);s=o/7}else j&&L(14,"crypto unavailable",a);if(!s)for(;o>s;)u=n(),9e15>u&&(f[s++]=u%1e14);for(o=f[--s],e%=O,o&&e&&(u=S[O-e],f[s]=d(o/u)*u);0===f[s];f.pop(),s--);if(0>s)f=[i=0];else{for(i=-1;0===f[0];f.shift(),i-=O);for(s=1,u=f[0];u>=10;u/=10,s++);O>s&&(i-=O-s)}return l.e=i,l.c=f,l}}(),C=function(){function e(e,n,t){var r,i,o,u,s=0,f=e.length,l=n%R,c=n/R|0;for(e=e.slice();f--;)o=e[f]%R,u=e[f]/R|0,r=c*o+u*l,i=l*o+r%R*R+s,s=(i/t|0)+(r/R|0)+c*u,e[f]=i%t;return s&&e.unshift(s),e}function n(e,n,t,r){var i,o;if(t!=r)o=t>r?1:-1;else for(i=o=0;t>i;i++)if(e[i]!=n[i]){o=e[i]>n[i]?1:-1;break}return o}function r(e,n,t,r){for(var i=0;t--;)e[t]-=i,i=e[t]<n[t]?1:0,e[t]=i*r+e[t]-n[t];for(;!e[0]&&e.length>1;e.shift());}return function(i,o,u,s,f){var l,c,a,h,g,p,m,w,v,N,y,S,R,A,D,F,_,x=i.s==o.s?1:-1,I=i.c,L=o.c;if(!(I&&I[0]&&L&&L[0]))return new E(i.s&&o.s&&(I?!L||I[0]!=L[0]:L)?I&&0==I[0]||!L?0*x:x/0:NaN);for(w=new E(x),v=w.c=[],c=i.e-o.e,x=u+c+1,f||(f=b,c=t(i.e/O)-t(o.e/O),x=x/O|0),a=0;L[a]==(I[a]||0);a++);if(L[a]>(I[a]||0)&&c--,0>x)v.push(1),h=!0;else{for(A=I.length,F=L.length,a=0,x+=2,g=d(f/(L[0]+1)),g>1&&(L=e(L,g,f),I=e(I,g,f),F=L.length,A=I.length),R=F,N=I.slice(0,F),y=N.length;F>y;N[y++]=0);_=L.slice(),_.unshift(0),D=L[0],L[1]>=f/2&&D++;do{if(g=0,l=n(L,N,F,y),0>l){if(S=N[0],F!=y&&(S=S*f+(N[1]||0)),g=d(S/D),g>1)for(g>=f&&(g=f-1),p=e(L,g,f),m=p.length,y=N.length;1==n(p,N,m,y);)g--,r(p,m>F?_:L,m,f),m=p.length,l=1;else 0==g&&(l=g=1),p=L.slice(),m=p.length;if(y>m&&p.unshift(0),r(N,p,y,f),y=N.length,-1==l)for(;n(L,N,F,y)<1;)g++,r(N,y>F?_:L,y,f),y=N.length}else 0===l&&(g++,N=[0]);v[a++]=g,N[0]?N[y++]=I[R]||0:(N=[I[R]],y=1)}while((R++<A||null!=N[0])&&x--);h=null!=N[0],v[0]||v.shift()}if(f==b){for(a=1,x=v[0];x>=10;x/=10,a++);U(w,u+(w.e=a+c*O-1)+1,s,h)}else w.e=c,w.r=+h;return w}}(),h=function(){var e=/^(-?)0([xbo])(?=\w[\w.]*$)/i,n=/^([^.]+)\.$/,t=/^\.([^.]+)$/,r=/^-?(Infinity|NaN)$/,i=/^\s*\+(?=[\w.])|^\s+|\s+$/g;return function(o,u,s,f){var l,c=s?u:u.replace(i,"");if(r.test(c))o.s=isNaN(c)?null:0>c?-1:1;else{if(!s&&(c=c.replace(e,function(e,n,t){return l="x"==(t=t.toLowerCase())?16:"b"==t?2:8,f&&f!=l?e:n}),f&&(l=f,c=c.replace(n,"$1").replace(t,"0.$1")),u!=c))return new E(c,l);j&&L(M,"not a"+(f?" base "+f:"")+" number",u),o.s=null}o.c=o.e=null,M=0}}(),T.absoluteValue=T.abs=function(){var e=new E(this);return e.s<0&&(e.s=1),e},T.ceil=function(){return U(new E(this),this.e+1,2)},T.comparedTo=T.cmp=function(e,n){return M=1,i(this,new E(e,n))},T.decimalPlaces=T.dp=function(){var e,n,r=this.c;if(!r)return null;if(e=((n=r.length-1)-t(this.e/O))*O,n=r[n])for(;n%10==0;n/=10,e--);return 0>e&&(e=0),e},T.dividedBy=T.div=function(e,n){return M=3,C(this,new E(e,n),P,k)},T.dividedToIntegerBy=T.divToInt=function(e,n){return M=4,C(this,new E(e,n),0,1)},T.equals=T.eq=function(e,n){return M=5,0===i(this,new E(e,n))},T.floor=function(){return U(new E(this),this.e+1,3)},T.greaterThan=T.gt=function(e,n){return M=6,i(this,new E(e,n))>0},T.greaterThanOrEqualTo=T.gte=function(e,n){return M=7,1===(n=i(this,new E(e,n)))||0===n},T.isFinite=function(){return!!this.c},T.isInteger=T.isInt=function(){return!!this.c&&t(this.e/O)>this.c.length-2},T.isNaN=function(){return!this.s},T.isNegative=T.isNeg=function(){return this.s<0},T.isZero=function(){return!!this.c&&0==this.c[0]},T.lessThan=T.lt=function(e,n){return M=8,i(this,new E(e,n))<0},T.lessThanOrEqualTo=T.lte=function(e,n){return M=9,-1===(n=i(this,new E(e,n)))||0===n},T.minus=T.sub=function(e,n){var r,i,o,u,s=this,f=s.s;if(M=10,e=new E(e,n),n=e.s,!f||!n)return new E(NaN);if(f!=n)return e.s=-n,s.plus(e);var l=s.e/O,c=e.e/O,a=s.c,h=e.c;if(!l||!c){if(!a||!h)return a?(e.s=-n,e):new E(h?s:NaN);if(!a[0]||!h[0])return h[0]?(e.s=-n,e):new E(a[0]?s:3==k?-0:0)}if(l=t(l),c=t(c),a=a.slice(),f=l-c){for((u=0>f)?(f=-f,o=a):(c=l,o=h),o.reverse(),n=f;n--;o.push(0));o.reverse()}else for(i=(u=(f=a.length)<(n=h.length))?f:n,f=n=0;i>n;n++)if(a[n]!=h[n]){u=a[n]<h[n];break}if(u&&(o=a,a=h,h=o,e.s=-e.s),n=(i=h.length)-(r=a.length),n>0)for(;n--;a[r++]=0);for(n=b-1;i>f;){if(a[--i]<h[i]){for(r=i;r&&!a[--r];a[r]=n);--a[r],a[i]+=b}a[i]-=h[i]}for(;0==a[0];a.shift(),--c);return a[0]?I(e,a,c):(e.s=3==k?-1:1,e.c=[e.e=0],e)},T.modulo=T.mod=function(e,n){var t,r,i=this;return M=11,e=new E(e,n),!i.c||!e.s||e.c&&!e.c[0]?new E(NaN):!e.c||i.c&&!i.c[0]?new E(i):(9==W?(r=e.s,e.s=1,t=C(i,e,0,3),e.s=r,t.s*=r):t=C(i,e,0,W),i.minus(t.times(e)))},T.negated=T.neg=function(){var e=new E(this);return e.s=-e.s||null,e},T.plus=T.add=function(e,n){var r,i=this,o=i.s;if(M=12,e=new E(e,n),n=e.s,!o||!n)return new E(NaN);if(o!=n)return e.s=-n,i.minus(e);var u=i.e/O,s=e.e/O,f=i.c,l=e.c;if(!u||!s){if(!f||!l)return new E(o/0);if(!f[0]||!l[0])return l[0]?e:new E(f[0]?i:0*o)}if(u=t(u),s=t(s),f=f.slice(),o=u-s){for(o>0?(s=u,r=l):(o=-o,r=f),r.reverse();o--;r.push(0));r.reverse()}for(o=f.length,n=l.length,0>o-n&&(r=l,l=f,f=r,n=o),o=0;n;)o=(f[--n]=f[n]+l[n]+o)/b|0,f[n]%=b;return o&&(f.unshift(o),++s),I(e,f,s)},T.precision=T.sd=function(e){var n,t,r=this,i=r.c;if(null!=e&&e!==!!e&&1!==e&&0!==e&&(j&&L(13,"argument"+m,e),e!=!!e&&(e=null)),!i)return null;if(t=i.length-1,n=t*O+1,t=i[t]){for(;t%10==0;t/=10,n--);for(t=i[0];t>=10;t/=10,n++);}return e&&r.e+1>n&&(n=r.e+1),n},T.round=function(e,n){var t=new E(this);return(null==e||H(e,0,A,15))&&U(t,~~e+this.e+1,null!=n&&H(n,0,8,15,w)?0|n:k),t},T.shift=function(e){var n=this;return H(e,-y,y,16,"argument")?n.times("1e"+c(e)):new E(n.c&&n.c[0]&&(-y>e||e>y)?n.s*(0>e?0:1/0):n)},T.squareRoot=T.sqrt=function(){var e,n,i,o,u,s=this,f=s.c,l=s.s,c=s.e,a=P+4,h=new E("0.5");if(1!==l||!f||!f[0])return new E(!l||0>l&&(!f||f[0])?NaN:f?s:1/0);if(l=Math.sqrt(+s),0==l||l==1/0?(n=r(f),(n.length+c)%2==0&&(n+="0"),l=Math.sqrt(n),c=t((c+1)/2)-(0>c||c%2),l==1/0?n="1e"+c:(n=l.toExponential(),n=n.slice(0,n.indexOf("e")+1)+c),i=new E(n)):i=new E(l+""),i.c[0])for(c=i.e,l=c+a,3>l&&(l=0);;)if(u=i,i=h.times(u.plus(C(s,u,a,1))),r(u.c).slice(0,l)===(n=r(i.c)).slice(0,l)){if(i.e<c&&--l,n=n.slice(l-3,l+1),"9999"!=n&&(o||"4999"!=n)){(!+n||!+n.slice(1)&&"5"==n.charAt(0))&&(U(i,i.e+P+2,1),e=!i.times(i).eq(s));break}if(!o&&(U(u,u.e+P+2,0),u.times(u).eq(s))){i=u;break}a+=4,l+=4,o=1}return U(i,i.e+P+1,k,e)},T.times=T.mul=function(e,n){var r,i,o,u,s,f,l,c,a,h,g,p,d,m,w,v=this,N=v.c,y=(M=17,e=new E(e,n)).c;if(!(N&&y&&N[0]&&y[0]))return!v.s||!e.s||N&&!N[0]&&!y||y&&!y[0]&&!N?e.c=e.e=e.s=null:(e.s*=v.s,N&&y?(e.c=[0],e.e=0):e.c=e.e=null),e;for(i=t(v.e/O)+t(e.e/O),e.s*=v.s,l=N.length,h=y.length,h>l&&(d=N,N=y,y=d,o=l,l=h,h=o),o=l+h,d=[];o--;d.push(0));for(m=b,w=R,o=h;--o>=0;){for(r=0,g=y[o]%w,p=y[o]/w|0,s=l,u=o+s;u>o;)c=N[--s]%w,a=N[s]/w|0,f=p*c+a*g,c=g*c+f%w*w+d[u]+r,r=(c/m|0)+(f/w|0)+p*a,d[u--]=c%m;d[u]=r}return r?++i:d.shift(),I(e,d,i)},T.toDigits=function(e,n){var t=new E(this);return e=null!=e&&H(e,1,A,18,"precision")?0|e:null,n=null!=n&&H(n,0,8,18,w)?0|n:k,e?U(t,e,n):t},T.toExponential=function(e,n){return F(this,null!=e&&H(e,0,A,19)?~~e+1:null,n,19)},T.toFixed=function(e,n){return F(this,null!=e&&H(e,0,A,20)?~~e+this.e+1:null,n,20)},T.toFormat=function(e,n){var t=F(this,null!=e&&H(e,0,A,21)?~~e+this.e+1:null,n,21);if(this.c){var r,i=t.split("."),o=+X.groupSize,u=+X.secondaryGroupSize,s=X.groupSeparator,f=i[0],l=i[1],c=this.s<0,a=c?f.slice(1):f,h=a.length;if(u&&(r=o,o=u,u=r,h-=r),o>0&&h>0){for(r=h%o||o,f=a.substr(0,r);h>r;r+=o)f+=s+a.substr(r,o);u>0&&(f+=s+a.slice(r)),c&&(f="-"+f)}t=l?f+X.decimalSeparator+((u=+X.fractionGroupSize)?l.replace(new RegExp("\\d{"+u+"}\\B","g"),"$&"+X.fractionGroupSeparator):l):f}return t},T.toFraction=function(e){var n,t,i,o,u,s,f,l,c,a=j,h=this,g=h.c,p=new E(q),d=t=new E(q),m=f=new E(q);if(null!=e&&(j=!1,s=new E(e),j=a,(!(a=s.isInt())||s.lt(q))&&(j&&L(22,"max denominator "+(a?"out of range":"not an integer"),e),e=!a&&s.c&&U(s,s.e+1,1).gte(q)?s:null)),!g)return h.toString();for(c=r(g),o=p.e=c.length-h.e-1,p.c[0]=S[(u=o%O)<0?O+u:u],e=!e||s.cmp(p)>0?o>0?p:d:s,u=z,z=1/0,s=new E(c),f.c[0]=0;l=C(s,p,0,1),i=t.plus(l.times(m)),1!=i.cmp(e);)t=m,m=i,d=f.plus(l.times(i=d)),f=i,p=s.minus(l.times(i=p)),s=i;return i=C(e.minus(t),m,0,1),f=f.plus(i.times(d)),t=t.plus(i.times(m)),f.s=d.s=h.s,o*=2,n=C(d,m,o,k).minus(h).abs().cmp(C(f,t,o,k).minus(h).abs())<1?[d.toString(),m.toString()]:[f.toString(),t.toString()],z=u,n},T.toNumber=function(){return+this},T.toPower=T.pow=function(e){var n,t,r=d(0>e?-e:+e),i=this;if(!H(e,-y,y,23,"exponent")&&(!isFinite(e)||r>y&&(e/=0)||parseFloat(e)!=e&&!(e=NaN)))return new E(Math.pow(+i,e));for(n=J?p(J/O+2):0,t=new E(q);;){if(r%2){if(t=t.times(i),!t.c)break;n&&t.c.length>n&&(t.c.length=n)}if(r=d(r/2),!r)break;i=i.times(i),n&&i.c&&i.c.length>n&&(i.c.length=n)}return 0>e&&(t=q.div(t)),n?U(t,J,k):t},T.toPrecision=function(e,n){return F(this,null!=e&&H(e,1,A,24,"precision")?0|e:null,n,24)},T.toString=function(e){var n,t=this,i=t.s,o=t.e;return null===o?i?(n="Infinity",0>i&&(n="-"+n)):n="NaN":(n=r(t.c),n=null!=e&&H(e,2,64,25,"base")?D(l(n,o),0|e,10,i):B>=o||o>=$?f(n,o):l(n,o),0>i&&t.c[0]&&(n="-"+n)),n},T.truncated=T.trunc=function(){return U(new E(this),this.e+1,1)},T.valueOf=T.toJSON=function(){var e,n=this,t=n.e;return null===t?n.toString():(e=r(n.c),e=B>=t||t>=$?f(e,t):l(e,t),n.s<0?"-"+e:e)},null!=e&&E.config(e),E}function t(e){var n=0|e;return e>0||e===n?n:n-1}function r(e){for(var n,t,r=1,i=e.length,o=e[0]+"";i>r;){for(n=e[r++]+"",t=O-n.length;t--;n="0"+n);o+=n}for(i=o.length;48===o.charCodeAt(--i););return o.slice(0,i+1||1)}function i(e,n){var t,r,i=e.c,o=n.c,u=e.s,s=n.s,f=e.e,l=n.e;if(!u||!s)return null;if(t=i&&!i[0],r=o&&!o[0],t||r)return t?r?0:-s:u;if(u!=s)return u;if(t=0>u,r=f==l,!i||!o)return r?0:!i^t?1:-1;if(!r)return f>l^t?1:-1;for(s=(f=i.length)<(l=o.length)?f:l,u=0;s>u;u++)if(i[u]!=o[u])return i[u]>o[u]^t?1:-1;return f==l?0:f>l^t?1:-1}function o(e,n,t){return(e=c(e))>=n&&t>=e}function u(e){return"[object Array]"==Object.prototype.toString.call(e)}function s(e,n,t){for(var r,i,o=[0],u=0,s=e.length;s>u;){for(i=o.length;i--;o[i]*=n);for(o[r=0]+=N.indexOf(e.charAt(u++));r<o.length;r++)o[r]>t-1&&(null==o[r+1]&&(o[r+1]=0),o[r+1]+=o[r]/t|0,o[r]%=t)}return o.reverse()}function f(e,n){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(0>n?"e":"e+")+n}function l(e,n){var t,r;if(0>n){for(r="0.";++n;r+="0");e=r+e}else if(t=e.length,++n>t){for(r="0",n-=t;--n;r+="0");e+=r}else t>n&&(e=e.slice(0,n)+"."+e.slice(n));return e}function c(e){return e=parseFloat(e),0>e?p(e):d(e)}var a,h,g=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,p=Math.ceil,d=Math.floor,m=" not a boolean or binary digit",w="rounding mode",v="number type has more than 15 significant digits",N="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_",b=1e14,O=14,y=9007199254740991,S=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],R=1e7,A=1e9;if("undefined"!=typeof crypto&&(a=crypto),"function"==typeof define&&define.amd)define(function(){return n()});else if("undefined"!=typeof module&&module.exports){if(module.exports=n(),!a)try{a=require("crypto")}catch(E){}}else e||(e="undefined"!=typeof self?self:Function("return this")()),e.BigNumber=n()}(this);
    /* jshint ignore:end */
  
  })($scope.base, null)
};

/* Generated by Opal 0.10.3 */
Opal.modules["bigdecimal"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$===', '$attr_reader', '$new', '$class', '$bignumber', '$nan?', '$==', '$raise', '$<', '$coerce', '$>', '$mode', '$>=', '$/', '$zero?', '$infinite?', '$finite?']);
  (function($base, $super) {
    function $BigDecimal(){};
    var self = $BigDecimal = $klass($base, $super, 'BigDecimal', $BigDecimal);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Numeric'));
  self.$require("js");
  self.$require("bigdecimal/kernel");
  self.$require("bigdecimal/bignumber.js");
  return (function($base, $super) {
    function $BigDecimal(){};
    var self = $BigDecimal = $klass($base, $super, 'BigDecimal', $BigDecimal);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25;

    Opal.cdecl($scope, 'ROUND_MODE', 256);

    Opal.cdecl($scope, 'ROUND_UP', 0);

    Opal.cdecl($scope, 'ROUND_DOWN', 1);

    Opal.cdecl($scope, 'ROUND_CEILING', 2);

    Opal.cdecl($scope, 'ROUND_FLOOR', 3);

    Opal.cdecl($scope, 'ROUND_HALF_UP', 4);

    Opal.cdecl($scope, 'ROUND_HALF_DOWN', 5);

    Opal.cdecl($scope, 'ROUND_HALF_EVEN', 6);

    Opal.cdecl($scope, 'SIGN_NaN', 0);

    Opal.cdecl($scope, 'SIGN_POSITIVE_ZERO', 1);

    Opal.cdecl($scope, 'SIGN_NEGATIVE_ZERO', -1);

    Opal.cdecl($scope, 'SIGN_POSITIVE_FINITE', 2);

    Opal.cdecl($scope, 'SIGN_NEGATIVE_FINITE', -2);

    Opal.cdecl($scope, 'SIGN_POSITIVE_INFINITE', 3);

    Opal.cdecl($scope, 'SIGN_NEGATIVE_INFINITE', -3);

    Opal.defs(self, '$limit', TMP_1 = function $$limit(digits) {
      var self = this;
      if (self.digits == null) self.digits = nil;

      if (digits == null) {
        digits = nil;
      }
      if (digits !== false && digits !== nil && digits != null) {
        self.digits = digits};
      return self.digits;
    }, TMP_1.$$arity = -1);

    Opal.defs(self, '$mode', TMP_2 = function $$mode(mode, value) {
      var $a, self = this, $case = nil;
      if (self.round_mode == null) self.round_mode = nil;

      if (value == null) {
        value = nil;
      }
      return (function() {$case = mode;if ($scope.get('ROUND_MODE')['$===']($case)) {if (value !== false && value !== nil && value != null) {
        self.round_mode = value};
      return ((($a = self.round_mode) !== false && $a !== nil && $a != null) ? $a : $scope.get('ROUND_HALF_UP'));}else { return nil }})();
    }, TMP_2.$$arity = -2);

    self.$attr_reader("bignumber");

    Opal.defn(self, '$initialize', TMP_3 = function $$initialize(initial, digits) {
      var self = this;

      if (digits == null) {
        digits = 0;
      }
      return self.bignumber = $scope.get('JS').$new($scope.get('BigNumber'), initial);
    }, TMP_3.$$arity = -2);

    Opal.defn(self, '$==', TMP_4 = function(other) {
      var self = this, $case = nil;

      return (function() {$case = other;if (self.$class()['$===']($case)) {return self.$bignumber().equals(other.$bignumber())}else if ($scope.get('Number')['$===']($case)) {return self.$bignumber().equals(other)}else {return false}})();
    }, TMP_4.$$arity = 1);

    Opal.alias(self, '===', '==');

    Opal.defn(self, '$<=>', TMP_5 = function(other) {
      var self = this, $case = nil, result = nil;

      $case = other;if (self.$class()['$===']($case)) {result = self.$bignumber().comparedTo(other.$bignumber())}else if ($scope.get('Number')['$===']($case)) {result = self.$bignumber().comparedTo(other)}else {result = nil};
      return result === null ? nil : result;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$<', TMP_6 = function(other) {
      var $a, $b, $c, self = this, $iter = TMP_6.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_6.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : (($c = other !== false && other !== nil && other != null) ? other['$nan?']() : other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self, Opal.find_super_dispatcher(self, '<', TMP_6, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$<=', TMP_7 = function(other) {
      var $a, $b, $c, self = this, $iter = TMP_7.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_7.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : (($c = other !== false && other !== nil && other != null) ? other['$nan?']() : other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self, Opal.find_super_dispatcher(self, '<=', TMP_7, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$>', TMP_8 = function(other) {
      var $a, $b, $c, self = this, $iter = TMP_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_8.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : (($c = other !== false && other !== nil && other != null) ? other['$nan?']() : other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self, Opal.find_super_dispatcher(self, '>', TMP_8, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$>=', TMP_9 = function(other) {
      var $a, $b, $c, self = this, $iter = TMP_9.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_9.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : (($c = other !== false && other !== nil && other != null) ? other['$nan?']() : other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self, Opal.find_super_dispatcher(self, '>=', TMP_9, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$abs', TMP_10 = function $$abs() {
      var self = this;

      return self.$class().$new(self.$bignumber().abs());
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$add', TMP_11 = function $$add(other, digits) {
      var $a, $b, self = this, _ = nil, result = nil;

      if (digits == null) {
        digits = 0;
      }
      if (digits['$=='](nil)) {
        self.$raise($scope.get('TypeError'), "wrong argument type nil (expected Fixnum)")};
      if ((($a = $rb_lt(digits, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "argument must be positive")};
      $b = self.$coerce(other), $a = Opal.to_ary($b), other = ($a[0] == null ? nil : $a[0]), _ = ($a[1] == null ? nil : $a[1]), $b;
      result = self.$bignumber().plus(other.$bignumber());
      if ((($a = $rb_gt(digits, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = result.toDigits(digits, self.$class().$mode($scope.get('ROUND_MODE')))};
      return self.$class().$new(result);
    }, TMP_11.$$arity = -2);

    Opal.alias(self, '+', 'add');

    Opal.defn(self, '$ceil', TMP_12 = function $$ceil(n) {
      var $a, self = this;

      if (n == null) {
        n = nil;
      }
      if ((($a = self.$bignumber().isFinite()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('FloatDomainError'), "Computation results to 'Infinity'")
      };
      if (n['$=='](nil)) {
        return self.$bignumber().round(0, $scope.get('ROUND_CEILING')).toNumber()
      } else if ((($a = $rb_ge(n, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$class().$new(self.$bignumber().round(n, $scope.get('ROUND_CEILING')))
        } else {
        return self.$class().$new(self.$bignumber().round(0, $scope.get('ROUND_CEILING')))
      };
    }, TMP_12.$$arity = -1);

    Opal.defn(self, '$coerce', TMP_13 = function $$coerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;if (self.$class()['$===']($case)) {return [other, self]}else if ($scope.get('Number')['$===']($case)) {return [self.$class().$new(other), self]}else {return self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerced into " + (self.$class()))}})();
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$div', TMP_14 = function $$div(other, digits) {
      var $a, $b, self = this, _ = nil;

      if (digits == null) {
        digits = nil;
      }
      if (digits['$=='](0)) {
        return $rb_divide(self, other)};
      $b = self.$coerce(other), $a = Opal.to_ary($b), other = ($a[0] == null ? nil : $a[0]), _ = ($a[1] == null ? nil : $a[1]), $b;
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : other['$nan?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('FloatDomainError'), "Computation results to 'NaN'(Not a Number)")};
      if (digits['$=='](nil)) {
        if ((($a = other['$zero?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ZeroDivisionError'), "divided by 0")};
        if ((($a = self['$infinite?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('FloatDomainError'), "Computation results to 'Infinity'")};
        return self.$class().$new(self.$bignumber().dividedToIntegerBy(other.$bignumber()));};
      return self.$class().$new(self.$bignumber().dividedBy(other.$bignumber()).round(digits, self.$class().$mode($scope.get('ROUND_MODE'))));
    }, TMP_14.$$arity = -2);

    Opal.defn(self, '$finite?', TMP_15 = function() {
      var self = this;

      return self.$bignumber().isFinite();
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$infinite?', TMP_16 = function() {
      var $a, $b, self = this;

      if ((($a = ((($b = self['$finite?']()) !== false && $b !== nil && $b != null) ? $b : self['$nan?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = self.$bignumber().isNegative()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return -1
        } else {
        return 1
      };
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$minus', TMP_17 = function $$minus(other) {
      var $a, $b, self = this, _ = nil;

      $b = self.$coerce(other), $a = Opal.to_ary($b), other = ($a[0] == null ? nil : $a[0]), _ = ($a[1] == null ? nil : $a[1]), $b;
      return self.$class().$new(self.$bignumber().minus(other.$bignumber()));
    }, TMP_17.$$arity = 1);

    Opal.alias(self, '-', 'minus');

    Opal.defn(self, '$mult', TMP_18 = function $$mult(other, digits) {
      var $a, $b, self = this, _ = nil;

      if (digits == null) {
        digits = nil;
      }
      $b = self.$coerce(other), $a = Opal.to_ary($b), other = ($a[0] == null ? nil : $a[0]), _ = ($a[1] == null ? nil : $a[1]), $b;
      if (digits['$=='](nil)) {
        return self.$class().$new(self.$bignumber().times(other.$bignumber()))};
      return self.$class().$new(self.$bignumber().times(other.$bignumber()).round(digits, self.$class().$mode($scope.get('ROUND_MODE'))));
    }, TMP_18.$$arity = -2);

    Opal.alias(self, '*', 'mult');

    Opal.defn(self, '$nan?', TMP_19 = function() {
      var self = this;

      return self.$bignumber().isNaN();
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$quo', TMP_20 = function $$quo(other) {
      var $a, $b, self = this, _ = nil;

      $b = self.$coerce(other), $a = Opal.to_ary($b), other = ($a[0] == null ? nil : $a[0]), _ = ($a[1] == null ? nil : $a[1]), $b;
      return self.$class().$new(self.$bignumber().dividedBy(other.$bignumber()));
    }, TMP_20.$$arity = 1);

    Opal.alias(self, '/', 'quo');

    Opal.defn(self, '$sign', TMP_21 = function $$sign() {
      var $a, self = this;

      if ((($a = self.$bignumber().isNaN()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('SIGN_NaN')};
      if ((($a = self.$bignumber().isZero()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (function() {if ((($a = self.$bignumber().isNegative()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('SIGN_NEGATIVE_ZERO')
          } else {
          return $scope.get('SIGN_POSITIVE_ZERO')
        }; return nil; })()
        } else {
        return nil
      };
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$sub', TMP_22 = function $$sub(other, precision) {
      var $a, $b, self = this, _ = nil;

      $b = self.$coerce(other), $a = Opal.to_ary($b), other = ($a[0] == null ? nil : $a[0]), _ = ($a[1] == null ? nil : $a[1]), $b;
      return self.$class().$new(self.$bignumber().minus(other.$bignumber()));
    }, TMP_22.$$arity = 2);

    Opal.defn(self, '$to_f', TMP_23 = function $$to_f() {
      var self = this;

      return self.$bignumber().toNumber();
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_24 = function $$to_s(s) {
      var self = this;

      if (s == null) {
        s = "";
      }
      return self.$bignumber().toString();
    }, TMP_24.$$arity = -1);

    return (Opal.defn(self, '$zero?', TMP_25 = function() {
      var self = this;

      return self.$bignumber().isZero();
    }, TMP_25.$$arity = 0), nil) && 'zero?';
  })($scope.base, null);
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.8.1")
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/exception"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor', '$errors=', '$join', '$message_list', '$errors']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ValidationException(){};
      var self = $ValidationException = $klass($base, $super, 'ValidationException', $ValidationException);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      self.$attr_accessor("errors");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(errors) {
        var $a, $b, self = this;

        return (($a = [errors]), $b = self, $b['$errors='].apply($b, $a), $a[$a.length-1]);
      }, TMP_1.$$arity = 1);

      return (Opal.defn(self, '$to_s', TMP_2 = function $$to_s() {
        var self = this;

        return "" + (self.$errors().$message_list().$join("; "));
      }, TMP_2.$$arity = 0), nil) && 'to_s';
    })($scope.base, Opal.get('StandardError'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/errors"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$tap', '$merge!', '$new', '$[]', '$titleize', '$to_s', '$message', '$error_message_creator', '$Array', '$each', '$[]=', '$symbolic', '$concat', '$message_list', '$map', '$flatten', '$compact']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $DefaultErrorMessageCreator(){};
      var self = $DefaultErrorMessageCreator = $klass($base, $super, 'DefaultErrorMessageCreator', $DefaultErrorMessageCreator);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_2;

      Opal.cdecl($scope, 'MESSAGES', ($a = ($b = $scope.get('Hash').$new("is invalid")).$tap, $a.$$p = (TMP_1 = function(h){var self = TMP_1.$$s || this;
if (h == null) h = nil;
      return h['$merge!']($hash2(["nils", "required", "string", "integer", "boolean", "hash", "array", "model", "date", "before", "after", "empty", "max_length", "min_length", "matches", "in", "class", "min", "max", "new_records"], {"nils": "can't be nil", "required": "is required", "string": "isn't a string", "integer": "isn't an integer", "boolean": "isn't a boolean", "hash": "isn't a hash", "array": "isn't an array", "model": "isn't the right class", "date": "date doesn't exist", "before": "isn't before given date", "after": "isn't after given date", "empty": "can't be blank", "max_length": "is too long", "min_length": "is too short", "matches": "isn't in the right format", "in": "isn't an option", "class": "isn't the right class", "min": "is too small", "max": "is too big", "new_records": "isn't a saved model"}))}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b));

      return (Opal.defn(self, '$message', TMP_2 = function $$message(key, error_symbol, options) {
        var $a, self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        if ((($a = options['$[]']("index")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + ((((($a = key) !== false && $a !== nil && $a != null) ? $a : "array")).$to_s().$titleize()) + "[" + (options['$[]']("index")) + "] " + ($scope.get('MESSAGES')['$[]'](error_symbol))
          } else {
          return "" + (key.$to_s().$titleize()) + " " + ($scope.get('MESSAGES')['$[]'](error_symbol))
        };
      }, TMP_2.$$arity = -3), nil) && 'message';
    })($scope.base, null);

    (function($base, $super) {
      function $ErrorAtom(){};
      var self = $ErrorAtom = $klass($base, $super, 'ErrorAtom', $ErrorAtom);

      var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6;

      def.symbol = def.message = def.key = def.index = nil;
      Opal.defn(self, '$initialize', TMP_3 = function $$initialize(key, error_symbol, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        self.key = key;
        self.symbol = error_symbol;
        self.message = options['$[]']("message");
        return self.index = options['$[]']("index");
      }, TMP_3.$$arity = -3);

      Opal.defn(self, '$symbolic', TMP_4 = function $$symbolic() {
        var self = this;

        return self.symbol;
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$message', TMP_5 = function $$message() {
        var $a, self = this;

        return ((($a = self.message) !== false && $a !== nil && $a != null) ? $a : self.message = $scope.get('Mutations').$error_message_creator().$message(self.key, self.symbol, $hash2(["index"], {"index": self.index})));
      }, TMP_5.$$arity = 0);

      return (Opal.defn(self, '$message_list', TMP_6 = function $$message_list() {
        var self = this;

        return self.$Array(self.$message());
      }, TMP_6.$$arity = 0), nil) && 'message_list';
    })($scope.base, null);

    (function($base, $super) {
      function $ErrorHash(){};
      var self = $ErrorHash = $klass($base, $super, 'ErrorHash', $ErrorHash);

      var def = self.$$proto, $scope = self.$$scope, TMP_9, TMP_12, TMP_14;

      Opal.defn(self, '$symbolic', TMP_9 = function $$symbolic() {
        var $a, $b, TMP_7, self = this;

        return ($a = ($b = $scope.get('HashWithIndifferentAccess').$new()).$tap, $a.$$p = (TMP_7 = function(hash){var self = TMP_7.$$s || this, $c, $d, TMP_8;
if (hash == null) hash = nil;
        return ($c = ($d = self).$each, $c.$$p = (TMP_8 = function(k, v){var self = TMP_8.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
          return hash['$[]='](k, v.$symbolic())}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8), $c).call($d)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$message', TMP_12 = function $$message() {
        var $a, $b, TMP_10, self = this;

        return ($a = ($b = $scope.get('HashWithIndifferentAccess').$new()).$tap, $a.$$p = (TMP_10 = function(hash){var self = TMP_10.$$s || this, $c, $d, TMP_11;
if (hash == null) hash = nil;
        return ($c = ($d = self).$each, $c.$$p = (TMP_11 = function(k, v){var self = TMP_11.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
          return hash['$[]='](k, v.$message())}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $c).call($d)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b);
      }, TMP_12.$$arity = 0);

      return (Opal.defn(self, '$message_list', TMP_14 = function $$message_list() {
        var $a, $b, TMP_13, self = this, list = nil;

        list = [];
        ($a = ($b = self).$each, $a.$$p = (TMP_13 = function(k, v){var self = TMP_13.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
        return list.$concat(v.$message_list())}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13), $a).call($b);
        return list;
      }, TMP_14.$$arity = 0), nil) && 'message_list';
    })($scope.base, $scope.get('Hash'));

    (function($base, $super) {
      function $ErrorArray(){};
      var self = $ErrorArray = $klass($base, $super, 'ErrorArray', $ErrorArray);

      var def = self.$$proto, $scope = self.$$scope, TMP_16, TMP_18, TMP_20;

      Opal.defn(self, '$symbolic', TMP_16 = function $$symbolic() {
        var $a, $b, TMP_15, self = this;

        return ($a = ($b = self).$map, $a.$$p = (TMP_15 = function(e){var self = TMP_15.$$s || this, $c;
if (e == null) e = nil;
        return (($c = e !== false && e !== nil && e != null) ? e.$symbolic() : e)}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $a).call($b);
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$message', TMP_18 = function $$message() {
        var $a, $b, TMP_17, self = this;

        return ($a = ($b = self).$map, $a.$$p = (TMP_17 = function(e){var self = TMP_17.$$s || this, $c;
if (e == null) e = nil;
        return (($c = e !== false && e !== nil && e != null) ? e.$message() : e)}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);
      }, TMP_18.$$arity = 0);

      return (Opal.defn(self, '$message_list', TMP_20 = function $$message_list() {
        var $a, $b, TMP_19, self = this;

        return ($a = ($b = self.$compact()).$map, $a.$$p = (TMP_19 = function(e){var self = TMP_19.$$s || this;
if (e == null) e = nil;
        return e.$message_list()}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($b).$flatten();
      }, TMP_20.$$arity = 0), nil) && 'message_list';
    })($scope.base, $scope.get('Array'));
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/input_filter"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$options=', '$merge', '$default_options', '$class', '$has_key?', '$options', '$[]', '$!']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $InputFilter(){};
      var self = $InputFilter = $klass($base, $super, 'InputFilter', $InputFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

      Opal.defs(self, '$default_options', TMP_1 = function $$default_options() {
        var $a, self = this;
        if (self.default_options == null) self.default_options = nil;

        return ((($a = self.default_options) !== false && $a !== nil && $a != null) ? $a : self.default_options = $hash2([], {}));
      }, TMP_1.$$arity = 0);

      self.$attr_accessor("options");

      Opal.defn(self, '$initialize', TMP_2 = function $$initialize(opts) {
        var $a, $b, $c, self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        return (($a = [(((($c = self.$class().$default_options()) !== false && $c !== nil && $c != null) ? $c : $hash2([], {}))).$merge(opts)]), $b = self, $b['$options='].apply($b, $a), $a[$a.length-1]);
      }, TMP_2.$$arity = -1);

      Opal.defn(self, '$filter', TMP_3 = function $$filter(data) {
        var self = this;

        return [data, nil];
      }, TMP_3.$$arity = 1);

      Opal.defn(self, '$has_default?', TMP_4 = function() {
        var self = this;

        return self.$options()['$has_key?']("default");
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$default', TMP_5 = function() {
        var self = this;

        return self.$options()['$[]']("default");
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$discard_nils?', TMP_6 = function() {
        var self = this;

        return self.$options()['$[]']("nils")['$!']();
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$discard_empty?', TMP_7 = function() {
        var self = this;

        return self.$options()['$[]']("discard_empty");
      }, TMP_7.$$arity = 0);

      return (Opal.defn(self, '$discard_invalid?', TMP_8 = function() {
        var self = this;

        return self.$options()['$[]']("discard_invalid");
      }, TMP_8.$$arity = 0), nil) && 'discard_invalid?';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/hash_filter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$define_method', '$[]', '$[]=', '$to_sym', '$new', '$to_proc', '$attr_accessor', '$instance_eval', '$each_pair', '$optional_inputs', '$required_inputs', '$keys', '$nil?', '$options', '$is_a?', '$with_indifferent_access', '$each', '$==', '$has_key?', '$filter', '$!', '$discard_invalid?', '$delete', '$discard_empty?', '$discard_nils?', '$has_default?', '$default', '$-', '$any?']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $HashFilter(){};
      var self = $HashFilter = $klass($base, $super, 'HashFilter', $HashFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_17;

      def.required_inputs = def.optional_inputs = def.current_inputs = nil;
      Opal.defs(self, '$register_additional_filter', TMP_2 = function $$register_additional_filter(type_class, type_name) {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = self).$define_method, $a.$$p = (TMP_1 = function($c_rest){var self = TMP_1.$$s || this, block, args, $d, $e, name = nil, options = nil;
          if (self.current_inputs == null) self.current_inputs = nil;

          block = TMP_1.$$p || nil, TMP_1.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        name = args['$[]'](0);
          options = ((($d = args['$[]'](1)) !== false && $d !== nil && $d != null) ? $d : $hash2([], {}));
          return self.current_inputs['$[]='](name.$to_sym(), ($d = ($e = type_class).$new, $d.$$p = block.$to_proc(), $d).call($e, options));}, TMP_1.$$s = self, TMP_1.$$arity = -1, TMP_1), $a).call($b, type_name);
      }, TMP_2.$$arity = 2);

      self.default_options = $hash2(["nils"], {"nils": false});

      self.$attr_accessor("optional_inputs");

      self.$attr_accessor("required_inputs");

      Opal.defn(self, '$initialize', TMP_3 = function $$initialize(opts) {
        var $a, $b, $c, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        TMP_3.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_3, false)), $a.$$p = null, $a).call($b, opts);
        self.optional_inputs = $hash2([], {});
        self.required_inputs = $hash2([], {});
        self.current_inputs = self.required_inputs;
        if ((block !== nil)) {
          return ($a = ($c = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($c)
          } else {
          return nil
        };
      }, TMP_3.$$arity = -1);

      Opal.defn(self, '$dup', TMP_6 = function $$dup() {
        var $a, $b, TMP_4, $c, TMP_5, self = this, dupped = nil;

        dupped = $scope.get('HashFilter').$new();
        ($a = ($b = self.optional_inputs).$each_pair, $a.$$p = (TMP_4 = function(k, v){var self = TMP_4.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
        return dupped.$optional_inputs()['$[]='](k, v)}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4), $a).call($b);
        ($a = ($c = self.required_inputs).$each_pair, $a.$$p = (TMP_5 = function(k, v){var self = TMP_5.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
        return dupped.$required_inputs()['$[]='](k, v)}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5), $a).call($c);
        return dupped;
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$required', TMP_7 = function $$required() {
        var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

        TMP_7.$$p = null;
        self.current_inputs = self.required_inputs;
        return ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$optional', TMP_8 = function $$optional() {
        var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        self.current_inputs = self.optional_inputs;
        return ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$required_keys', TMP_9 = function $$required_keys() {
        var self = this;

        return self.required_inputs.$keys();
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$optional_keys', TMP_10 = function $$optional_keys() {
        var self = this;

        return self.optional_inputs.$keys();
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$hash', TMP_11 = function $$hash(name, options) {
        var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil;

        if (options == null) {
          options = $hash2([], {});
        }
        TMP_11.$$p = null;
        return self.current_inputs['$[]='](name.$to_sym(), ($a = ($b = $scope.get('HashFilter')).$new, $a.$$p = block.$to_proc(), $a).call($b, options));
      }, TMP_11.$$arity = -2);

      Opal.defn(self, '$model', TMP_12 = function $$model(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        return self.current_inputs['$[]='](name.$to_sym(), $scope.get('ModelFilter').$new(name.$to_sym(), options));
      }, TMP_12.$$arity = -2);

      Opal.defn(self, '$array', TMP_13 = function $$array(name, options) {
        var $a, $b, self = this, $iter = TMP_13.$$p, block = $iter || nil, name_sym = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        TMP_13.$$p = null;
        name_sym = name.$to_sym();
        return self.current_inputs['$[]='](name.$to_sym(), ($a = ($b = $scope.get('ArrayFilter')).$new, $a.$$p = block.$to_proc(), $a).call($b, name_sym, options));
      }, TMP_13.$$arity = -2);

      return (Opal.defn(self, '$filter', TMP_17 = function $$filter(data) {
        var $a, $b, TMP_14, $c, TMP_16, self = this, errors = nil, filtered_data = nil, wildcard_filterer = nil, filtered_keys = nil;

        if ((($a = data['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.$options()['$[]']("nils")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if ((($a = data['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return [data, "hash"]
        };
        if ((($a = data['$is_a?']($scope.get('HashWithIndifferentAccess'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          data = data.$with_indifferent_access()
        };
        errors = $scope.get('ErrorHash').$new();
        filtered_data = $scope.get('HashWithIndifferentAccess').$new();
        wildcard_filterer = nil;
        ($a = ($b = [[self.required_inputs, true], [self.optional_inputs, false]]).$each, $a.$$p = (TMP_14 = function($c){var self = TMP_14.$$s || this, $c_args, inputs, is_required, $d, $e, TMP_15;

          if ($c == null) {
            $c = nil;
          }
          $c = Opal.to_ary($c);
          $c_args = Opal.slice.call($c, 0, $c.length);
          inputs = $c_args.splice(0,1)[0];
          if (inputs == null) {
            inputs = nil;
          }
          is_required = $c_args.splice(0,1)[0];
          if (is_required == null) {
            is_required = nil;
          }
        return ($d = ($e = inputs).$each_pair, $d.$$p = (TMP_15 = function(key, filterer){var self = TMP_15.$$s || this, $c, $f, $g, data_element = nil, sub_data = nil, sub_error = nil;
if (key == null) key = nil;if (filterer == null) filterer = nil;
          if (key['$==']("*")) {
              wildcard_filterer = filterer;
              return nil;;};
            data_element = data['$[]'](key);
            if ((($c = data['$has_key?'](key)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              $f = filterer.$filter(data_element), $c = Opal.to_ary($f), sub_data = ($c[0] == null ? nil : $c[0]), sub_error = ($c[1] == null ? nil : $c[1]), $f;
              if ((($c = sub_error['$nil?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                filtered_data['$[]='](key, sub_data)
              } else if ((($c = ($f = is_required['$!'](), $f !== false && $f !== nil && $f != null ?filterer['$discard_invalid?']() : $f)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                data.$delete(key)
              } else if ((($c = ($f = ($g = is_required['$!'](), $g !== false && $g !== nil && $g != null ?sub_error['$==']("empty") : $g), $f !== false && $f !== nil && $f != null ?filterer['$discard_empty?']() : $f)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                data.$delete(key)
              } else if ((($c = ($f = ($g = is_required['$!'](), $g !== false && $g !== nil && $g != null ?sub_error['$==']("nils") : $g), $f !== false && $f !== nil && $f != null ?filterer['$discard_nils?']() : $f)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                data.$delete(key)
                } else {
                if ((($c = sub_error['$is_a?']($scope.get('Symbol'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  sub_error = $scope.get('ErrorAtom').$new(key, sub_error)};
                errors['$[]='](key, sub_error);
              };};
            if ((($c = data['$has_key?'](key)['$!']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              if ((($c = filterer['$has_default?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return filtered_data['$[]='](key, filterer.$default())
              } else if (is_required !== false && is_required !== nil && is_required != null) {
                return errors['$[]='](key, $scope.get('ErrorAtom').$new(key, "required"))
                } else {
                return nil
              }
              } else {
              return nil
            };}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $d).call($e)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14.$$has_top_level_mlhs_arg = true, TMP_14), $a).call($b);
        if (wildcard_filterer !== false && wildcard_filterer !== nil && wildcard_filterer != null) {
          filtered_keys = $rb_minus(data.$keys(), filtered_data.$keys());
          ($a = ($c = filtered_keys).$each, $a.$$p = (TMP_16 = function(key){var self = TMP_16.$$s || this, $d, $e, data_element = nil, sub_data = nil, sub_error = nil;
if (key == null) key = nil;
          data_element = data['$[]'](key);
            $e = wildcard_filterer.$filter(data_element), $d = Opal.to_ary($e), sub_data = ($d[0] == null ? nil : $d[0]), sub_error = ($d[1] == null ? nil : $d[1]), $e;
            if ((($d = sub_error['$nil?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return filtered_data['$[]='](key, sub_data)
            } else if ((($d = wildcard_filterer['$discard_invalid?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return data.$delete(key)
            } else if ((($d = (($e = sub_error['$==']("empty")) ? wildcard_filterer['$discard_empty?']() : sub_error['$==']("empty"))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return data.$delete(key)
            } else if ((($d = (($e = sub_error['$==']("nils")) ? wildcard_filterer['$discard_nils?']() : sub_error['$==']("nils"))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return data.$delete(key)
              } else {
              if ((($d = sub_error['$is_a?']($scope.get('Symbol'))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                sub_error = $scope.get('ErrorAtom').$new(key, sub_error)};
              return errors['$[]='](key, sub_error);
            };}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($c);};
        if ((($a = errors['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [data, errors]
          } else {
          return [filtered_data, nil]
        };
      }, TMP_17.$$arity = 1), nil) && 'filter';
    })($scope.base, $scope.get('InputFilter'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/array_filter"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$define_method', '$[]', '$new', '$to_proc', '$instance_eval', '$options', '$raise', '$to_sym', '$nil?', '$!', '$is_a?', '$==', '$Array', '$each_with_index', '$filter_element', '$<<', '$discard_invalid?', '$filter', '$constantize']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ArrayFilter(){};
      var self = $ArrayFilter = $klass($base, $super, 'ArrayFilter', $ArrayFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9;

      def.element_filter = nil;
      Opal.defs(self, '$register_additional_filter', TMP_2 = function $$register_additional_filter(type_class, type_name) {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = self).$define_method, $a.$$p = (TMP_1 = function($c_rest){var self = TMP_1.$$s || this, block, args, $d, $e, options = nil;

          block = TMP_1.$$p || nil, TMP_1.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        options = ((($d = args['$[]'](0)) !== false && $d !== nil && $d != null) ? $d : $hash2([], {}));
          return self.element_filter = ($d = ($e = type_class).$new, $d.$$p = block.$to_proc(), $d).call($e, options);}, TMP_1.$$s = self, TMP_1.$$arity = -1, TMP_1), $a).call($b, type_name);
      }, TMP_2.$$arity = 2);

      self.default_options = $hash2(["nils", "class", "arrayize"], {"nils": false, "class": nil, "arrayize": false});

      Opal.defn(self, '$initialize', TMP_3 = function $$initialize(name, opts) {
        var $a, $b, $c, $d, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        TMP_3.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_3, false)), $a.$$p = null, $a).call($b, opts);
        self.name = name;
        self.element_filter = nil;
        if ((block !== nil)) {
          ($a = ($c = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($c)};
        if ((($a = ($d = self.element_filter, $d !== false && $d !== nil && $d != null ?self.$options()['$[]']("class") : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$raise($scope.get('ArgumentError').$new("Can't supply both a class and a filter"))
          } else {
          return nil
        };
      }, TMP_3.$$arity = -2);

      Opal.defn(self, '$hash', TMP_4 = function $$hash(options) {
        var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

        if (options == null) {
          options = $hash2([], {});
        }
        TMP_4.$$p = null;
        return self.element_filter = ($a = ($b = $scope.get('HashFilter')).$new, $a.$$p = block.$to_proc(), $a).call($b, options);
      }, TMP_4.$$arity = -1);

      Opal.defn(self, '$model', TMP_5 = function $$model(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        return self.element_filter = $scope.get('ModelFilter').$new(name.$to_sym(), options);
      }, TMP_5.$$arity = -2);

      Opal.defn(self, '$array', TMP_6 = function $$array(options) {
        var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil;

        if (options == null) {
          options = $hash2([], {});
        }
        TMP_6.$$p = null;
        return self.element_filter = ($a = ($b = $scope.get('ArrayFilter')).$new, $a.$$p = block.$to_proc(), $a).call($b, nil, options);
      }, TMP_6.$$arity = -1);

      Opal.defn(self, '$filter', TMP_8 = function $$filter(data) {
        var $a, $b, TMP_7, $c, $d, self = this, errors = nil, filtered_data = nil, found_error = nil;

        if ((($a = data['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.$options()['$[]']("nils")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if ((($a = ($b = data['$is_a?']($scope.get('Array'))['$!'](), $b !== false && $b !== nil && $b != null ?self.$options()['$[]']("arrayize") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (data['$==']("")) {
            return [[], nil]};
          data = self.$Array(data);};
        if ((($a = data['$is_a?']($scope.get('Array'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          errors = $scope.get('ErrorArray').$new();
          filtered_data = [];
          found_error = false;
          ($a = ($b = data).$each_with_index, $a.$$p = (TMP_7 = function(el, i){var self = TMP_7.$$s || this, $c, $d, el_filtered = nil, el_error = nil;
            if (self.name == null) self.name = nil;
if (el == null) el = nil;if (i == null) i = nil;
          $d = self.$filter_element(el), $c = Opal.to_ary($d), el_filtered = ($c[0] == null ? nil : $c[0]), el_error = ($c[1] == null ? nil : $c[1]), $d;
            if ((($c = el_error['$is_a?']($scope.get('Symbol'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              el_error = $scope.get('ErrorAtom').$new(self.name, el_error, $hash2(["index"], {"index": i}))};
            errors['$<<'](el_error);
            if (el_error !== false && el_error !== nil && el_error != null) {
              return found_error = true
              } else {
              return filtered_data['$<<'](el_filtered)
            };}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7), $a).call($b);
          if ((($a = (($c = found_error !== false && found_error !== nil && found_error != null) ? (($d = self.element_filter, $d !== false && $d !== nil && $d != null ?self.element_filter['$discard_invalid?']() : $d))['$!']() : found_error)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [data, errors]
            } else {
            return [filtered_data, nil]
          };
          } else {
          return [data, "array"]
        };
      }, TMP_8.$$arity = 1);

      return (Opal.defn(self, '$filter_element', TMP_9 = function $$filter_element(data) {
        var $a, $b, self = this, el_errors = nil, class_const = nil;

        if ((($a = self.element_filter) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          $b = self.element_filter.$filter(data), $a = Opal.to_ary($b), data = ($a[0] == null ? nil : $a[0]), el_errors = ($a[1] == null ? nil : $a[1]), $b;
          if (el_errors !== false && el_errors !== nil && el_errors != null) {
            return [data, el_errors]};
        } else if ((($a = self.$options()['$[]']("class")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          class_const = self.$options()['$[]']("class");
          if ((($a = class_const['$is_a?']($scope.get('String'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            class_const = class_const.$constantize()};
          if ((($a = data['$is_a?'](class_const)['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [data, "class"]};};
        return [data, nil];
      }, TMP_9.$$arity = 1), nil) && 'filter_element';
    })($scope.base, $scope.get('InputFilter'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/additional_filter"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$underscore', '$[]', '$name', '$register_additional_filter']);
  self.$require("mutations/hash_filter");
  self.$require("mutations/array_filter");
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $AdditionalFilter(){};
      var self = $AdditionalFilter = $klass($base, $super, 'AdditionalFilter', $AdditionalFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      return (Opal.defs(self, '$inherited', TMP_1 = function $$inherited(subclass) {
        var self = this, type_name = nil;

        type_name = subclass.$name()['$[]'](/^Mutations::([a-zA-Z]*)Filter$/, 1).$underscore();
        (($scope.get('Mutations')).$$scope.get('HashFilter')).$register_additional_filter(subclass, type_name);
        return (($scope.get('Mutations')).$$scope.get('ArrayFilter')).$register_additional_filter(subclass, type_name);
      }, TMP_1.$$arity = 1), nil) && 'inherited'
    })($scope.base, $scope.get('InputFilter'))
  })($scope.base);
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/string_filter"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$!', '$any?', '$is_a?', '$to_s', '$gsub', '$strip', '$==', '$<', '$length', '$>', '$include?', '$!~']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $StringFilter(){};
      var self = $StringFilter = $klass($base, $super, 'StringFilter', $StringFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_2;

      self.default_options = $hash2(["strip", "strict", "nils", "empty", "min_length", "max_length", "matches", "in", "discard_empty", "allow_control_characters"], {"strip": true, "strict": false, "nils": false, "empty": false, "min_length": nil, "max_length": nil, "matches": nil, "in": nil, "discard_empty": false, "allow_control_characters": false});

      return (Opal.defn(self, '$filter', TMP_2 = function $$filter(data) {
        var $a, $b, $c, $d, TMP_1, self = this;

        if ((($a = data['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.$options()['$[]']("nils")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if ((($a = ($b = self.$options()['$[]']("strict")['$!'](), $b !== false && $b !== nil && $b != null ?($c = ($d = [$scope.get('TrueClass'), $scope.get('FalseClass'), $scope.get('Integer'), $scope.get('Float'), $scope.get('BigDecimal'), $scope.get('Symbol')])['$any?'], $c.$$p = (TMP_1 = function(klass){var self = TMP_1.$$s || this;
if (klass == null) klass = nil;
        return data['$is_a?'](klass)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $c).call($d) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          data = data.$to_s()};
        if ((($a = data['$is_a?']($scope.get('String'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return [data, "string"]
        };
        if ((($a = self.$options()['$[]']("allow_control_characters")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          data = data.$gsub(/[^[:print:]\t\r\n]+/, " ")
        };
        if ((($a = self.$options()['$[]']("strip")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          data = data.$strip()};
        if (data['$==']("")) {
          if ((($a = self.$options()['$[]']("empty")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [data, nil]
            } else {
            return [data, "empty"]
          }};
        if ((($a = ($b = self.$options()['$[]']("min_length"), $b !== false && $b !== nil && $b != null ?$rb_lt(data.$length(), self.$options()['$[]']("min_length")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [data, "min_length"]};
        if ((($a = ($b = self.$options()['$[]']("max_length"), $b !== false && $b !== nil && $b != null ?$rb_gt(data.$length(), self.$options()['$[]']("max_length")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [data, "max_length"]};
        if ((($a = ($b = self.$options()['$[]']("in"), $b !== false && $b !== nil && $b != null ?self.$options()['$[]']("in")['$include?'](data)['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [data, "in"]};
        if ((($a = ($b = self.$options()['$[]']("matches"), $b !== false && $b !== nil && $b != null ?(self.$options()['$[]']("matches")['$!~'](data)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [data, "matches"]};
        return [data, nil];
      }, TMP_2.$$arity = 1), nil) && 'filter';
    })($scope.base, $scope.get('AdditionalFilter'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/integer_filter"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$options', '$==', '$nil?', '$!', '$is_a?', '$=~', '$to_i', '$<', '$>', '$include?']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $IntegerFilter(){};
      var self = $IntegerFilter = $klass($base, $super, 'IntegerFilter', $IntegerFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.default_options = $hash2(["nils", "empty_is_nil", "min", "max", "in"], {"nils": false, "empty_is_nil": false, "min": nil, "max": nil, "in": nil});

      return (Opal.defn(self, '$filter', TMP_1 = function $$filter(data) {
        var $a, $b, self = this;

        if ((($a = ($b = self.$options()['$[]']("empty_is_nil"), $b !== false && $b !== nil && $b != null ?data['$==']("") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          data = nil};
        if ((($a = data['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.$options()['$[]']("nils")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (data['$==']("")) {
          return [data, "empty"]};
        if ((($a = data['$is_a?']($scope.get('Integer'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($b = data['$is_a?']($scope.get('String')), $b !== false && $b !== nil && $b != null ?data['$=~'](/^-?\d/) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            data = data.$to_i()
            } else {
            return [data, "integer"]
          }};
        if ((($a = ($b = self.$options()['$[]']("min"), $b !== false && $b !== nil && $b != null ?$rb_lt(data, self.$options()['$[]']("min")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [data, "min"]};
        if ((($a = ($b = self.$options()['$[]']("max"), $b !== false && $b !== nil && $b != null ?$rb_gt(data, self.$options()['$[]']("max")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [data, "max"]};
        if ((($a = ($b = self.$options()['$[]']("in"), $b !== false && $b !== nil && $b != null ?self.$options()['$[]']("in")['$include?'](data)['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [data, "in"]};
        return [data, nil];
      }, TMP_1.$$arity = 1), nil) && 'filter';
    })($scope.base, $scope.get('AdditionalFilter'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/float_filter"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$!', '$is_a?', '$=~', '$to_f', '$<', '$>']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $FloatFilter(){};
      var self = $FloatFilter = $klass($base, $super, 'FloatFilter', $FloatFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.default_options = $hash2(["nils", "min", "max"], {"nils": false, "min": nil, "max": nil});

      return (Opal.defn(self, '$filter', TMP_1 = function $$filter(data) {
        var $a, $b, self = this;

        if ((($a = data['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.$options()['$[]']("nils")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (data['$==']("")) {
          return [data, "empty"]};
        if ((($a = data['$is_a?']($scope.get('Float'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($b = data['$is_a?']($scope.get('String')), $b !== false && $b !== nil && $b != null ?data['$=~'](/^[-+]?\d*\.?\d+/) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            data = data.$to_f()
          } else if ((($a = data['$is_a?']($scope.get('Integer'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            data = data.$to_f()
            } else {
            return [data, "float"]
          }};
        if ((($a = ($b = self.$options()['$[]']("min"), $b !== false && $b !== nil && $b != null ?$rb_lt(data, self.$options()['$[]']("min")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [data, "min"]};
        if ((($a = ($b = self.$options()['$[]']("max"), $b !== false && $b !== nil && $b != null ?$rb_gt(data, self.$options()['$[]']("max")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [data, "max"]};
        return [data, nil];
      }, TMP_1.$$arity = 1), nil) && 'filter';
    })($scope.base, $scope.get('AdditionalFilter'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/boolean_filter"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$is_a?', '$to_s', '$downcase']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $BooleanFilter(){};
      var self = $BooleanFilter = $klass($base, $super, 'BooleanFilter', $BooleanFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.default_options = $hash2(["nils"], {"nils": false});

      Opal.cdecl($scope, 'BOOL_MAP', $hash2(["true", "1", "false", "0"], {"true": true, "1": true, "false": false, "0": false}));

      return (Opal.defn(self, '$filter', TMP_1 = function $$filter(data) {
        var $a, $b, self = this, res = nil;

        if ((($a = data['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.$options()['$[]']("nils")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (data['$==']("")) {
          return [data, "empty"]};
        if ((($a = ((($b = data['$=='](true)) !== false && $b !== nil && $b != null) ? $b : data['$=='](false))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return [data, nil]};
        if ((($a = data['$is_a?']($scope.get('Integer'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          data = data.$to_s()};
        if ((($a = data['$is_a?']($scope.get('String'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          res = $scope.get('BOOL_MAP')['$[]'](data.$downcase());
          if ((($a = res['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return [res, nil]
          };
          return [data, "boolean"];
          } else {
          return [data, "boolean"]
        };
      }, TMP_1.$$arity = 1), nil) && 'filter';
    })($scope.base, $scope.get('AdditionalFilter'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/duck_filter"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$each', '$respond_to?', '$Array']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $DuckFilter(){};
      var self = $DuckFilter = $klass($base, $super, 'DuckFilter', $DuckFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_2;

      self.default_options = $hash2(["nils", "methods"], {"nils": false, "methods": nil});

      return (Opal.defn(self, '$filter', TMP_2 = function $$filter(data) {try {

        var $a, $b, TMP_1, self = this;

        if ((($a = data['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.$options()['$[]']("nils")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, nil]};
          return [nil, "nils"];};
        ($a = ($b = self.$Array(self.$options()['$[]']("methods"))).$each, $a.$$p = (TMP_1 = function(method){var self = TMP_1.$$s || this, $c;
if (method == null) method = nil;
        if ((($c = data['$respond_to?'](method)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return nil
            } else {
            Opal.ret([data, "duck"])
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
        return [data, nil];
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_2.$$arity = 1), nil) && 'filter';
    })($scope.base, $scope.get('AdditionalFilter'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/date_filter"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$is_a?', '$strptime', '$parse', '$respond_to?', '$to_date', '$<=', '$>=']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $DateFilter(){};
      var self = $DateFilter = $klass($base, $super, 'DateFilter', $DateFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.default_options = $hash2(["nils", "format", "after", "before"], {"nils": false, "format": nil, "after": nil, "before": nil});

      return (Opal.defn(self, '$filter', TMP_1 = function $$filter(data) {
        var $a, self = this, actual_date = nil;

        if ((($a = data['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.$options()['$[]']("nils")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (""['$=='](data)) {
          return [data, "empty"]};
        if ((($a = data['$is_a?']($scope.get('Date'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          actual_date = data
        } else if ((($a = data['$is_a?']($scope.get('String'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          try {
            actual_date = (function() {if ((($a = self.$options()['$[]']("format")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return $scope.get('Date').$strptime(data, self.$options()['$[]']("format"))
              } else {
              return $scope.get('Date').$parse(data)
            }; return nil; })()
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
              try {
                return [nil, "date"]
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
        } else if ((($a = data['$respond_to?']("to_date")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          actual_date = data.$to_date()
          } else {
          return [nil, "date"]
        };
        if ((($a = self.$options()['$[]']("after")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_le(actual_date, self.$options()['$[]']("after"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, "after"]}};
        if ((($a = self.$options()['$[]']("before")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_ge(actual_date, self.$options()['$[]']("before"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, "before"]}};
        return [actual_date, nil];
      }, TMP_1.$$arity = 1), nil) && 'filter';
    })($scope.base, $scope.get('AdditionalFilter'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/time_filter"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$is_a?', '$strptime', '$parse', '$respond_to?', '$to_time', '$<=', '$>=']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $TimeFilter(){};
      var self = $TimeFilter = $klass($base, $super, 'TimeFilter', $TimeFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.default_options = $hash2(["nils", "format", "after", "before"], {"nils": false, "format": nil, "after": nil, "before": nil});

      return (Opal.defn(self, '$filter', TMP_1 = function $$filter(data) {
        var $a, self = this, actual_time = nil;

        if ((($a = data['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.$options()['$[]']("nils")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (""['$=='](data)) {
          return [data, "empty"]};
        if ((($a = data['$is_a?']($scope.get('Time'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          actual_time = data
        } else if ((($a = data['$is_a?']($scope.get('String'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          try {
            actual_time = (function() {if ((($a = self.$options()['$[]']("format")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return $scope.get('Time').$strptime(data, self.$options()['$[]']("format"))
              } else {
              return $scope.get('Time').$parse(data)
            }; return nil; })()
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
              try {
                return [nil, "time"]
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
        } else if ((($a = data['$respond_to?']("to_time")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          actual_time = data.$to_time()
          } else {
          return [nil, "time"]
        };
        if ((($a = self.$options()['$[]']("after")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_le(actual_time, self.$options()['$[]']("after"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, "after"]}};
        if ((($a = self.$options()['$[]']("before")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_ge(actual_time, self.$options()['$[]']("before"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, "before"]}};
        return [actual_time, nil];
      }, TMP_1.$$arity = 1), nil) && 'filter';
    })($scope.base, $scope.get('AdditionalFilter'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/file_filter"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$concat', '$each', '$respond_to?', '$is_a?', '$>', '$size']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $FileFilter(){};
      var self = $FileFilter = $klass($base, $super, 'FileFilter', $FileFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_2;

      self.default_options = $hash2(["nils", "upload", "size"], {"nils": false, "upload": false, "size": nil});

      return (Opal.defn(self, '$filter', TMP_2 = function $$filter(data) {try {

        var $a, $b, TMP_1, self = this, methods = nil;

        if ((($a = data['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.$options()['$[]']("nils")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (data['$==']("")) {
          return [data, "empty"]};
        methods = ["read", "size"];
        if ((($a = self.$options()['$[]']("upload")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          methods.$concat(["original_filename", "content_type"])};
        ($a = ($b = methods).$each, $a.$$p = (TMP_1 = function(method){var self = TMP_1.$$s || this, $c;
if (method == null) method = nil;
        if ((($c = data['$respond_to?'](method)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return nil
            } else {
            Opal.ret([data, "file"])
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
        if ((($a = self.$options()['$[]']("size")['$is_a?']($scope.get('Integer'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_gt(data.$size(), self.$options()['$[]']("size"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [data, "size"]}};
        return [data, nil];
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_2.$$arity = 1), nil) && 'filter';
    })($scope.base, $scope.get('AdditionalFilter'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/model_filter"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$options', '$camelize', '$to_s', '$is_a?', '$constantize', '$[]=', '$cache_constants?', '$initialize_constants!', '$nil?', '$run', '$success?', '$result', '$errors', '$!', '$respond_to?', '$new_record?']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ModelFilter(){};
      var self = $ModelFilter = $klass($base, $super, 'ModelFilter', $ModelFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      def.initialize_constants = def.name = nil;
      self.default_options = $hash2(["nils", "class", "builder", "new_records"], {"nils": false, "class": nil, "builder": nil, "new_records": false});

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(name, opts) {
        var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        TMP_1.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = null, $a).call($b, opts);
        return self.name = name;
      }, TMP_1.$$arity = -2);

      Opal.defn(self, '$initialize_constants!', TMP_2 = function() {
        var $a, $b, self = this, class_const = nil;

        ((($a = self.initialize_constants) !== false && $a !== nil && $a != null) ? $a : self.initialize_constants = (function() {class_const = ((($b = self.$options()['$[]']("class")) !== false && $b !== nil && $b != null) ? $b : self.name.$to_s().$camelize());
        if ((($b = class_const['$is_a?']($scope.get('String'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          class_const = class_const.$constantize()};
        self.$options()['$[]=']("class", class_const);
        if ((($b = self.$options()['$[]']("builder")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$options()['$[]']("builder")['$is_a?']($scope.get('String'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            self.$options()['$[]=']("builder", self.$options()['$[]']("builder").$constantize())}};
        return true;})());
        if ((($a = $scope.get('Mutations')['$cache_constants?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          if ((($a = self.$options()['$[]']("class")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$options()['$[]=']("class", self.$options()['$[]']("class").$to_s().$constantize())};
          if ((($a = self.$options()['$[]']("builder")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$options()['$[]=']("builder", self.$options()['$[]']("builder").$to_s().$constantize())
            } else {
            return nil
          };
        };
      }, TMP_2.$$arity = 0);

      return (Opal.defn(self, '$filter', TMP_3 = function $$filter(data) {
        var $a, $b, $c, self = this, ret = nil;

        self['$initialize_constants!']();
        if ((($a = data['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.$options()['$[]']("nils")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if ((($a = ($b = data['$is_a?']($scope.get('Hash')), $b !== false && $b !== nil && $b != null ?self.$options()['$[]']("builder") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ret = self.$options()['$[]']("builder").$run(data);
          if ((($a = ret['$success?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            data = ret.$result()
            } else {
            return [data, ret.$errors()]
          };};
        if ((($a = data['$is_a?'](self.$options()['$[]']("class"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($b = self.$options()['$[]']("new_records")['$!'](), $b !== false && $b !== nil && $b != null ?(($c = data['$respond_to?']("new_record?"), $c !== false && $c !== nil && $c != null ?data['$new_record?']() : $c)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [data, "new_records"]};
          return [data, nil];};
        return [data, "model"];
      }, TMP_3.$$arity = 1), nil) && 'filter';
    })($scope.base, $scope.get('InputFilter'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/outcome"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Outcome(){};
      var self = $Outcome = $klass($base, $super, 'Outcome', $Outcome);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def.success = nil;
      self.$attr_reader("result", "errors", "inputs");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(is_success, result, errors, inputs) {
        var $a, self = this;

        return $a = [is_success, result, errors, inputs], self.success = $a[0], self.result = $a[1], self.errors = $a[2], self.inputs = $a[3], $a;
      }, TMP_1.$$arity = 4);

      return (Opal.defn(self, '$success?', TMP_2 = function() {
        var self = this;

        return self.success;
      }, TMP_2.$$arity = 0), nil) && 'success?';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations/command"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$send', '$to_proc', '$input_filters', '$each', '$define_method', '$[]', '$has_key?', '$[]=', '$private', '$create_attr_methods', '$run', '$new', '$run!', '$validation_outcome', '$==', '$superclass', '$dup', '$inject', '$is_a?', '$raise', '$merge!', '$with_indifferent_access', '$filter', '$has_errors?', '$validate', '$class', '$!', '$nil?', '$execute', '$success?', '$result', '$errors', '$protected', '$attr_reader', '$tap', '$split', '$to_s', '$pop', '$to_sym', '$any?']);
  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Command(){};
      var self = $Command = $klass($base, $super, 'Command', $Command);

      var def = self.$$proto, $scope = self.$$scope, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_23, TMP_24;

      def.raw_inputs = def.errors = def.inputs = nil;
      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11;

        Opal.defn(self, '$create_attr_methods', TMP_1 = function $$create_attr_methods(meth) {
          var $a, $b, $c, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil, keys = nil;

          TMP_1.$$p = null;
          ($a = ($b = self.$input_filters()).$send, $a.$$p = block.$to_proc(), $a).call($b, meth);
          keys = self.$input_filters().$send("" + (meth) + "_keys");
          return ($a = ($c = keys).$each, $a.$$p = (TMP_2 = function(key){var self = TMP_2.$$s || this, $d, $e, TMP_3, $f, TMP_4, $g, TMP_5;
if (key == null) key = nil;
          ($d = ($e = self).$define_method, $d.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;
              if (self.inputs == null) self.inputs = nil;

            return self.inputs['$[]'](key)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $d).call($e, key);
            ($d = ($f = self).$define_method, $d.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;
              if (self.inputs == null) self.inputs = nil;

            return self.inputs['$has_key?'](key)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $d).call($f, "" + (key) + "_present?");
            return ($d = ($g = self).$define_method, $d.$$p = (TMP_5 = function(v){var self = TMP_5.$$s || this;
              if (self.inputs == null) self.inputs = nil;
if (v == null) v = nil;
            return self.inputs['$[]='](key, v)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $d).call($g, "" + (key) + "=");}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($c);
        }, TMP_1.$$arity = 1);
        self.$private("create_attr_methods");
        Opal.defn(self, '$required', TMP_6 = function $$required() {
          var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil;

          TMP_6.$$p = null;
          return ($a = ($b = self).$create_attr_methods, $a.$$p = block.$to_proc(), $a).call($b, "required");
        }, TMP_6.$$arity = 0);
        Opal.defn(self, '$optional', TMP_7 = function $$optional() {
          var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          TMP_7.$$p = null;
          return ($a = ($b = self).$create_attr_methods, $a.$$p = block.$to_proc(), $a).call($b, "optional");
        }, TMP_7.$$arity = 0);
        Opal.defn(self, '$run', TMP_8 = function $$run($a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = self).$new.apply($b, Opal.to_a(args)).$run();
        }, TMP_8.$$arity = -1);
        Opal.defn(self, '$run!', TMP_9 = function($a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = self).$new.apply($b, Opal.to_a(args))['$run!']();
        }, TMP_9.$$arity = -1);
        Opal.defn(self, '$validate', TMP_10 = function $$validate($a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = self).$new.apply($b, Opal.to_a(args)).$validation_outcome();
        }, TMP_10.$$arity = -1);
        return (Opal.defn(self, '$input_filters', TMP_11 = function $$input_filters() {
          var $a, self = this;
          if (self.input_filters == null) self.input_filters = nil;

          return ((($a = self.input_filters) !== false && $a !== nil && $a != null) ? $a : self.input_filters = (function() {if ($scope.get('Command')['$=='](self.$superclass())) {
            return $scope.get('HashFilter').$new()
            } else {
            return self.$superclass().$input_filters().$dup()
          }; return nil; })());
        }, TMP_11.$$arity = 0), nil) && 'input_filters';
      })(Opal.get_singleton_class(self));

      Opal.defn(self, '$initialize', TMP_13 = function $$initialize($a_rest) {
        var $b, $c, TMP_12, $d, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        self.raw_inputs = ($b = ($c = args).$inject, $b.$$p = (TMP_12 = function(h, arg){var self = TMP_12.$$s || this, $a;
if (h == null) h = nil;if (arg == null) arg = nil;
        if ((($a = arg['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise($scope.get('ArgumentError').$new("All arguments must be hashes"))
          };
          return h['$merge!'](arg);}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $b).call($c, $hash2([], {}).$with_indifferent_access());
        $d = self.$input_filters().$filter(self.raw_inputs), $b = Opal.to_ary($d), self.inputs = ($b[0] == null ? nil : $b[0]), self.errors = ($b[1] == null ? nil : $b[1]), $d;
        if ((($b = self['$has_errors?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return nil
          } else {
          return self.$validate()
        };
      }, TMP_13.$$arity = -1);

      Opal.defn(self, '$input_filters', TMP_14 = function $$input_filters() {
        var self = this;

        return self.$class().$input_filters();
      }, TMP_14.$$arity = 0);

      Opal.defn(self, '$has_errors?', TMP_15 = function() {
        var self = this;

        return self.errors['$nil?']()['$!']();
      }, TMP_15.$$arity = 0);

      Opal.defn(self, '$run', TMP_16 = function $$run() {
        var $a, self = this;

        if ((($a = self['$has_errors?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$validation_outcome()};
        return self.$validation_outcome(self.$execute());
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$run!', TMP_17 = function() {
        var $a, self = this, outcome = nil;

        outcome = self.$run();
        if ((($a = outcome['$success?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return outcome.$result()
          } else {
          return self.$raise($scope.get('ValidationException').$new(outcome.$errors()))
        };
      }, TMP_17.$$arity = 0);

      Opal.defn(self, '$validation_outcome', TMP_18 = function $$validation_outcome(result) {
        var $a, self = this;

        if (result == null) {
          result = nil;
        }
        return $scope.get('Outcome').$new(self['$has_errors?']()['$!'](), (function() {if ((($a = self['$has_errors?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return result
        }; return nil; })(), self.errors, self.inputs);
      }, TMP_18.$$arity = -1);

      self.$protected();

      self.$attr_reader("inputs", "raw_inputs");

      Opal.defn(self, '$validate', TMP_19 = function $$validate() {
        var self = this;

        return nil;
      }, TMP_19.$$arity = 0);

      Opal.defn(self, '$execute', TMP_20 = function $$execute() {
        var self = this;

        return nil;
      }, TMP_20.$$arity = 0);

      Opal.defn(self, '$add_error', TMP_23 = function $$add_error(key, kind, message) {
        var $a, $b, TMP_21, self = this;

        if (message == null) {
          message = nil;
        }
        if ((($a = kind['$is_a?']($scope.get('Symbol'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('ArgumentError').$new("Invalid kind"))
        };
        ((($a = self.errors) !== false && $a !== nil && $a != null) ? $a : self.errors = $scope.get('ErrorHash').$new());
        return ($a = ($b = self.errors).$tap, $a.$$p = (TMP_21 = function(errs){var self = TMP_21.$$s || this, $c, $d, TMP_22, path = nil, last = nil, inner = nil;
if (errs == null) errs = nil;
        path = key.$to_s().$split(".");
          last = path.$pop();
          inner = ($c = ($d = path).$inject, $c.$$p = (TMP_22 = function(cur_errors, part){var self = TMP_22.$$s || this, $e, $f, $g;
if (cur_errors == null) cur_errors = nil;if (part == null) part = nil;
          return ($e = part.$to_sym(), $f = cur_errors, ((($g = $f['$[]']($e)) !== false && $g !== nil && $g != null) ? $g : $f['$[]=']($e, $scope.get('ErrorHash').$new())))}, TMP_22.$$s = self, TMP_22.$$arity = 2, TMP_22), $c).call($d, errs);
          return inner['$[]='](last, $scope.get('ErrorAtom').$new(key, kind, $hash2(["message"], {"message": message})));}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $a).call($b);
      }, TMP_23.$$arity = -3);

      return (Opal.defn(self, '$merge_errors', TMP_24 = function $$merge_errors(hash) {
        var $a, self = this;

        if ((($a = hash['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ((($a = self.errors) !== false && $a !== nil && $a != null) ? $a : self.errors = $scope.get('ErrorHash').$new());
          return self.errors['$merge!'](hash);
          } else {
          return nil
        };
      }, TMP_24.$$arity = 1), nil) && 'merge_errors';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["mutations"] = function(Opal) {
  var $a, $b, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$new', '$cache_constants=']);
  self.$require("active_support/core_ext/hash/indifferent_access");
  self.$require("active_support/core_ext/string/inflections");
  self.$require("date");
  self.$require("time");
  self.$require("bigdecimal");
  self.$require("mutations/version");
  self.$require("mutations/exception");
  self.$require("mutations/errors");
  self.$require("mutations/input_filter");
  self.$require("mutations/additional_filter");
  self.$require("mutations/string_filter");
  self.$require("mutations/integer_filter");
  self.$require("mutations/float_filter");
  self.$require("mutations/boolean_filter");
  self.$require("mutations/duck_filter");
  self.$require("mutations/date_filter");
  self.$require("mutations/time_filter");
  self.$require("mutations/file_filter");
  self.$require("mutations/model_filter");
  self.$require("mutations/array_filter");
  self.$require("mutations/hash_filter");
  self.$require("mutations/outcome");
  self.$require("mutations/command");
  (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3, TMP_4;

      Opal.defn(self, '$error_message_creator', TMP_1 = function $$error_message_creator() {
        var $a, self = this;
        if (self.error_message_creator == null) self.error_message_creator = nil;

        return ((($a = self.error_message_creator) !== false && $a !== nil && $a != null) ? $a : self.error_message_creator = $scope.get('DefaultErrorMessageCreator').$new());
      }, TMP_1.$$arity = 0);
      Opal.defn(self, '$error_message_creator=', TMP_2 = function(creator) {
        var self = this;

        return self.error_message_creator = creator;
      }, TMP_2.$$arity = 1);
      Opal.defn(self, '$cache_constants=', TMP_3 = function(val) {
        var self = this;

        return self.cache_constants = val;
      }, TMP_3.$$arity = 1);
      return (Opal.defn(self, '$cache_constants?', TMP_4 = function() {
        var self = this;
        if (self.cache_constants == null) self.cache_constants = nil;

        return self.cache_constants;
      }, TMP_4.$$arity = 0), nil) && 'cache_constants?';
    })(Opal.get_singleton_class(self))
  })($scope.base);
  return (($a = [true]), $b = $scope.get('Mutations'), $b['$cache_constants='].apply($b, $a), $a[$a.length-1]);
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/filters/outbound_filter"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  return (function($base) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $OutboundFilter(){};
      var self = $OutboundFilter = $klass($base, $super, 'OutboundFilter', $OutboundFilter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.default_options = $hash2([], {});

      return (Opal.defn(self, '$filter', TMP_1 = function $$filter(data) {
        var self = this;

        return [data, "outbound"];
      }, TMP_1.$$arity = 1), nil) && 'filter';
    })($scope.base, $scope.get('AdditionalFilter'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyperloop/component/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Component(){};
      var self = $Component = $klass($base, $super, 'Component', $Component);

      var def = self.$$proto, $scope = self.$$scope;

      return Opal.cdecl($scope, 'VERSION', "0.12.3")
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/hash"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$alias_method', '$_pre_react_patch_initialize', '$to_proc']);
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    self.$alias_method("_pre_react_patch_initialize", "initialize");

    return (Opal.defn(self, '$initialize', TMP_1 = function $$initialize(defaults) {
      var $a, $b, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if ((($a = (defaults===null)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self).$_pre_react_patch_initialize, $a.$$p = block.$to_proc(), $a).call($b)
        } else {
        return ($a = ($c = self).$_pre_react_patch_initialize, $a.$$p = block.$to_proc(), $a).call($c, defaults)
      };
    }, TMP_1.$$arity = -1), nil) && 'initialize';
  })($scope.base, null)
};

/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/object/try"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$empty?', '$respond_to?', '$first', '$try!', '$to_proc', '$zero?', '$arity', '$instance_eval', '$public_send']);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$try', TMP_1 = function($a_rest) {
      var $b, $c, self = this, a, $iter = TMP_1.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      if ((($b = ((($c = a['$empty?']()) !== false && $c !== nil && $c != null) ? $c : self['$respond_to?'](a.$first()))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return ($b = ($c = self)['$try!'], $b.$$p = b.$to_proc(), $b).apply($c, Opal.to_a(a))
        } else {
        return nil
      };
    }, TMP_1.$$arity = -1);

    return (Opal.defn(self, '$try!', TMP_2 = function($a_rest) {
      var $b, $c, $d, self = this, a, $iter = TMP_2.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_2.$$p = null;
      if ((($b = ($c = a['$empty?'](), $c !== false && $c !== nil && $c != null ?(b !== nil) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = b.$arity()['$zero?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($c = self).$instance_eval, $b.$$p = b.$to_proc(), $b).call($c)
          } else {
          return Opal.yield1(b, self);
        }
        } else {
        return ($b = ($d = self).$public_send, $b.$$p = b.$to_proc(), $b).apply($d, Opal.to_a(a))
      };
    }, TMP_2.$$arity = -1), nil) && 'try!';
  })($scope.base, null);
  return (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4;

    Opal.defn(self, '$try', TMP_3 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil;
    }, TMP_3.$$arity = -1);

    return (Opal.defn(self, '$try!', TMP_4 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil;
    }, TMP_4.$$arity = -1), nil) && 'try!';
  })($scope.base, null);
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/component/tags"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$+', '$render', '$to_proc', '$each', '$define_method', '$==', '$count', '$is_a?', '$first', '$p', '$!=', '$alias_method', '$upcase', '$const_set', '$downcase', '$=~', '$include?', '$create_element', '$find_component', '$method_missing', '$find_name_and_parent', '$new', '$build_only', '$extend', '$private', '$name', '$split', '$>', '$length', '$last', '$[]', '$inject', '$const_get', '$lookup_const', '$!', '$method_defined?', '$raise', '$reverse', '$to_s', '$class', '$detect', '$const_defined?']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Tags, self = $Tags = $module($base, 'Tags');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_2, TMP_4, TMP_5, TMP_12, TMP_15;

        Opal.cdecl($scope, 'HTML_TAGS', $rb_plus(["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"], ["circle", "clipPath", "defs", "ellipse", "g", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"]));

        Opal.defn(self, '$present', TMP_1 = function $$present(component, $a_rest) {
          var $b, $c, self = this, params, $iter = TMP_1.$$p, children = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          params = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            params[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_1.$$p = null;
          return ($b = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = children.$to_proc(), $b).apply($c, [component].concat(Opal.to_a(params)));
        }, TMP_1.$$arity = -2);

        ($a = ($b = $scope.get('HTML_TAGS')).$each, $a.$$p = (TMP_2 = function(tag){var self = TMP_2.$$s || this, $c, $d, TMP_3;
if (tag == null) tag = nil;
        ($c = ($d = self).$define_method, $c.$$p = (TMP_3 = function($e_rest){var self = TMP_3.$$s || this, children, params, $f, $g, $h, $i;

            children = TMP_3.$$p || nil, TMP_3.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            params = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              params[$arg_idx - 0] = arguments[$arg_idx];
            }
          if (tag['$==']("p")) {
              if ((($f = ((($g = ((($h = children) !== false && $h !== nil && $h != null) ? $h : params.$count()['$=='](0))) !== false && $g !== nil && $g != null) ? $g : ((($h = params.$count()['$=='](1)) ? params.$first()['$is_a?']($scope.get('Hash')) : params.$count()['$=='](1))))) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                return ($f = ($g = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $f.$$p = children.$to_proc(), $f).apply($g, [tag].concat(Opal.to_a(params)))
                } else {
                return ($f = $scope.get('Kernel')).$p.apply($f, Opal.to_a(params))
              }
              } else {
              return ($h = ($i = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $h.$$p = children.$to_proc(), $h).apply($i, [tag].concat(Opal.to_a(params)))
            }}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3), $c).call($d, tag);
          if ((($c = tag['$!=']("div")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            self.$alias_method(tag.$upcase(), tag);
            return self.$const_set(tag.$upcase(), tag);
            } else {
            return self.$alias_method(tag.$upcase(), tag)
          };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);

        Opal.defs(self, '$html_tag_class_for', TMP_4 = function $$html_tag_class_for(tag) {
          var $a, $b, self = this, downcased_tag = nil;

          downcased_tag = tag.$downcase();
          if ((($a = ($b = tag['$=~'](/[A-Z]+/), $b !== false && $b !== nil && $b != null ?$scope.get('HTML_TAGS')['$include?'](downcased_tag) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Object').$const_set(tag, $scope.get('React').$create_element(downcased_tag))
            } else {
            return nil
          };
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$method_missing', TMP_5 = function $$method_missing(name, $a_rest) {
          var $b, $c, $d, self = this, params, $iter = TMP_5.$$p, children = $iter || nil, component = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          params = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            params[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_5.$$p = null;
          component = self.$find_component(name);
          if (component !== false && component !== nil && component != null) {
            return ($b = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = children.$to_proc(), $b).apply($c, [component].concat(Opal.to_a(params)))};
          return ($b = ($d = $scope.get('Object')).$method_missing, $b.$$p = children.$to_proc(), $b).apply($d, [name].concat(Opal.to_a(params)));
        }, TMP_5.$$arity = -2);

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_9, TMP_11;

          Opal.defn(self, '$included', TMP_9 = function $$included(component) {
            var $a, $b, TMP_6, self = this, name = nil, parent = nil, tag_names_module = nil;

            $b = self.$find_name_and_parent(component), $a = Opal.to_ary($b), name = ($a[0] == null ? nil : $a[0]), parent = ($a[1] == null ? nil : $a[1]), $b;
            tag_names_module = ($a = ($b = $scope.get('Module')).$new, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $c, $d, TMP_7, $e, TMP_8;

            ($c = ($d = self).$define_method, $c.$$p = (TMP_7 = function($e_rest){var self = TMP_7.$$s || this, children, params, $f, $g;

                children = TMP_7.$$p || nil, TMP_7.$$p = null;
                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                params = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  params[$arg_idx - 0] = arguments[$arg_idx];
                }
              return ($f = ($g = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $f.$$p = children.$to_proc(), $f).apply($g, [component].concat(Opal.to_a(params)))}, TMP_7.$$s = self, TMP_7.$$arity = -1, TMP_7), $c).call($d, name);
              return ($c = ($e = self).$define_method, $c.$$p = (TMP_8 = function($f_rest){var self = TMP_8.$$s || this, children, params, $g, $h;

                children = TMP_8.$$p || nil, TMP_8.$$p = null;
                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                params = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  params[$arg_idx - 0] = arguments[$arg_idx];
                }
              return ($g = ($h = (($scope.get('React')).$$scope.get('RenderingContext'))).$build_only, $g.$$p = children.$to_proc(), $g).apply($h, [component].concat(Opal.to_a(params)))}, TMP_8.$$s = self, TMP_8.$$arity = -1, TMP_8), $c).call($e, "" + (name) + "_as_node");}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b);
            return parent.$extend(tag_names_module);
          }, TMP_9.$$arity = 1);
          self.$private();
          return (Opal.defn(self, '$find_name_and_parent', TMP_11 = function $$find_name_and_parent(component) {
            var $a, $b, TMP_10, self = this, split_name = nil;

            split_name = ($a = component.$name(), $a !== false && $a !== nil && $a != null ?component.$name().$split("::") : $a);
            if ((($a = (($b = split_name !== false && split_name !== nil && split_name != null) ? $rb_gt(split_name.$length(), 1) : split_name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return [split_name.$last(), ($a = ($b = split_name).$inject, $a.$$p = (TMP_10 = function(a, e){var self = TMP_10.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
              return $rb_plus(a, [a.$last().$const_get(e)])}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $a).call($b, [$scope.get('Module')])['$[]'](-2)]
              } else {
              return nil
            };
          }, TMP_11.$$arity = 1), nil) && 'find_name_and_parent';
        })(Opal.get_singleton_class(self));

        self.$private();

        Opal.defn(self, '$find_component', TMP_12 = function $$find_component(name) {
          var $a, $b, self = this, component = nil;

          component = self.$lookup_const(name);
          if ((($a = (($b = component !== false && component !== nil && component != null) ? component['$method_defined?']("render")['$!']() : component)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$raise("" + (name) + " does not appear to be a react component.")};
          return component;
        }, TMP_12.$$arity = 1);

        Opal.defn(self, '$lookup_const', TMP_15 = function $$lookup_const(name) {
          var $a, $b, TMP_13, $c, TMP_14, self = this, scopes = nil, scope = nil;

          if ((($a = name['$=~'](/^[A-Z]/)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          scopes = ($a = ($b = self.$class().$name().$to_s().$split("::")).$inject, $a.$$p = (TMP_13 = function(nesting, next_const){var self = TMP_13.$$s || this;
if (nesting == null) nesting = nil;if (next_const == null) next_const = nil;
          return $rb_plus(nesting, [nesting.$last().$const_get(next_const)])}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13), $a).call($b, [$scope.get('Module')]).$reverse();
          scope = ($a = ($c = scopes).$detect, $a.$$p = (TMP_14 = function(s){var self = TMP_14.$$s || this;
if (s == null) s = nil;
          return s['$const_defined?'](name)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($c);
          if (scope !== false && scope !== nil && scope != null) {
            return scope.$const_get(name)
            } else {
            return nil
          };
        }, TMP_15.$$arity = 1);
      })($scope.base)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/component/base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$to_s', '$deprecation_warning', '$include']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Base(){};
        var self = $Base = $klass($base, $super, 'Base', $Base);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (Opal.defs(self, '$inherited', TMP_1 = function $$inherited(child) {
          var self = this;

          if (child.$to_s()['$==']("React::Component::HyperTestDummy")) {
            } else {
            (($scope.get('React')).$$scope.get('Component')).$deprecation_warning(child, "The class name React::Component::Base has been deprecated.  Use Hyperloop::Component instead.")
          };
          return child.$include($scope.get('ComponentNoNotice'));
        }, TMP_1.$$arity = 1), nil) && 'inherited'
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/top_level"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$+', '$create_element', '$to_proc', '$!', '$Native', '$to_n', '$raise', '$include', '$class', '$kind_of?', '$build']);
  self.$require("native");
  self.$require("active_support/core_ext/object/try");
  self.$require("react/component/tags");
  self.$require("react/component/base");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_9, TMP_12, TMP_13;

    Opal.cdecl($scope, 'ATTRIBUTES', $rb_plus(["accept", "acceptCharset", "accessKey", "action", "allowFullScreen", "allowTransparency", "alt", "async", "autoComplete", "autoPlay", "cellPadding", "cellSpacing", "charSet", "checked", "classID", "className", "cols", "colSpan", "content", "contentEditable", "contextMenu", "controls", "coords", "crossOrigin", "data", "dateTime", "defer", "dir", "disabled", "download", "draggable", "encType", "form", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "height", "hidden", "href", "hrefLang", "htmlFor", "httpEquiv", "icon", "id", "label", "lang", "list", "loop", "manifest", "marginHeight", "marginWidth", "max", "maxLength", "media", "mediaGroup", "method", "min", "multiple", "muted", "name", "noValidate", "open", "pattern", "placeholder", "poster", "preload", "radioGroup", "readOnly", "rel", "required", "role", "rows", "rowSpan", "sandbox", "scope", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "spellCheck", "src", "srcDoc", "srcSet", "start", "step", "style", "tabIndex", "target", "title", "type", "useMap", "value", "width", "wmode", "dangerouslySetInnerHTML"], ["clipPath", "cx", "cy", "d", "dx", "dy", "fill", "fillOpacity", "fontFamily", "fontSize", "fx", "fy", "gradientTransform", "gradientUnits", "markerEnd", "markerMid", "markerStart", "offset", "opacity", "patternContentUnits", "patternUnits", "points", "preserveAspectRatio", "r", "rx", "ry", "spreadMethod", "stopColor", "stopOpacity", "stroke", "strokeDasharray", "strokeLinecap", "strokeOpacity", "strokeWidth", "textAnchor", "transform", "version", "viewBox", "x1", "x2", "x", "xlinkActuate", "xlinkArcrole", "xlinkHref", "xlinkRole", "xlinkShow", "xlinkTitle", "xlinkType", "xmlBase", "xmlLang", "xmlSpace", "y1", "y2", "y"]));

    Opal.cdecl($scope, 'HASH_ATTRIBUTES', ["data", "aria"]);

    Opal.cdecl($scope, 'HTML_TAGS', (((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Tags'))).$$scope.get('HTML_TAGS')));

    Opal.defs(self, '$html_tag?', TMP_1 = function(name) {
      var self = this, tags = nil;

      tags = $scope.get('HTML_TAGS');
      
      for(var i = 0; i < tags.length; i++) {
        if(tags[i] === name)
          return true;
      }
      return false;
    
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$html_attr?', TMP_2 = function(name) {
      var self = this, attrs = nil;

      attrs = $scope.get('ATTRIBUTES');
      
      for(var i = 0; i < attrs.length; i++) {
        if(attrs[i] === name)
          return true;
      }
      return false;
    
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$create_element', TMP_3 = function $$create_element(type, properties) {
      var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

      if (properties == null) {
        properties = $hash2([], {});
      }
      TMP_3.$$p = null;
      return ($a = ($b = (($scope.get('React')).$$scope.get('API'))).$create_element, $a.$$p = block.$to_proc(), $a).call($b, type, properties);
    }, TMP_3.$$arity = -2);

    Opal.defs(self, '$render', TMP_4 = function $$render(element, container) {
      var $a, self = this, $iter = TMP_4.$$p, $yield = $iter || nil, component = nil;

      TMP_4.$$p = null;
      
        console.error(
          "Warning: Using deprecated behavior of `React.render`,",
          "require \"react/top_level_render\" to get the correct behavior."
        );
    
      container = container.$$class ? container[0] : container;
      if ((($a = ((typeof ReactDOM === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        component = self.$Native(ReactDOM.render(element.$to_n(), container, function(){(function() {if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
          } else {
          return nil
        }; return nil; })()}))
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        component = self.$Native(React.render(element.$to_n(), container, function(){(function() {if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
          } else {
          return nil
        }; return nil; })()}))
        } else {
        self.$raise("render is not defined.  In React >= v15 you must import it with ReactDOM")
      };
      component.$class().$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('API')));
      return component;
    }, TMP_4.$$arity = 2);

    Opal.defs(self, '$is_valid_element', TMP_5 = function $$is_valid_element(element) {
      var $a, self = this;

       console.error("Warning: `is_valid_element` is deprecated in favor of `is_valid_element?`."); 
      return ($a = element['$kind_of?']((($scope.get('React')).$$scope.get('Element'))), $a !== false && $a !== nil && $a != null ?React.isValidElement(element.$to_n()) : $a);
    }, TMP_5.$$arity = 1);

    Opal.defs(self, '$is_valid_element?', TMP_6 = function(element) {
      var $a, self = this;

      return ($a = element['$kind_of?']((($scope.get('React')).$$scope.get('Element'))), $a !== false && $a !== nil && $a != null ?React.isValidElement(element.$to_n()) : $a);
    }, TMP_6.$$arity = 1);

    Opal.defs(self, '$render_to_string', TMP_9 = function $$render_to_string(element) {
      var $a, $b, TMP_7, $c, TMP_8, self = this;

       console.error("Warning: `React.render_to_string` is deprecated in favor of `React::Server.render_to_string`."); 
      if ((($a = ((typeof ReactDOMServer === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

        return ReactDOMServer.renderToString(element.$to_n());}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b)
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

        return React.renderToString(element.$to_n());}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($c)
        } else {
        return self.$raise("renderToString is not defined.  In React >= v15 you must import it with ReactDOMServer")
      };
    }, TMP_9.$$arity = 1);

    Opal.defs(self, '$render_to_static_markup', TMP_12 = function $$render_to_static_markup(element) {
      var $a, $b, TMP_10, $c, TMP_11, self = this;

       console.error("Warning: `React.render_to_static_markup` is deprecated in favor of `React::Server.render_to_static_markup`."); 
      if ((($a = ((typeof ReactDOMServer === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

        return ReactDOMServer.renderToStaticMarkup(element.$to_n());}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($b)
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

        return React.renderToStaticMarkup(element.$to_n());}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($c)
        } else {
        return self.$raise("renderToStaticMarkup is not defined.  In React >= v15 you must import it with ReactDOMServer")
      };
    }, TMP_12.$$arity = 1);

    Opal.defs(self, '$unmount_component_at_node', TMP_13 = function $$unmount_component_at_node(node) {
      var $a, self = this;

      if ((($a = ((typeof ReactDOM === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ReactDOM.unmountComponentAtNode(node.$$class ? node[0] : node);
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return React.unmountComponentAtNode(node.$$class ? node[0] : node);
        } else {
        return self.$raise("unmountComponentAtNode is not defined.  In React >= v15 you must import it with ReactDOM")
      };
    }, TMP_13.$$arity = 1);
  })($scope.base);
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/observable"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$tap', '$call', '$send', '$to_proc', '$include?', '$respond_to?', '$lambda']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Observable(){};
      var self = $Observable = $klass($base, $super, 'Observable', $Observable);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_7;

      def.value = def.on_change = nil;
      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(value, on_change) {
        var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        if (on_change == null) {
          on_change = nil;
        }
        TMP_1.$$p = null;
        self.value = value;
        return self.on_change = ((($a = on_change) !== false && $a !== nil && $a != null) ? $a : block);
      }, TMP_1.$$arity = -2);

      Opal.defn(self, '$method_missing', TMP_2 = function $$method_missing(method_sym, $a_rest) {
        var $b, $c, TMP_3, $d, $e, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_2.$$p = null;
        return ($b = ($c = ($d = ($e = self.value).$send, $d.$$p = block.$to_proc(), $d).apply($e, [method_sym].concat(Opal.to_a(args)))).$tap, $b.$$p = (TMP_3 = function(result){var self = TMP_3.$$s || this;
          if (self.on_change == null) self.on_change = nil;
          if (self.value == null) self.value = nil;
if (result == null) result = nil;
        return self.on_change.$call(self.value)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $b).call($c);
      }, TMP_2.$$arity = -2);

      Opal.defn(self, '$respond_to?', TMP_4 = function(method, $a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ((($b = ["call", "to_proc"]['$include?'](method)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return true
          } else {
          return ($b = self.value)['$respond_to?'].apply($b, [method].concat(Opal.to_a(args)))
        };
      }, TMP_4.$$arity = -2);

      Opal.defn(self, '$call', TMP_5 = function $$call(new_value) {
        var self = this;

        self.on_change.$call(new_value);
        return self.value = new_value;
      }, TMP_5.$$arity = 1);

      return (Opal.defn(self, '$to_proc', TMP_7 = function $$to_proc() {
        var $a, $b, TMP_6, self = this;

        return ($a = ($b = self).$lambda, $a.$$p = (TMP_6 = function(arg){var self = TMP_6.$$s || this;
          if (self.value == null) self.value = nil;
          if (self.on_change == null) self.on_change = nil;

          if (arg == null) {
            arg = self.value;
          }
        return self.on_change.$call(arg)}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6), $a).call($b);
      }, TMP_7.$$arity = 0), nil) && 'to_proc';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/validator"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$private', '$new', '$build', '$to_proc', '$instance_eval', '$[]=', '$define_rule', '$allow_undefined_props=', '$reject', '$[]', '$rules', '$errors=', '$allow_undefined_props?', '$validate_undefined', '$coerce_native_hash_values', '$defined_props', '$validate_required', '$each', '$validate_types', '$validate_allowed', '$errors', '$inject', '$select', '$include?', '$keys', '$!', '$define_param', '$props_wrapper', '$is_a?', '$type_check', '$>', '$length', '$validate_value_array', '$nil?', '$respond_to?', '$_react_param_conversion', '$<<', '$-', '$each_with_index', '$Native']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Validator(){};
      var self = $Validator = $klass($base, $super, 'Validator', $Validator);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_10, TMP_13, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_24, TMP_26, TMP_28, TMP_30;

      def.allow_undefined_props = def.rules = def.errors = nil;
      self.$attr_accessor("errors");

      self.$attr_reader("props_wrapper");

      self.$private("errors", "props_wrapper");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(props_wrapper) {
        var self = this;

        if (props_wrapper == null) {
          props_wrapper = $scope.get('Class').$new((($scope.get('Component')).$$scope.get('PropsWrapper')));
        }
        return self.props_wrapper = props_wrapper;
      }, TMP_1.$$arity = -1);

      Opal.defs(self, '$build', TMP_2 = function $$build() {
        var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        return ($a = ($b = self.$new()).$build, $a.$$p = block.$to_proc(), $a).call($b);
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$build', TMP_3 = function $$build() {
        var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        TMP_3.$$p = null;
        ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
        return self;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$requires', TMP_4 = function $$requires(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        options['$[]=']("required", true);
        return self.$define_rule(name, options);
      }, TMP_4.$$arity = -2);

      Opal.defn(self, '$optional', TMP_5 = function $$optional(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        options['$[]=']("required", false);
        return self.$define_rule(name, options);
      }, TMP_5.$$arity = -2);

      Opal.defn(self, '$allow_undefined_props=', TMP_6 = function(allow) {
        var self = this;

        return self.allow_undefined_props = allow;
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$undefined_props', TMP_8 = function $$undefined_props(props) {
        var $a, $b, TMP_7, self = this;

        (($a = [true]), $b = self, $b['$allow_undefined_props='].apply($b, $a), $a[$a.length-1]);
        return ($a = ($b = props).$reject, $a.$$p = (TMP_7 = function(name, value){var self = TMP_7.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
        return self.$rules()['$[]'](name)}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7), $a).call($b);
      }, TMP_8.$$arity = 1);

      Opal.defn(self, '$validate', TMP_10 = function $$validate(props) {
        var $a, $b, TMP_9, self = this;

        (($a = [[]]), $b = self, $b['$errors='].apply($b, $a), $a[$a.length-1]);
        if ((($a = self['$allow_undefined_props?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$validate_undefined(props)
        };
        props = self.$coerce_native_hash_values(self.$defined_props(props));
        self.$validate_required(props);
        ($a = ($b = props).$each, $a.$$p = (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
        self.$validate_types(name, value);
          return self.$validate_allowed(name, value);}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $a).call($b);
        return self.$errors();
      }, TMP_10.$$arity = 1);

      Opal.defn(self, '$default_props', TMP_13 = function $$default_props() {
        var $a, $b, TMP_11, $c, $d, TMP_12, self = this;

        return ($a = ($b = ($c = ($d = self.$rules()).$select, $c.$$p = (TMP_12 = function(key, value){var self = TMP_12.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return value.$keys()['$include?']("default")}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $c).call($d)).$inject, $a.$$p = (TMP_11 = function(memo, $c){var self = TMP_11.$$s || this, $c_args, k, v;

          if ($c == null) {
            $c = nil;
          }
          $c = Opal.to_ary($c);
          $c_args = Opal.slice.call($c, 0, $c.length);
          k = $c_args.splice(0,1)[0];
          if (k == null) {
            k = nil;
          }
          v = $c_args.splice(0,1)[0];
          if (v == null) {
            v = nil;
          }if (memo == null) memo = nil;
        memo['$[]='](k, v['$[]']("default"));
          return memo;}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11.$$has_top_level_mlhs_arg = true, TMP_11), $a).call($b, $hash2([], {}));
      }, TMP_13.$$arity = 0);

      self.$private();

      Opal.defn(self, '$defined_props', TMP_15 = function $$defined_props(props) {
        var $a, $b, TMP_14, self = this;

        return ($a = ($b = props).$select, $a.$$p = (TMP_14 = function(name){var self = TMP_14.$$s || this;
if (name == null) name = nil;
        return self.$rules().$keys()['$include?'](name)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
      }, TMP_15.$$arity = 1);

      Opal.defn(self, '$allow_undefined_props?', TMP_16 = function() {
        var self = this;

        return self.allow_undefined_props['$!']()['$!']();
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$rules', TMP_17 = function $$rules() {
        var $a, self = this;

        return ((($a = self.rules) !== false && $a !== nil && $a != null) ? $a : self.rules = $hash2(["children"], {"children": $hash2(["required"], {"required": false})}));
      }, TMP_17.$$arity = 0);

      Opal.defn(self, '$define_rule', TMP_18 = function $$define_rule(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        self.$rules()['$[]='](name, self.$coerce_native_hash_values(options));
        return self.$props_wrapper().$define_param(name, options['$[]']("type"));
      }, TMP_18.$$arity = -2);

      Opal.defn(self, '$errors', TMP_19 = function $$errors() {
        var $a, self = this;

        return ((($a = self.errors) !== false && $a !== nil && $a != null) ? $a : self.errors = []);
      }, TMP_19.$$arity = 0);

      Opal.defn(self, '$validate_types', TMP_20 = function $$validate_types(prop_name, value) {
        var $a, self = this, klass = nil, allow_nil = nil;

        if ((($a = klass = self.$rules()['$[]'](prop_name)['$[]']("type")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if ((($a = klass['$is_a?']($scope.get('Array'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
          return self.$type_check("`" + (prop_name) + "`", value, klass, allow_nil);
        } else if ((($a = $rb_gt(klass.$length(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$validate_value_array(prop_name, value)
          } else {
          allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
          return self.$type_check("`" + (prop_name) + "`", value, $scope.get('Array'), allow_nil);
        };
      }, TMP_20.$$arity = 2);

      Opal.defn(self, '$type_check', TMP_21 = function $$type_check(prop_name, value, klass, allow_nil) {
        var $a, $b, self = this;

        if ((($a = (($b = allow_nil !== false && allow_nil !== nil && allow_nil != null) ? value['$nil?']() : allow_nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        if ((($a = value['$is_a?'](klass)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        if ((($a = ($b = klass['$respond_to?']("_react_param_conversion"), $b !== false && $b !== nil && $b != null ?klass.$_react_param_conversion(value, "validate_only") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.$errors()['$<<']("Provided prop " + (prop_name) + " could not be converted to " + (klass));
      }, TMP_21.$$arity = 4);

      Opal.defn(self, '$validate_allowed', TMP_22 = function $$validate_allowed(prop_name, value) {
        var $a, self = this, values = nil;

        if ((($a = values = self.$rules()['$[]'](prop_name)['$[]']("values")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if ((($a = values['$include?'](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.$errors()['$<<']("Value `" + (value) + "` for prop `" + (prop_name) + "` is not an allowed value");
      }, TMP_22.$$arity = 2);

      Opal.defn(self, '$validate_required', TMP_24 = function $$validate_required(props) {
        var $a, $b, TMP_23, self = this;

        return ($a = ($b = ($rb_minus(self.$rules().$keys(), props.$keys()))).$each, $a.$$p = (TMP_23 = function(name){var self = TMP_23.$$s || this, $c;
if (name == null) name = nil;
        if ((($c = self.$rules()['$[]'](name)['$[]']("required")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            return nil;
          };
          return self.$errors()['$<<']("Required prop `" + (name) + "` was not specified");}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b);
      }, TMP_24.$$arity = 1);

      Opal.defn(self, '$validate_undefined', TMP_26 = function $$validate_undefined(props) {
        var $a, $b, TMP_25, self = this;

        return ($a = ($b = ($rb_minus(props.$keys(), self.$rules().$keys()))).$each, $a.$$p = (TMP_25 = function(prop_name){var self = TMP_25.$$s || this;
if (prop_name == null) prop_name = nil;
        return self.$errors()['$<<']("Provided prop `" + (prop_name) + "` not specified in spec")}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($b);
      }, TMP_26.$$arity = 1);

      Opal.defn(self, '$validate_value_array', TMP_28 = function $$validate_value_array(name, value) {
        var $a, $b, TMP_27, self = this, klass = nil, allow_nil = nil;

        try {
          klass = self.$rules()['$[]'](name)['$[]']("type");
          allow_nil = self.$rules()['$[]'](name)['$[]']("allow_nil")['$!']()['$!']();
          return ($a = ($b = value).$each_with_index, $a.$$p = (TMP_27 = function(item, index){var self = TMP_27.$$s || this;
if (item == null) item = nil;if (index == null) index = nil;
          return self.$type_check("`" + (name) + "`[" + (index) + "]", self.$Native(item), klass['$[]'](0), allow_nil)}, TMP_27.$$s = self, TMP_27.$$arity = 2, TMP_27), $a).call($b);
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('NoMethodError')])) {
            try {
              return self.$errors()['$<<']("Provided prop `" + (name) + "` was not an Array")
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_28.$$arity = 2);

      return (Opal.defn(self, '$coerce_native_hash_values', TMP_30 = function $$coerce_native_hash_values(hash) {
        var $a, $b, TMP_29, self = this;

        return ($a = ($b = hash).$each, $a.$$p = (TMP_29 = function(key, value){var self = TMP_29.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return hash['$[]='](key, self.$Native(value))}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29), $a).call($b);
      }, TMP_30.$$arity = 1), nil) && 'coerce_native_hash_values';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/ext/string"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (Opal.defn(self, '$event_camelize', TMP_1 = function $$event_camelize() {
      var self = this;

      return self.replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = true;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    });
    }, TMP_1.$$arity = 0), nil) && 'event_camelize'
  })($scope.base, null)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/ext/hash"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$map']);
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    return (Opal.defn(self, '$shallow_to_n', TMP_2 = function $$shallow_to_n() {
      var $a, $b, TMP_1, self = this, hash = nil;

      hash = {};
      ($a = ($b = self).$map, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
      return hash[key] = value;}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b);
      return hash;
    }, TMP_2.$$arity = 0), nil) && 'shallow_to_n'
  })($scope.base, null)
};

/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/kernel/singleton_class"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$class_eval', '$to_proc', '$singleton_class']);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$class_eval', TMP_1 = function $$class_eval($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_1.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      return ($b = ($c = self.$singleton_class()).$class_eval, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
    }, TMP_1.$$arity = -1)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/module/remove_method"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$method_defined?', '$private_method_defined?', '$undef_method', '$remove_possible_method', '$define_method', '$to_proc']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$remove_possible_method', TMP_1 = function $$remove_possible_method(method) {
      var $a, $b, self = this;

      if ((($a = ((($b = self['$method_defined?'](method)) !== false && $b !== nil && $b != null) ? $b : self['$private_method_defined?'](method))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$undef_method(method)
        } else {
        return nil
      };
    }, TMP_1.$$arity = 1);

    return (Opal.defn(self, '$redefine_method', TMP_2 = function $$redefine_method(method) {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      self.$remove_possible_method(method);
      return ($a = ($b = self).$define_method, $a.$$p = block.$to_proc(), $a).call($b, method);
    }, TMP_2.$$arity = 1), nil) && 'redefine_method';
  })($scope.base, null)
};

/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/array/extract_options"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_of?', '$is_a?', '$last', '$extractable_options?', '$pop']);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (Opal.defn(self, '$extractable_options?', TMP_1 = function() {
      var self = this;

      return self['$instance_of?']($scope.get('Hash'));
    }, TMP_1.$$arity = 0), nil) && 'extractable_options?'
  })($scope.base, null);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    return (Opal.defn(self, '$extract_options!', TMP_2 = function() {
      var $a, $b, self = this;

      if ((($a = ($b = self.$last()['$is_a?']($scope.get('Hash')), $b !== false && $b !== nil && $b != null ?self.$last()['$extractable_options?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$pop()
        } else {
        return $hash2([], {})
      };
    }, TMP_2.$$arity = 0), nil) && 'extract_options!'
  })($scope.base, null);
};

/* Generated by Opal 0.10.3 */
Opal.modules["active_support/core_ext/class/attribute"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$extract_options!', '$fetch', '$each', '$define_singleton_method', '$!', '$public_send', '$class_eval', '$remove_possible_method', '$define_method', '$singleton_class', '$singleton_class?', '$instance_variable_defined?', '$instance_variable_get', '$send', '$class', '$attr_writer', '$private', '$respond_to?', '$!=', '$first', '$ancestors']);
  self.$require("active_support/core_ext/kernel/singleton_class");
  self.$require("active_support/core_ext/module/remove_method");
  self.$require("active_support/core_ext/array/extract_options");
  return (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, TMP_11, $a, TMP_12;

    Opal.defn(self, '$class_attribute', TMP_11 = function $$class_attribute($a_rest) {
      var $b, $c, TMP_1, self = this, attrs, options = nil, instance_reader = nil, instance_writer = nil, instance_predicate = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      attrs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        attrs[$arg_idx - 0] = arguments[$arg_idx];
      }
      options = attrs['$extract_options!']();
      instance_reader = ($b = options.$fetch("instance_accessor", true), $b !== false && $b !== nil && $b != null ?options.$fetch("instance_reader", true) : $b);
      instance_writer = ($b = options.$fetch("instance_accessor", true), $b !== false && $b !== nil && $b != null ?options.$fetch("instance_writer", true) : $b);
      instance_predicate = options.$fetch("instance_predicate", true);
      return ($b = ($c = attrs).$each, $b.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $d, TMP_2, $e, TMP_3, $f, TMP_4, $g, TMP_9, $h, TMP_10, ivar = nil;
if (name == null) name = nil;
      ($a = ($d = self).$define_singleton_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($d, name);
        if (instance_predicate !== false && instance_predicate !== nil && instance_predicate != null) {
          ($a = ($e = self).$define_singleton_method, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$public_send(name)['$!']()['$!']()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($e, "" + (name) + "?")};
        ivar = "@" + (name);
        ($a = ($f = self).$define_singleton_method, $a.$$p = (TMP_4 = function(val){var self = TMP_4.$$s || this, $g, $h, TMP_5, $i, TMP_7;
if (val == null) val = nil;
        ($g = ($h = self.$singleton_class()).$class_eval, $g.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $i, $j, TMP_6;

          self.$remove_possible_method(name);
            return ($i = ($j = self).$define_method, $i.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return val}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $i).call($j, name);}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $g).call($h);
          if ((($g = self['$singleton_class?']()) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
            ($g = ($i = self).$class_eval, $g.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $j, $k, TMP_8;

            self.$remove_possible_method(name);
              return ($j = ($k = self).$define_method, $j.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $l;

              if ((($l = self['$instance_variable_defined?'](ivar)) !== nil && $l != null && (!$l.$$is_boolean || $l == true))) {
                  return self.$instance_variable_get(ivar)
                  } else {
                  return self.$singleton_class().$send(name)
                }}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $j).call($k, name);}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $g).call($i)};
          return val;}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($f, "" + (name) + "=");
        if (instance_reader !== false && instance_reader !== nil && instance_reader != null) {
          self.$remove_possible_method(name);
          ($a = ($g = self).$define_method, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $h;

          if ((($h = self['$instance_variable_defined?'](ivar)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
              return self.$instance_variable_get(ivar)
              } else {
              return self.$class().$public_send(name)
            }}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($g, name);
          if (instance_predicate !== false && instance_predicate !== nil && instance_predicate != null) {
            ($a = ($h = self).$define_method, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.$public_send(name)['$!']()['$!']()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($h, "" + (name) + "?")};};
        if (instance_writer !== false && instance_writer !== nil && instance_writer != null) {
          return self.$attr_writer(name)
          } else {
          return nil
        };}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $b).call($c);
    }, TMP_11.$$arity = -1);

    self.$private();

    if ((($a = self['$respond_to?']("singleton_class?")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return (Opal.defn(self, '$singleton_class?', TMP_12 = function() {
        var $a, self = this;

        return ((($a = true) !== false && $a !== nil && $a != null) ? $a : self.$ancestors().$first()['$!='](self));
      }, TMP_12.$$arity = 0), nil) && 'singleton_class?'
    };
  })($scope.base, null);
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/callbacks"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$extend', '$each', '$is_a?', '$instance_exec', '$to_proc', '$send', '$callbacks_for', '$class', '$class_attribute', '$define_singleton_method', '$concat', '$push', '$+', '$respond_to?', '$superclass']);
  self.$require("active_support/core_ext/class/attribute");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Callbacks, self = $Callbacks = $module($base, 'Callbacks');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3;

      Opal.defs(self, '$included', TMP_1 = function $$included(base) {
        var self = this;

        return base.$extend($scope.get('ClassMethods'));
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$run_callback', TMP_3 = function $$run_callback(name, $a_rest) {
        var $b, $c, TMP_2, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        return ($b = ($c = self.$class().$callbacks_for(name)).$each, $b.$$p = (TMP_2 = function(callback){var self = TMP_2.$$s || this, $a, $d;
if (callback == null) callback = nil;
        if ((($a = callback['$is_a?']($scope.get('Proc'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($d = self).$instance_exec, $a.$$p = callback.$to_proc(), $a).apply($d, Opal.to_a(args))
            } else {
            return ($a = self).$send.apply($a, [callback].concat(Opal.to_a(args)))
          }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $b).call($c);
      }, TMP_3.$$arity = -2);

      (function($base) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_5, TMP_6;

        Opal.defn(self, '$define_callback', TMP_5 = function $$define_callback(callback_name) {
          var $a, $b, TMP_4, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, attribute_name = nil;

          TMP_5.$$p = null;
          attribute_name = "_" + (callback_name) + "_callbacks";
          self.$class_attribute(attribute_name);
          self.$send("" + (attribute_name) + "=", []);
          return ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_4 = function($c_rest){var self = TMP_4.$$s || this, block, args, callbacks = nil;

            block = TMP_4.$$p || nil, TMP_4.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          callbacks = self.$send(attribute_name);
            callbacks.$concat(args);
            if ((block !== nil)) {
              callbacks.$push(block)};
            return self.$send("" + (attribute_name) + "=", callbacks);}, TMP_4.$$s = self, TMP_4.$$arity = -1, TMP_4), $a).call($b, callback_name);
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$callbacks_for', TMP_6 = function $$callbacks_for(callback_name) {
          var $a, self = this, attribute_name = nil;

          attribute_name = "_" + (callback_name) + "_callbacks";
          return $rb_plus((function() {if ((($a = self.$superclass()['$respond_to?']("callbacks_for")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$superclass().$callbacks_for(callback_name)
            } else {
            return []
          }; return nil; })(), self.$send(attribute_name));
        }, TMP_6.$$arity = 1);
      })($scope.base);
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/rendering_context"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor', '$!', '$remove_nodes_from_args', '$build', '$waiting_on_resources', '$waiting_on_resources=', '$run_child_block', '$to_proc', '$nil?', '$dup', '$tap', '$detect', '$respond_to?', '$is_a?', '$last', '$create_element', '$span', '$to_s', '$<<', '$delete', '$include?', '$[]=', '$index', '$[]', '$each', '$as_node', '$try', '$empty?', '$!=', '$raise_render_error', '$==', '$count', '$improper_render', '$>', '$class', '$raise', '$define_method', '$unshift', '$send', '$render']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $RenderingContext(){};
      var self = $RenderingContext = $klass($base, $super, 'RenderingContext', $RenderingContext);

      var def = self.$$proto, $scope = self.$$scope;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_8, TMP_9, TMP_10, TMP_11, TMP_13, TMP_14, TMP_15, TMP_16;

        self.$attr_accessor("waiting_on_resources");
        Opal.defn(self, '$render', TMP_1 = function $$render(name, $a_rest) {
          var $b, $c, TMP_2, $d, $e, self = this, args, $iter = TMP_1.$$p, block = $iter || nil, was_outer_most = nil, element = nil;
          if (self.not_outer_most == null) self.not_outer_most = nil;
          if (self.buffer == null) self.buffer = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_1.$$p = null;
          try {
          was_outer_most = self.not_outer_most['$!']();
          self.not_outer_most = true;
          self.$remove_nodes_from_args(args);
          if ((($b = self.buffer) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            ((($b = self.buffer) !== false && $b !== nil && $b != null) ? $b : self.buffer = [])
          };
          if (block !== false && block !== nil && block != null) {
            element = ($b = ($c = self).$build, $b.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $d, $e, TMP_3, $f, $g, TMP_5, TMP_6, $h, TMP_7, saved_waiting_on_resources = nil, buffer = nil;
              if (self.buffer == null) self.buffer = nil;

            saved_waiting_on_resources = self.$waiting_on_resources();
              (($a = [nil]), $d = self, $d['$waiting_on_resources='].apply($d, $a), $a[$a.length-1]);
              ($a = ($d = self).$run_child_block, $a.$$p = block.$to_proc(), $a).call($d, name['$nil?']());
              if (name !== false && name !== nil && name != null) {
                buffer = self.buffer.$dup();
                return ($a = ($e = ($f = ($g = $scope.get('React')).$create_element, $f.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

                return buffer}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $f).apply($g, [name].concat(Opal.to_a(args)))).$tap, $a.$$p = (TMP_3 = function(element){var self = TMP_3.$$s || this, $f, $g, $h, $i, $j, TMP_4;
if (element == null) element = nil;
                (($f = [((($h = saved_waiting_on_resources) !== false && $h !== nil && $h != null) ? $h : ($i = ($j = buffer).$detect, $i.$$p = (TMP_4 = function(e){var self = TMP_4.$$s || this, $k;
if (e == null) e = nil;
                  if ((($k = e['$respond_to?']("waiting_on_resources")) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
                      return e.$waiting_on_resources()
                      } else {
                      return nil
                    }}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $i).call($j)['$!']()['$!']())]), $g = element, $g['$waiting_on_resources='].apply($g, $f), $f[$f.length-1]);
                  return ($f = element, ((($g = $f.$waiting_on_resources()) !== false && $g !== nil && $g != null) ? $g : $f['$waiting_on_resources='](($h = buffer.$last()['$is_a?']($scope.get('String')), $h !== false && $h !== nil && $h != null ?self.$waiting_on_resources() : $h))));}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($e);
              } else if ((($a = self.buffer.$last()['$is_a?']((($scope.get('React')).$$scope.get('Element')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($f = self.buffer.$last()).$tap, $a.$$p = (TMP_6 = function(element){var self = TMP_6.$$s || this, $h, $i;
if (element == null) element = nil;
                return ($h = element, ((($i = $h.$waiting_on_resources()) !== false && $i !== nil && $i != null) ? $i : $h['$waiting_on_resources='](saved_waiting_on_resources)))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($f)
                } else {
                return ($a = ($h = self.buffer.$last().$to_s().$span()).$tap, $a.$$p = (TMP_7 = function(element){var self = TMP_7.$$s || this, $i, $j;
if (element == null) element = nil;
                return (($i = [saved_waiting_on_resources]), $j = element, $j['$waiting_on_resources='].apply($j, $i), $i[$i.length-1])}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($h)
              };}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $b).call($c)
          } else if ((($b = name['$is_a?']((($scope.get('React')).$$scope.get('Element')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            element = name
            } else {
            element = ($b = $scope.get('React')).$create_element.apply($b, [name].concat(Opal.to_a(args)));
            (($d = [self.$waiting_on_resources()]), $e = element, $e['$waiting_on_resources='].apply($e, $d), $d[$d.length-1]);
          };
          self.buffer['$<<'](element);
          (($d = [nil]), $e = self, $e['$waiting_on_resources='].apply($e, $d), $d[$d.length-1]);
          return element;
          } finally {
            if (was_outer_most !== false && was_outer_most !== nil && was_outer_most != null) {
              self.not_outer_most = self.buffer = nil}
          };
        }, TMP_1.$$arity = -2);
        Opal.defn(self, '$build', TMP_8 = function $$build() {
          var self = this, $iter = TMP_8.$$p, $yield = $iter || nil, current = nil, return_val = nil;
          if (self.buffer == null) self.buffer = nil;

          TMP_8.$$p = null;
          current = self.buffer;
          self.buffer = [];
          return_val = Opal.yield1($yield, self.buffer);
          self.buffer = current;
          return return_val;
        }, TMP_8.$$arity = 0);
        Opal.defn(self, '$as_node', TMP_9 = function $$as_node(element) {
          var self = this;
          if (self.buffer == null) self.buffer = nil;

          self.buffer.$delete(element);
          return element;
        }, TMP_9.$$arity = 1);
        Opal.alias(self, 'delete', 'as_node');
        Opal.defn(self, '$rendered?', TMP_10 = function(element) {
          var self = this;
          if (self.buffer == null) self.buffer = nil;

          return self.buffer['$include?'](element);
        }, TMP_10.$$arity = 1);
        Opal.defn(self, '$replace', TMP_11 = function $$replace(e1, e2) {
          var self = this;
          if (self.buffer == null) self.buffer = nil;

          return self.buffer['$[]='](self.buffer.$index(e1), e2);
        }, TMP_11.$$arity = 2);
        Opal.defn(self, '$remove_nodes_from_args', TMP_13 = function $$remove_nodes_from_args(args) {
          var $a, $b, TMP_12, self = this;

          if ((($a = ($b = args['$[]'](0), $b !== false && $b !== nil && $b != null ?args['$[]'](0)['$is_a?']($scope.get('Hash')) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = args['$[]'](0)).$each, $a.$$p = (TMP_12 = function(key, value){var self = TMP_12.$$s || this, $c;
if (key == null) key = nil;if (value == null) value = nil;
            try {
                if ((($c = value['$is_a?']($scope.get('Element'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  return value.$as_node()
                  } else {
                  return nil
                }
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {
                  try {
                    return nil
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $a).call($b)
            } else {
            return nil
          };
        }, TMP_13.$$arity = 1);
        Opal.defn(self, '$run_child_block', TMP_14 = function $$run_child_block(is_outer_scope) {
          var $a, $b, $c, self = this, $iter = TMP_14.$$p, $yield = $iter || nil, result = nil;
          if (self.buffer == null) self.buffer = nil;

          TMP_14.$$p = null;
          result = Opal.yieldX($yield, []);
          if ((($a = result.$try(((($b = "acts_as_string?") !== false && $b !== nil && $b != null) ? $b : result['$is_a?']($scope.get('String'))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result = result.$to_s().$span()};
          if ((($a = ((($b = result['$is_a?']($scope.get('String'))) !== false && $b !== nil && $b != null) ? $b : (($c = result['$is_a?']((($scope.get('React')).$$scope.get('Element'))), $c !== false && $c !== nil && $c != null ?self.buffer['$empty?']() : $c)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.buffer['$<<'](result)};
          if ((($a = (($b = is_outer_scope !== false && is_outer_scope !== nil && is_outer_scope != null) ? self.buffer['$!=']([result]) : is_outer_scope)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$raise_render_error(result)
            } else {
            return nil
          };
        }, TMP_14.$$arity = 1);
        Opal.defn(self, '$raise_render_error', TMP_15 = function $$raise_render_error(result) {
          var $a, self = this;
          if (self.buffer == null) self.buffer = nil;

          if (self.buffer.$count()['$=='](1)) {
            self.$improper_render("A different element was returned than was generated within the DSL.", "Possibly improper use of Element#delete.")};
          if ((($a = $rb_gt(self.buffer.$count(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$improper_render("Instead " + (self.buffer.$count()) + " elements were generated.", "Do you want to wrap your elements in a div?")};
          if ((($a = result.$try("reactrb_component?")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$improper_render("Instead the component " + (result) + " was returned.", "Did you mean " + (result) + "()?")};
          return self.$improper_render("Instead the " + (result.$class()) + " " + (result) + " was returned.", "You may need to convert this to a string.");
        }, TMP_15.$$arity = 1);
        return (Opal.defn(self, '$improper_render', TMP_16 = function $$improper_render(message, solution) {
          var self = this;

          return self.$raise("a component's render method must generate and return exactly 1 element or a string.\n" + ("    " + (message) + "  " + (solution)));
        }, TMP_16.$$arity = 2), nil) && 'improper_render';
      })(Opal.get_singleton_class(self))
    })($scope.base, null);

    (function($base, $super) {
      function $Object(){};
      var self = $Object = $klass($base, $super, 'Object', $Object);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_17, TMP_20, TMP_23;

      ($a = ($b = ["span", "td", "th", "while_loading"]).$each, $a.$$p = (TMP_17 = function(tag){var self = TMP_17.$$s || this, $c, $d, TMP_18;
if (tag == null) tag = nil;
      return ($c = ($d = self).$define_method, $c.$$p = (TMP_18 = function($e_rest){var self = TMP_18.$$s || this, block, args, $f, $g, $h, TMP_19;

          block = TMP_18.$$p || nil, TMP_18.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        args.$unshift(tag);
          if ((($f = self['$is_a?']((($scope.get('React')).$$scope.get('Component')))) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
            return ($f = ($g = self).$send, $f.$$p = block.$to_proc(), $f).apply($g, Opal.to_a(args))};
          return ($f = ($h = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $f.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

          return self.$to_s()}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $f).apply($h, Opal.to_a(args));}, TMP_18.$$s = self, TMP_18.$$arity = -1, TMP_18), $c).call($d, tag)}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);

      Opal.defn(self, '$para', TMP_20 = function $$para($a_rest) {
        var $b, $c, $d, TMP_21, self = this, args, $iter = TMP_20.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_20.$$p = null;
        args.$unshift("p");
        if ((($b = self['$is_a?']((($scope.get('React')).$$scope.get('Component')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($c = self).$send, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args))};
        return ($b = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

        return self.$to_s()}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $b).apply($d, Opal.to_a(args));
      }, TMP_20.$$arity = -1);

      return (Opal.defn(self, '$br', TMP_23 = function $$br() {
        var $a, $b, TMP_22, self = this;

        if ((($a = self['$is_a?']((($scope.get('React')).$$scope.get('Component')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$send("br")};
        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;

        (($scope.get('React')).$$scope.get('RenderingContext')).$render(self.$to_s());
          return (($scope.get('React')).$$scope.get('RenderingContext')).$render("br");}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $a).call($b, "span");
      }, TMP_23.$$arity = 0), nil) && 'br';
    })(Opal.Object, null);
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-store/class_methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$attr_accessor', '$>', '$count', '$define_state_methods', '$to_proc', '$class_state_wrapper', '$__state_wrapper', '$singleton_class', '$new', '$class_mutator_wrapper']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

      self.$attr_accessor("__shared_states", "__class_states", "__instance_states");

      Opal.defn(self, '$state', TMP_1 = function $$state($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_1.$$p, block = $iter || nil;
        if (self.state == null) self.state = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_1.$$p = null;
        if ((($b = $rb_gt(args.$count(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($c = self.$singleton_class().$__state_wrapper().$class_state_wrapper()).$define_state_methods, $b.$$p = block.$to_proc(), $b).apply($c, [self].concat(Opal.to_a(args)))
          } else {
          return ((($b = self.state) !== false && $b !== nil && $b != null) ? $b : self.state = self.$singleton_class().$__state_wrapper().$class_state_wrapper().$new(self))
        };
      }, TMP_1.$$arity = -1);

      Opal.defn(self, '$mutate', TMP_2 = function $$mutate() {
        var $a, self = this;
        if (self.mutate == null) self.mutate = nil;

        return ((($a = self.mutate) !== false && $a !== nil && $a != null) ? $a : self.mutate = self.$singleton_class().$__state_wrapper().$class_mutator_wrapper().$new(self));
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$__shared_states', TMP_3 = function $$__shared_states() {
        var $a, self = this;
        if (self.__shared_states == null) self.__shared_states = nil;

        return ((($a = self.__shared_states) !== false && $a !== nil && $a != null) ? $a : self.__shared_states = []);
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$__class_states', TMP_4 = function $$__class_states() {
        var $a, self = this;
        if (self.__class_states == null) self.__class_states = nil;

        return ((($a = self.__class_states) !== false && $a !== nil && $a != null) ? $a : self.__class_states = []);
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$__instance_states', TMP_5 = function $$__instance_states() {
        var $a, self = this;
        if (self.__instance_states == null) self.__instance_states = nil;

        return ((($a = self.__instance_states) !== false && $a !== nil && $a != null) ? $a : self.__instance_states = []);
      }, TMP_5.$$arity = 0);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-store/dispatch_receiver"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor', '$format_callback', '$empty?', '$raise', '$each', '$on_dispatch', '$call', '$private', '$is_a?', '$last', '$pop', '$lambda', '$send', '$to_s']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DispatchReceiver, self = $DispatchReceiver = $module($base, 'DispatchReceiver');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5;

      (function($base, $super) {
        function $InvalidOperationError(){};
        var self = $InvalidOperationError = $klass($base, $super, 'InvalidOperationError', $InvalidOperationError);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, $scope.get('StandardError'));

      self.$attr_accessor("params");

      Opal.defn(self, '$receives', TMP_1 = function $$receives($a_rest) {
        var $b, $c, TMP_2, self = this, args, $iter = TMP_1.$$p, block = $iter || nil, callback = nil, message = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_1.$$p = null;
        callback = self.$format_callback(args);
        if ((($b = args['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          message = "At least one operation must be passed in to the 'receives' macro";
          self.$raise($scope.get('InvalidOperationError'), message);};
        return ($b = ($c = args).$each, $b.$$p = (TMP_2 = function(operation){var self = TMP_2.$$s || this, $a, $d, TMP_3;
if (operation == null) operation = nil;
        return ($a = ($d = operation).$on_dispatch, $a.$$p = (TMP_3 = function(params){var self = TMP_3.$$s || this;
if (params == null) params = nil;
          self.params = params;
            if (callback !== false && callback !== nil && callback != null) {
              callback.$call()};
            if (block !== false && block !== nil && block != null) {
              return Opal.yield1(block, params);
              } else {
              return nil
            };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($d)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $b).call($c);
      }, TMP_1.$$arity = -1);

      self.$private();

      Opal.defn(self, '$format_callback', TMP_5 = function $$format_callback(args) {
        var $a, $b, TMP_4, self = this, method_name = nil;

        if ((($a = args.$last()['$is_a?']($scope.get('Symbol'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          method_name = args.$pop();
          return ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$send((method_name.$to_s()))}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b);
        } else if ((($a = args.$last()['$is_a?']($scope.get('Proc'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return args.$pop()
          } else {
          return nil
        };
      }, TMP_5.$$arity = 1);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-store/instance_methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$each', '$==', '$[]', '$initializer_value', '$__send__', '$mutate', '$to_s', '$instance_eval', '$to_proc', '$__instance_states', '$class', '$new', '$instance_state_wrapper', '$__state_wrapper', '$singleton_class', '$instance_mutator_wrapper', '$private', '$>', '$arity', '$call']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $InstanceMethods, self = $InstanceMethods = $module($base, 'InstanceMethods');

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

      Opal.defn(self, '$init_store', TMP_2 = function $$init_store() {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = self.$class().$__instance_states()).$each, $a.$$p = (TMP_1 = function(instance_state){var self = TMP_1.$$s || this, $c, $d, proc_value = nil, block_value = nil;
if (instance_state == null) instance_state = nil;
        if (instance_state['$[]'](1)['$[]']("scope")['$==']("shared")) {
            return nil;};
          proc_value = self.$initializer_value(instance_state['$[]'](1)['$[]']("initializer"));
          self.$mutate().$__send__((instance_state['$[]'](0).$to_s()), proc_value);
          if ((($c = instance_state['$[]'](1)['$[]']("block")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            return nil;
          };
          block_value = ($c = ($d = self).$instance_eval, $c.$$p = instance_state['$[]'](1)['$[]']("block").$to_proc(), $c).call($d);
          return self.$mutate().$__send__((instance_state['$[]'](0).$to_s()), block_value);}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$state', TMP_3 = function $$state() {
        var $a, self = this;
        if (self.state == null) self.state = nil;

        return ((($a = self.state) !== false && $a !== nil && $a != null) ? $a : self.state = self.$class().$singleton_class().$__state_wrapper().$instance_state_wrapper().$new(self));
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$mutate', TMP_4 = function $$mutate() {
        var $a, self = this;
        if (self.mutate == null) self.mutate = nil;

        return ((($a = self.mutate) !== false && $a !== nil && $a != null) ? $a : self.mutate = self.$class().$singleton_class().$__state_wrapper().$instance_mutator_wrapper().$new(self));
      }, TMP_4.$$arity = 0);

      self.$private();

      Opal.defn(self, '$initializer_value', TMP_5 = function $$initializer_value(initializer) {
        var $a, self = this;

        if ((($a = $rb_gt(initializer.$arity(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return initializer.$call(self)
          } else {
          return initializer.$call()
        };
      }, TMP_5.$$arity = 1);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-store/mutator_wrapper"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$define_method', '$==', '$[]', '$__from__', '$state', '$get_state', '$to_s', '$>', '$count', '$set_state', '$new', '$initialize_values?', '$initialize_values', '$include?', '$initializer_proc', '$receives', '$__send__', '$mutate', '$call', '$private', '$arity', '$lambda', '$attr_accessor', '$allocate', '$__from__=', '$add_method', '$to_proc']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $MutatorWrapper(){};
      var self = $MutatorWrapper = $klass($base, $super, 'MutatorWrapper', $MutatorWrapper);

      var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_12;

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_3, TMP_4, TMP_7, TMP_10;

        Opal.defn(self, '$add_method', TMP_3 = function $$add_method(klass, method_name, opts) {
          var $a, $b, TMP_1, self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          ($a = ($b = self).$define_method, $a.$$p = (TMP_1 = function($c_rest){var self = TMP_1.$$s || this, args, $d, $e, TMP_2, from = nil, current_value = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          from = (function() {if (opts['$[]']("scope")['$==']("shared")) {
              return klass.$state().$__from__()
              } else {
              return self.$__from__()
            }; return nil; })();
            current_value = (($scope.get('React')).$$scope.get('State')).$get_state(from, method_name.$to_s());
            if ((($d = $rb_gt(args.$count(), 0)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              (($scope.get('React')).$$scope.get('State')).$set_state(from, method_name.$to_s(), args['$[]'](0));
              return current_value;
              } else {
              (($scope.get('React')).$$scope.get('State')).$set_state(from, method_name.$to_s(), current_value);
              return ($d = ($e = (($scope.get('React')).$$scope.get('Observable'))).$new, $d.$$p = (TMP_2 = function(update){var self = TMP_2.$$s || this;
if (update == null) update = nil;
              return (($scope.get('React')).$$scope.get('State')).$set_state(from, method_name.$to_s(), update)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $d).call($e, current_value);
            };}, TMP_1.$$s = self, TMP_1.$$arity = -1, TMP_1), $a).call($b, (method_name.$to_s()));
          if ((($a = self['$initialize_values?'](opts)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$initialize_values(klass, method_name, opts)
            } else {
            return nil
          };
        }, TMP_3.$$arity = -3);
        Opal.defn(self, '$initialize_values?', TMP_4 = function(opts) {
          var $a, $b, self = this;

          return ($a = ["class", "shared"]['$include?'](opts['$[]']("scope")), $a !== false && $a !== nil && $a != null ?(((($b = opts['$[]']("initializer")) !== false && $b !== nil && $b != null) ? $b : opts['$[]']("block"))) : $a);
        }, TMP_4.$$arity = 1);
        Opal.defn(self, '$initialize_values', TMP_7 = function $$initialize_values(klass, name, opts) {
          var $a, $b, TMP_5, $c, TMP_6, self = this, initializer = nil;

          if ((($a = opts['$[]']("initializer")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            initializer = self.$initializer_proc(opts['$[]']("initializer"), klass, name)};
          if ((($a = (($b = initializer !== false && initializer !== nil && initializer != null) ? opts['$[]']("block") : initializer)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = klass).$receives, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return klass.$mutate().$__send__((name.$to_s()), opts['$[]']("block").$call())}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b, (((($scope.get('Hyperloop')).$$scope.get('Application'))).$$scope.get('Boot')), initializer)
          } else if (initializer !== false && initializer !== nil && initializer != null) {
            return klass.$receives((((($scope.get('Hyperloop')).$$scope.get('Application'))).$$scope.get('Boot')), initializer)
          } else if ((($a = opts['$[]']("block")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($c = klass).$receives, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return klass.$mutate().$__send__((name.$to_s()), opts['$[]']("block").$call())}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c, (((($scope.get('Hyperloop')).$$scope.get('Application'))).$$scope.get('Boot')))
            } else {
            return nil
          };
        }, TMP_7.$$arity = 3);
        self.$private();
        return (Opal.defn(self, '$initializer_proc', TMP_10 = function $$initializer_proc(initializer, klass, name) {
          var $a, $b, TMP_8, $c, TMP_9, self = this;

          if ((($a = $rb_gt(initializer.$arity(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

            return klass.$mutate().$__send__((name.$to_s()), initializer.$call(klass))}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b)
            } else {
            return ($a = ($c = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            return klass.$mutate().$__send__((name.$to_s()), initializer.$call())}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($c)
          };
        }, TMP_10.$$arity = 3), nil) && 'initializer_proc';
      })(Opal.get_singleton_class(self));

      self.$attr_accessor("__from__");

      Opal.defs(self, '$new', TMP_11 = function(from) {
        var $a, $b, self = this, instance = nil;

        instance = self.$allocate();
        (($a = [from]), $b = instance, $b['$__from__='].apply($b, $a), $a[$a.length-1]);
        return instance;
      }, TMP_11.$$arity = 1);

      return (Opal.defn(self, '$method_missing', TMP_12 = function $$method_missing(name, $a_rest) {
        var $b, $c, self = this, args, $iter = TMP_12.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_12.$$p = null;
        ((function(self) {
          var $scope = self.$$scope, def = self.$$proto;

          return self
        })(Opal.get_singleton_class(self))).$add_method(nil, name);
        return ($b = ($c = self).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, [name].concat(Opal.to_a(args)));
      }, TMP_12.$$arity = -2), nil) && 'method_missing';
    })($scope.base, $scope.get('BaseStoreClass'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-store/state_wrapper/argument_validator"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$parse_arguments', '$to_proc', '$[]', '$[]=', '$default_scope', '$validate_initializer', '$==', '$private', '$raise', '$is_a?', '$first', '$include?', '$to_sym', '$keys', '$invalid_option', '$shift', '$dup_or_return_intial_value', '$class', '$lambda', '$send', '$to_s', '$dup']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $StateWrapper(){};
      var self = $StateWrapper = $klass($base, $super, 'StateWrapper', $StateWrapper);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base) {
        var $ArgumentValidator, self = $ArgumentValidator = $module($base, 'ArgumentValidator');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_8, TMP_10;

        (function($base, $super) {
          function $InvalidOptionError(){};
          var self = $InvalidOptionError = $klass($base, $super, 'InvalidOptionError', $InvalidOptionError);

          var def = self.$$proto, $scope = self.$$scope;

          return nil;
        })($scope.base, $scope.get('StandardError'));

        Opal.defn(self, '$validate_args!', TMP_1 = function(klass, $a_rest) {
          var $b, $c, $d, $e, self = this, args, $iter = TMP_1.$$p, block = $iter || nil, name = nil, initial_value = nil, opts = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_1.$$p = null;
          $c = ($d = ($e = self).$parse_arguments, $d.$$p = block.$to_proc(), $d).apply($e, Opal.to_a(args)), $b = Opal.to_ary($c), name = ($b[0] == null ? nil : $b[0]), initial_value = ($b[1] == null ? nil : $b[1]), opts = ($b[2] == null ? nil : $b[2]), $c;
          ($b = "scope", $c = opts, ((($d = $c['$[]']($b)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($b, self.$default_scope(klass))));
          opts['$[]=']("initializer", self.$validate_initializer(initial_value, klass, opts));
          if (block !== false && block !== nil && block != null) {
            opts['$[]=']("block", block)};
          if ((($b = opts['$[]']("reader")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            opts['$[]=']("reader", (function() {if (opts['$[]']("reader")['$=='](true)) {
              return name
              } else {
              return opts['$[]']("reader")
            }; return nil; })())};
          return [name, opts];
        }, TMP_1.$$arity = -2);

        self.$private();

        Opal.defn(self, '$invalid_option', TMP_2 = function $$invalid_option(message) {
          var self = this;

          return self.$raise($scope.get('InvalidOptionError'), message);
        }, TMP_2.$$arity = 1);

        Opal.defn(self, '$parse_arguments', TMP_3 = function $$parse_arguments($a_rest) {
          var $b, $c, self = this, args, message = nil, name = nil, initial_value = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = args.$first()['$is_a?']($scope.get('Hash'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            if ((($b = ["reader", "initializer", "scope"]['$include?'](args.$first().$keys().$first().$to_sym())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              message = "The name of the state must be specified first as " + "either 'state :name' or 'state name: nil'";
              self.$invalid_option(message);};
            $c = args['$[]'](0).$shift(), $b = Opal.to_ary($c), name = ($b[0] == null ? nil : $b[0]), initial_value = ($b[1] == null ? nil : $b[1]), $c;
            } else {
            name = args.$shift()
          };
          return [name, initial_value, ((($b = args['$[]'](0)) !== false && $b !== nil && $b != null) ? $b : $hash2([], {}))];
        }, TMP_3.$$arity = -1);

        Opal.defn(self, '$validate_initializer', TMP_8 = function $$validate_initializer(initial_value, klass, opts) {
          var $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, $e, TMP_7, self = this, method_name = nil;

          if (initial_value !== false && initial_value !== nil && initial_value != null) {
            return self.$dup_or_return_intial_value(initial_value)
          } else if ((($a = opts['$[]']("initializer")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = [$scope.get('Symbol'), $scope.get('String')]['$include?'](opts['$[]']("initializer").$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              method_name = opts['$[]']("initializer");
              if ((($a = ["class", "shared"]['$include?'](opts['$[]']("scope"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

                return klass.$send((method_name.$to_s()))}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b)
                } else {
                return ($a = ($c = self).$lambda, $a.$$p = (TMP_5 = function(instance){var self = TMP_5.$$s || this;
if (instance == null) instance = nil;
                return instance.$send((method_name.$to_s()))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($c)
              };
            } else if ((($a = opts['$[]']("initializer")['$is_a?']($scope.get('Proc'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return opts['$[]']("initializer")
              } else {
              self.$invalid_option("'state' option 'initialize' must either be a Symbol or a Proc");
              return ($a = ($d = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

              return nil}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($d);
            }
            } else {
            return ($a = ($e = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

            return nil}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($e)
          };
        }, TMP_8.$$arity = 3);

        Opal.defn(self, '$dup_or_return_intial_value', TMP_10 = function $$dup_or_return_intial_value(value) {
          var $a, $b, TMP_9, self = this;

          value = (function() { try {
            return value.$dup()
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
              try {
                return value
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})();
          return ($a = ($b = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

          return value}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($b);
        }, TMP_10.$$arity = 1);
      })($scope.base)
    })($scope.base, $scope.get('BaseStoreClass'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-store/state_wrapper"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$extend', '$attr_reader', '$==', '$add_class_instance_vars', '$new', '$empty?', '$validate_args!', '$to_proc', '$add_readers', '$add_error_methods', '$state', '$singleton_class', '$add_methods', '$remove_methods', '$<<', '$send', '$to_s', '$[]', '$include?', '$class_eval', '$define_method', '$__send__', '$define_singleton_method', '$each', '$add_method', '$instance_variable_get', '$__from__', '$get_state', '$respond_to?', '$wrappers', '$class_state_wrapper', '$__state_wrapper', '$attr_accessor', '$allocate', '$__from__=']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $StateWrapper(){};
      var self = $StateWrapper = $klass($base, $super, 'StateWrapper', $StateWrapper);

      var def = self.$$proto, $scope = self.$$scope, TMP_17, TMP_18;

      self.$extend($scope.get('ArgumentValidator'));

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3, TMP_7, TMP_10, TMP_11, TMP_13, TMP_15, TMP_16;

        self.$attr_reader("instance_state_wrapper", "class_state_wrapper", "instance_mutator_wrapper", "class_mutator_wrapper", "wrappers");
        Opal.defn(self, '$inherited', TMP_1 = function $$inherited(subclass) {
          var self = this;

          if (self['$==']($scope.get('StateWrapper'))) {
            return subclass.$add_class_instance_vars(subclass)
            } else {
            return nil
          };
        }, TMP_1.$$arity = 1);
        Opal.defn(self, '$add_class_instance_vars', TMP_2 = function $$add_class_instance_vars(subclass) {
          var self = this;
          if (self.shared_state_wrapper == null) self.shared_state_wrapper = nil;
          if (self.shared_mutator_wrapper == null) self.shared_mutator_wrapper = nil;
          if (self.instance_state_wrapper == null) self.instance_state_wrapper = nil;
          if (self.instance_mutator_wrapper == null) self.instance_mutator_wrapper = nil;
          if (self.class_state_wrapper == null) self.class_state_wrapper = nil;
          if (self.class_mutator_wrapper == null) self.class_mutator_wrapper = nil;

          self.shared_state_wrapper = subclass;
          self.instance_state_wrapper = $scope.get('Class').$new(self.shared_state_wrapper);
          self.class_state_wrapper = $scope.get('Class').$new(self.shared_state_wrapper);
          self.shared_mutator_wrapper = $scope.get('Class').$new($scope.get('MutatorWrapper'));
          self.instance_mutator_wrapper = $scope.get('Class').$new(self.shared_mutator_wrapper);
          self.class_mutator_wrapper = $scope.get('Class').$new(self.shared_mutator_wrapper);
          return self.wrappers = [self.instance_state_wrapper, self.instance_mutator_wrapper, self.class_state_wrapper, self.class_mutator_wrapper];
        }, TMP_2.$$arity = 1);
        Opal.defn(self, '$define_state_methods', TMP_3 = function $$define_state_methods(klass, $a_rest) {
          var $b, $c, $d, $e, self = this, args, $iter = TMP_3.$$p, block = $iter || nil, name = nil, opts = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_3.$$p = null;
          if ((($b = args['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self};
          $c = ($d = ($e = self)['$validate_args!'], $d.$$p = block.$to_proc(), $d).apply($e, [klass].concat(Opal.to_a(args))), $b = Opal.to_ary($c), name = ($b[0] == null ? nil : $b[0]), opts = ($b[1] == null ? nil : $b[1]), $c;
          self.$add_readers(klass, name, opts);
          klass.$singleton_class().$state().$add_error_methods(name, opts);
          klass.$singleton_class().$state().$add_methods(klass, name, opts);
          klass.$singleton_class().$state().$remove_methods(name, opts);
          return klass.$send(("__" + opts['$[]']("scope").$to_s() + "_states"))['$<<']([name, opts]);
        }, TMP_3.$$arity = -2);
        Opal.defn(self, '$add_readers', TMP_7 = function $$add_readers(klass, name, opts) {
          var $a, $b, TMP_4, $c, TMP_6, self = this;

          if ((($a = opts['$[]']("reader")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          if ((($a = ["instance", "shared"]['$include?'](opts['$[]']("scope"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = klass).$class_eval, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $c, $d, TMP_5;

            return ($c = ($d = self).$define_method, $c.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$state().$__send__((name.$to_s()))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $c).call($d, (opts['$[]']("reader").$to_s()))}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b)};
          if ((($a = ["class", "shared"]['$include?'](opts['$[]']("scope"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($c = klass).$define_singleton_method, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$state().$__send__((name.$to_s()))}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c, (opts['$[]']("reader").$to_s()))
            } else {
            return nil
          };
        }, TMP_7.$$arity = 3);
        Opal.defn(self, '$add_error_methods', TMP_10 = function $$add_error_methods(name, opts) {
          var $a, $b, TMP_8, self = this;
          if (self.shared_state_wrapper == null) self.shared_state_wrapper = nil;
          if (self.shared_mutator_wrapper == null) self.shared_mutator_wrapper = nil;

          if (opts['$[]']("scope")['$==']("shared")) {
            return nil};
          return ($a = ($b = [self.shared_state_wrapper, self.shared_mutator_wrapper]).$each, $a.$$p = (TMP_8 = function(klass){var self = TMP_8.$$s || this, $c, $d, TMP_9;
if (klass == null) klass = nil;
          return ($c = ($d = klass).$define_singleton_method, $c.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            return "nope!"}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $c).call($d, (name.$to_s()))}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b);
        }, TMP_10.$$arity = 2);
        Opal.defn(self, '$add_methods', TMP_11 = function $$add_methods(klass, name, opts) {
          var self = this;

          self.$instance_variable_get("@" + (opts['$[]']("scope")) + "_state_wrapper").$add_method(klass, name, opts);
          return self.$instance_variable_get("@" + (opts['$[]']("scope")) + "_mutator_wrapper").$add_method(klass, name, opts);
        }, TMP_11.$$arity = 3);
        Opal.defn(self, '$add_method', TMP_13 = function $$add_method(klass, method_name, opts) {
          var $a, $b, TMP_12, self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, from = nil;
            if (self.__from__ == null) self.__from__ = nil;

          from = (function() {if (opts['$[]']("scope")['$==']("shared")) {
              return klass.$state().$__from__()
              } else {
              return self.__from__
            }; return nil; })();
            return (($scope.get('React')).$$scope.get('State')).$get_state(from, method_name.$to_s());}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($b, (method_name.$to_s()));
        }, TMP_13.$$arity = -3);
        Opal.defn(self, '$remove_methods', TMP_15 = function $$remove_methods(name, opts) {
          var $a, $b, TMP_14, self = this;

          if (opts['$[]']("scope")['$==']("shared")) {
            } else {
            return nil
          };
          return ($a = ($b = self.$wrappers()).$each, $a.$$p = (TMP_14 = function(wrapper){var self = TMP_14.$$s || this, $c;
if (wrapper == null) wrapper = nil;
          if ((($c = wrapper['$respond_to?']((name.$to_s()))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return wrapper.$send("remove_method", (name.$to_s()))
              } else {
              return nil
            }}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
        }, TMP_15.$$arity = 2);
        return (Opal.defn(self, '$default_scope', TMP_16 = function $$default_scope(klass) {
          var self = this;

          if (self['$=='](klass.$singleton_class().$__state_wrapper().$class_state_wrapper())) {
            return "instance"
            } else {
            return "class"
          };
        }, TMP_16.$$arity = 1), nil) && 'default_scope';
      })(Opal.get_singleton_class(self));

      self.$attr_accessor("__from__");

      Opal.defs(self, '$new', TMP_17 = function(from) {
        var $a, $b, self = this, instance = nil;

        instance = self.$allocate();
        (($a = [from]), $b = instance, $b['$__from__='].apply($b, $a), $a[$a.length-1]);
        return instance;
      }, TMP_17.$$arity = 1);

      return (Opal.defn(self, '$method_missing', TMP_18 = function $$method_missing(name, $a_rest) {
        var $b, $c, self = this, args, $iter = TMP_18.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_18.$$p = null;
        $gvars.method_missing = [name].concat(Opal.to_a(args));
        ((function(self) {
          var $scope = self.$$scope, def = self.$$proto;

          return self
        })(Opal.get_singleton_class(self))).$add_method(nil, name);
        return ($b = ($c = self).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, [name].concat(Opal.to_a(args)));
      }, TMP_18.$$arity = -2), nil) && 'method_missing';
    })($scope.base, $scope.get('BaseStoreClass'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-store/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.2.1")
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyperloop/store"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$init_store']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Store(){};
      var self = $Store = $klass($base, $super, 'Store', $Store);

      var def = self.$$proto, $scope = self.$$scope, TMP_2;

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1;

        return (Opal.defn(self, '$inherited', TMP_1 = function $$inherited(child) {
          var self = this;

          return child.$include($scope.get('Mixin'));
        }, TMP_1.$$arity = 1), nil) && 'inherited'
      })(Opal.get_singleton_class(self));

      return (Opal.defn(self, '$initialize', TMP_2 = function $$initialize() {
        var self = this;

        return self.$init_store();
      }, TMP_2.$$arity = 0), nil) && 'initialize';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyperloop/application/boot"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$<<', '$receivers', '$attr_reader', '$new', '$each', '$call', '$puts']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope, $a;

    if ((($a = ($scope.Operation != null)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      (function($base, $super) {
        function $Operation(){};
        var self = $Operation = $klass($base, $super, 'Operation', $Operation);

        var def = self.$$proto, $scope = self.$$scope;

        return (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2;

          Opal.defn(self, '$on_dispatch', TMP_1 = function $$on_dispatch() {
            var self = this, $iter = TMP_1.$$p, block = $iter || nil;

            TMP_1.$$p = null;
            return self.$receivers()['$<<'](block);
          }, TMP_1.$$arity = 0);
          return (Opal.defn(self, '$receivers', TMP_2 = function $$receivers() {
            var $a, self = this;
            if (self.receivers == null) self.receivers = nil;

            return ((($a = self.receivers) !== false && $a !== nil && $a != null) ? $a : self.receivers = []);
          }, TMP_2.$$arity = 0), nil) && 'receivers';
        })(Opal.get_singleton_class(self))
      })($scope.base, null)
    };

    (function($base, $super) {
      function $Application(){};
      var self = $Application = $klass($base, $super, 'Application', $Application);

      var def = self.$$proto, $scope = self.$$scope, $a;

      if ((($a = ($scope.Boot != null)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return (function($base, $super) {
          function $Boot(){};
          var self = $Boot = $klass($base, $super, 'Boot', $Boot);

          var def = self.$$proto, $scope = self.$$scope, TMP_5;

          (function($base, $super) {
            function $ReactDummyParams(){};
            var self = $ReactDummyParams = $klass($base, $super, 'ReactDummyParams', $ReactDummyParams);

            var def = self.$$proto, $scope = self.$$scope, TMP_3;

            self.$attr_reader("context");

            return (Opal.defn(self, '$initialize', TMP_3 = function $$initialize(context) {
              var self = this;

              return self.context = context;
            }, TMP_3.$$arity = 1), nil) && 'initialize';
          })($scope.base, null);

          return (Opal.defs(self, '$run', TMP_5 = function $$run($kwargs) {
            var $a, $b, TMP_4, self = this, context, params = nil, e = nil;

            if ($kwargs == null || !$kwargs.$$is_hash) {
              if ($kwargs == null) {
                $kwargs = $hash2([], {});
              } else {
                throw Opal.ArgumentError.$new('expected kwargs');
              }
            }
            if ((context = $kwargs.$$smap['context']) == null) {
              context = nil
            }
            try {
              params = $scope.get('ReactDummyParams').$new(context);
              return ($a = ($b = self.$receivers()).$each, $a.$$p = (TMP_4 = function(receiver){var self = TMP_4.$$s || this;
if (receiver == null) receiver = nil;
              return receiver.$call(params)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$puts("called Boot.run and she broke " + (e))
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
          }, TMP_5.$$arity = -1), nil) && 'run';
        })($scope.base, $scope.get('Operation'))
      }
    })($scope.base, null);
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyperloop/store/mixin"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$extend', '$define_singleton_method', '$new', '$singleton_class', '$define_state_methods', '$to_proc', '$__state_wrapper']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Store(){};
      var self = $Store = $klass($base, $super, 'Store', $Store);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base) {
        var $Mixin, self = $Mixin = $module($base, 'Mixin');

        var def = self.$$proto, $scope = self.$$scope;

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_3;

          return (Opal.defn(self, '$included', TMP_3 = function $$included(base) {
            var $a, $b, TMP_1, $c, TMP_2, self = this;

            base.$include((($scope.get('HyperStore')).$$scope.get('InstanceMethods')));
            base.$extend((($scope.get('HyperStore')).$$scope.get('ClassMethods')));
            base.$extend((($scope.get('HyperStore')).$$scope.get('DispatchReceiver')));
            ($a = ($b = base.$singleton_class()).$define_singleton_method, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c;
              if (self.__state_wrapper == null) self.__state_wrapper = nil;

            return ((($c = self.__state_wrapper) !== false && $c !== nil && $c != null) ? $c : self.__state_wrapper = $scope.get('Class').$new((($scope.get('HyperStore')).$$scope.get('StateWrapper'))))}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b, "__state_wrapper");
            return ($a = ($c = base.$singleton_class()).$define_singleton_method, $a.$$p = (TMP_2 = function($d_rest){var self = TMP_2.$$s || this, block, args, $e, $f;

              block = TMP_2.$$p || nil, TMP_2.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return ($e = ($f = self.$__state_wrapper()).$define_state_methods, $e.$$p = block.$to_proc(), $e).apply($f, [base].concat(Opal.to_a(args)))}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2), $a).call($c, "state");
          }, TMP_3.$$arity = 1), nil) && 'included'
        })(Opal.get_singleton_class(self))
      })($scope.base)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/state"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$on_client?', '$attr_reader', '$!', '$empty?', '$[]', '$observers_by_name', '$respond_to?', '$each', '$include?', '$[]=', '$+', '$==', '$dup', '$merge!', '$states', '$new_observers', '$<<', '$new', '$after', '$set_state2', '$update_react_js_state', '$notify_observers', '$raise', '$delete', '$current_observers', '$to_f', '$now', '$class', '$name', '$to_s', '$object_id', '$-', '$max', '$define_method', '$instance_variable_get', '$instance_variable_set']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $State(){};
      var self = $State = $klass($base, $super, 'State', $State);

      var def = self.$$proto, $scope = self.$$scope;

      Opal.cdecl($scope, 'ALWAYS_UPDATE_STATE_AFTER_RENDER', $scope.get('Hyperloop')['$on_client?']());

      self.rendering_level = 0;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_16, TMP_18, TMP_21, TMP_22, TMP_23, TMP_28, TMP_31, TMP_32, TMP_34, $a, $b, TMP_35;

        self.$attr_reader("current_observer");
        Opal.defn(self, '$has_observers?', TMP_1 = function(object, name) {
          var self = this;

          return self.$observers_by_name()['$[]'](object)['$[]'](name)['$empty?']()['$!']();
        }, TMP_1.$$arity = 2);
        Opal.defn(self, '$bulk_update', TMP_2 = function $$bulk_update() {
          var self = this, $iter = TMP_2.$$p, $yield = $iter || nil, saved_bulk_update_flag = nil;
          if (self.bulk_update_flag == null) self.bulk_update_flag = nil;

          TMP_2.$$p = null;
          try {
          saved_bulk_update_flag = self.bulk_update_flag;
          self.bulk_update_flag = true;
          return Opal.yieldX($yield, []);;
          } finally {
            self.bulk_update_flag = saved_bulk_update_flag
          };
        }, TMP_2.$$arity = 0);
        Opal.defn(self, '$set_state2', TMP_4 = function $$set_state2(object, name, value, updates, exclusions) {
          var $a, $b, TMP_3, $c, self = this, object_needs_notification = nil;

          if (exclusions == null) {
            exclusions = nil;
          }
          object_needs_notification = object['$respond_to?']("update_react_js_state");
          ($a = ($b = self.$observers_by_name()['$[]'](object)['$[]'](name).$dup()).$each, $a.$$p = (TMP_3 = function(observer){var self = TMP_3.$$s || this, $c, $d;
if (observer == null) observer = nil;
          if ((($c = (($d = exclusions !== false && exclusions !== nil && exclusions != null) ? exclusions['$include?'](observer) : exclusions)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return nil;};
            ($c = observer, $d = updates, $d['$[]=']($c, $rb_plus($d['$[]']($c), [object, name, value])));
            if (object['$=='](observer)) {
              return object_needs_notification = false
              } else {
              return nil
            };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);
          if (object_needs_notification !== false && object_needs_notification !== nil && object_needs_notification != null) {
            return ($a = object, $c = updates, $c['$[]=']($a, $rb_plus($c['$[]']($a), [nil, name, value])))
            } else {
            return nil
          };
        }, TMP_4.$$arity = -5);
        Opal.defn(self, '$initialize_states', TMP_5 = function $$initialize_states(object, initial_values) {
          var $a, self = this;

          return self.$states()['$[]'](object)['$merge!'](((($a = initial_values) !== false && $a !== nil && $a != null) ? $a : $hash2([], {})));
        }, TMP_5.$$arity = 2);
        Opal.defn(self, '$get_state', TMP_6 = function $$get_state(object, name, current_observer) {
          var $a, $b, self = this;
          if (self.delayed_updates == null) self.delayed_updates = nil;
          if (self.current_observer == null) self.current_observer = nil;

          if (current_observer == null) {
            current_observer = self.current_observer;
          }
          if ((($a = (($b = current_observer !== false && current_observer !== nil && current_observer != null) ? self.$new_observers()['$[]'](current_observer)['$[]'](object)['$include?'](name)['$!']() : current_observer)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$new_observers()['$[]'](current_observer)['$[]'](object)['$<<'](name)};
          if ((($a = ($b = self.delayed_updates, $b !== false && $b !== nil && $b != null ?self.delayed_updates['$[]'](object)['$[]'](name) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.delayed_updates['$[]'](object)['$[]'](name)['$[]'](1)['$<<'](current_observer)};
          return self.$states()['$[]'](object)['$[]'](name);
        }, TMP_6.$$arity = -3);
        Opal.defn(self, '$set_state', TMP_16 = function $$set_state(object, name, value, delay) {
          var $a, $b, $c, TMP_7, $d, TMP_8, TMP_14, $e, TMP_15, self = this, updates = nil;
          if (self.bulk_update_flag == null) self.bulk_update_flag = nil;
          if (self.delayed_updates == null) self.delayed_updates = nil;
          if (self.delayed_updater == null) self.delayed_updater = nil;
          if (self.rendering_level == null) self.rendering_level = nil;

          if (delay == null) {
            delay = $scope.get('ALWAYS_UPDATE_STATE_AFTER_RENDER');
          }
          self.$states()['$[]'](object)['$[]='](name, value);
          if ((($a = ((($b = delay) !== false && $b !== nil && $b != null) ? $b : self.bulk_update_flag)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ((($a = self.delayed_updates) !== false && $a !== nil && $a != null) ? $a : self.delayed_updates = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_7 = function(h, k){var self = TMP_7.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
            return h['$[]='](k, $hash2([], {}))}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7), $b).call($c));
            self.delayed_updates['$[]'](object)['$[]='](name, [value, $scope.get('Set').$new()]);
            ((($a = self.delayed_updater) !== false && $a !== nil && $a != null) ? $a : self.delayed_updater = ($b = ($d = self).$after, $b.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $e, $f, TMP_9, $g, TMP_10, $h, TMP_11, $i, TMP_13, delayed_updates = nil, updates = nil;
              if (self.delayed_updates == null) self.delayed_updates = nil;

            delayed_updates = self.delayed_updates;
              self.delayed_updates = ($e = ($f = $scope.get('Hash')).$new, $e.$$p = (TMP_9 = function(h, k){var self = TMP_9.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
              return h['$[]='](k, $hash2([], {}))}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $e).call($f);
              self.delayed_updater = nil;
              updates = ($e = ($g = $scope.get('Hash')).$new, $e.$$p = (TMP_10 = function(hash, key){var self = TMP_10.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
              return hash['$[]='](key, $scope.get('Array').$new())}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $e).call($g);
              ($e = ($h = delayed_updates).$each, $e.$$p = (TMP_11 = function(object, name_hash){var self = TMP_11.$$s || this, $i, $j, TMP_12;
if (object == null) object = nil;if (name_hash == null) name_hash = nil;
              return ($i = ($j = name_hash).$each, $i.$$p = (TMP_12 = function(name, value_and_set){var self = TMP_12.$$s || this;
if (name == null) name = nil;if (value_and_set == null) value_and_set = nil;
                return self.$set_state2(object, name, value_and_set['$[]'](0), updates, value_and_set['$[]'](1))}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $i).call($j)}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $e).call($h);
              return ($e = ($i = updates).$each, $e.$$p = (TMP_13 = function(observer, args){var self = TMP_13.$$s || this, $j;
if (observer == null) observer = nil;if (args == null) args = nil;
              return ($j = observer).$update_react_js_state.apply($j, Opal.to_a(args))}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13), $e).call($i);}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $b).call($d, 0.001));
          } else if (self.rendering_level['$=='](0)) {
            updates = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_14 = function(hash, key){var self = TMP_14.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
            return hash['$[]='](key, $scope.get('Array').$new())}, TMP_14.$$s = self, TMP_14.$$arity = 2, TMP_14), $a).call($b);
            self.$set_state2(object, name, value, updates);
            ($a = ($e = updates).$each, $a.$$p = (TMP_15 = function(observer, args){var self = TMP_15.$$s || this, $f;
if (observer == null) observer = nil;if (args == null) args = nil;
            return ($f = observer).$update_react_js_state.apply($f, Opal.to_a(args))}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $a).call($e);};
          return value;
        }, TMP_16.$$arity = -4);
        Opal.defn(self, '$notify_observers', TMP_18 = function $$notify_observers(object, name, value) {
          var $a, $b, TMP_17, self = this, object_needs_notification = nil;

          object_needs_notification = object['$respond_to?']("update_react_js_state");
          ($a = ($b = self.$observers_by_name()['$[]'](object)['$[]'](name).$dup()).$each, $a.$$p = (TMP_17 = function(observer){var self = TMP_17.$$s || this;
if (observer == null) observer = nil;
          observer.$update_react_js_state(object, name, value);
            if (object['$=='](observer)) {
              return object_needs_notification = false
              } else {
              return nil
            };}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);
          if (object_needs_notification !== false && object_needs_notification !== nil && object_needs_notification != null) {
            return object.$update_react_js_state(nil, name, value)
            } else {
            return nil
          };
        }, TMP_18.$$arity = 3);
        Opal.defn(self, '$notify_observers_after_thread_completes', TMP_21 = function $$notify_observers_after_thread_completes(object, name, value) {
          var $a, $b, $c, TMP_19, self = this;
          if (self.delayed_updates == null) self.delayed_updates = nil;
          if (self.delayed_updater == null) self.delayed_updater = nil;

          (((($a = self.delayed_updates) !== false && $a !== nil && $a != null) ? $a : self.delayed_updates = []))['$<<']([object, name, value]);
          return ((($a = self.delayed_updater) !== false && $a !== nil && $a != null) ? $a : self.delayed_updater = ($b = ($c = self).$after, $b.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this, $d, $e, TMP_20, delayed_updates = nil;
            if (self.delayed_updates == null) self.delayed_updates = nil;

          delayed_updates = self.delayed_updates;
            self.delayed_updates = [];
            self.delayed_updater = nil;
            return ($d = ($e = delayed_updates).$each, $d.$$p = (TMP_20 = function(args){var self = TMP_20.$$s || this, $f;
if (args == null) args = nil;
            return ($f = self).$notify_observers.apply($f, Opal.to_a(args))}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $d).call($e);}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $b).call($c, 0));
        }, TMP_21.$$arity = 3);
        Opal.defn(self, '$will_be_observing?', TMP_22 = function(object, name, current_observer) {
          var $a, self = this;

          return (($a = current_observer !== false && current_observer !== nil && current_observer != null) ? self.$new_observers()['$[]'](current_observer)['$[]'](object)['$include?'](name) : current_observer);
        }, TMP_22.$$arity = 3);
        Opal.defn(self, '$is_observing?', TMP_23 = function(object, name, current_observer) {
          var $a, self = this;

          return (($a = current_observer !== false && current_observer !== nil && current_observer != null) ? self.$observers_by_name()['$[]'](object)['$[]'](name)['$include?'](current_observer) : current_observer);
        }, TMP_23.$$arity = 3);
        Opal.defn(self, '$update_states_to_observe', TMP_28 = function $$update_states_to_observe(current_observer) {
          var $a, $b, TMP_24, $c, TMP_26, self = this, observers = nil;
          if (self.current_observer == null) self.current_observer = nil;

          if (current_observer == null) {
            current_observer = self.current_observer;
          }
          if (current_observer !== false && current_observer !== nil && current_observer != null) {
            } else {
            self.$raise("update_states_to_observer called outside of watch block")
          };
          ($a = ($b = self.$current_observers()['$[]'](current_observer)).$each, $a.$$p = (TMP_24 = function(object, names){var self = TMP_24.$$s || this, $c, $d, TMP_25;
if (object == null) object = nil;if (names == null) names = nil;
          return ($c = ($d = names).$each, $c.$$p = (TMP_25 = function(name){var self = TMP_25.$$s || this;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name).$delete(current_observer)}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $c).call($d)}, TMP_24.$$s = self, TMP_24.$$arity = 2, TMP_24), $a).call($b);
          observers = self.$current_observers()['$[]='](current_observer, self.$new_observers()['$[]'](current_observer));
          self.$new_observers().$delete(current_observer);
          return ($a = ($c = observers).$each, $a.$$p = (TMP_26 = function(object, names){var self = TMP_26.$$s || this, $d, $e, TMP_27;
if (object == null) object = nil;if (names == null) names = nil;
          return ($d = ($e = names).$each, $d.$$p = (TMP_27 = function(name){var self = TMP_27.$$s || this;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name)['$<<'](current_observer)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $d).call($e)}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26), $a).call($c);
        }, TMP_28.$$arity = -1);
        Opal.defn(self, '$remove', TMP_31 = function $$remove() {
          var $a, $b, TMP_29, self = this;
          if (self.current_observer == null) self.current_observer = nil;

          if ((($a = self.current_observer) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("remove called outside of watch block")
          };
          ($a = ($b = self.$current_observers()['$[]'](self.current_observer)).$each, $a.$$p = (TMP_29 = function(object, names){var self = TMP_29.$$s || this, $c, $d, TMP_30;
if (object == null) object = nil;if (names == null) names = nil;
          return ($c = ($d = names).$each, $c.$$p = (TMP_30 = function(name){var self = TMP_30.$$s || this;
              if (self.current_observer == null) self.current_observer = nil;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name).$delete(self.current_observer)}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $c).call($d)}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29), $a).call($b);
          return self.$current_observers().$delete(self.current_observer);
        }, TMP_31.$$arity = 0);
        Opal.defn(self, '$set_state_context_to', TMP_32 = function $$set_state_context_to(observer, rendering) {
          var $a, self = this, $iter = TMP_32.$$p, $yield = $iter || nil, start_time = nil, observer_name = nil, saved_current_observer = nil, return_value = nil;
          if (self.nesting_level == null) self.nesting_level = nil;
          if (self.current_observer == null) self.current_observer = nil;
          if (self.rendering_level == null) self.rendering_level = nil;

          if (rendering == null) {
            rendering = nil;
          }
          TMP_32.$$p = null;
          try {
          if ((($a = typeof Opal.global.reactive_ruby_timing !== 'undefined') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.nesting_level = $rb_plus((((($a = self.nesting_level) !== false && $a !== nil && $a != null) ? $a : 0)), 1);
            start_time = $scope.get('Time').$now().$to_f();
            observer_name = (function() {
            try {return ((function() {if ((($a = observer.$class()['$respond_to?']("name")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return observer.$class().$name()
              } else {
              return observer.$to_s()
            }; return nil; })()) } catch ($err) { 
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
              return "object:" + (observer.$object_id())
              } else { throw $err; } }})();};
          saved_current_observer = self.current_observer;
          self.current_observer = observer;
          if (rendering !== false && rendering !== nil && rendering != null) {
            self.rendering_level = $rb_plus(self.rendering_level, 1)};
          return_value = Opal.yieldX($yield, []);
          return return_value;
          } finally {
            self.current_observer = saved_current_observer;
            if (rendering !== false && rendering !== nil && rendering != null) {
              self.rendering_level = $rb_minus(self.rendering_level, 1)};
            if ((($a = typeof Opal.global.reactive_ruby_timing !== 'undefined') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.nesting_level = [0, $rb_minus(self.nesting_level, 1)].$max()};
            return_value;
          };
        }, TMP_32.$$arity = -2);
        Opal.defn(self, '$states', TMP_34 = function $$states() {
          var $a, $b, $c, TMP_33, self = this;
          if (self.states == null) self.states = nil;

          return ((($a = self.states) !== false && $a !== nil && $a != null) ? $a : self.states = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_33 = function(h, k){var self = TMP_33.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, $hash2([], {}))}, TMP_33.$$s = self, TMP_33.$$arity = 2, TMP_33), $b).call($c));
        }, TMP_34.$$arity = 0);
        return ($a = ($b = ["new_observers", "current_observers", "observers_by_name"]).$each, $a.$$p = (TMP_35 = function(method_name){var self = TMP_35.$$s || this, $c, $d, TMP_36;
if (method_name == null) method_name = nil;
        return ($c = ($d = self).$define_method, $c.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this, $e, $f, $g, TMP_37;

          return ((($e = self.$instance_variable_get("@" + (method_name))) !== false && $e !== nil && $e != null) ? $e : self.$instance_variable_set("@" + (method_name), ($f = ($g = $scope.get('Hash')).$new, $f.$$p = (TMP_37 = function(h, k){var self = TMP_37.$$s || this, $h, $i, TMP_38;
if (h == null) h = nil;if (k == null) k = nil;
            return h['$[]='](k, ($h = ($i = $scope.get('Hash')).$new, $h.$$p = (TMP_38 = function(h, k){var self = TMP_38.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
              return h['$[]='](k, [])}, TMP_38.$$s = self, TMP_38.$$arity = 2, TMP_38), $h).call($i))}, TMP_37.$$s = self, TMP_37.$$arity = 2, TMP_37), $f).call($g)))}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36), $c).call($d, method_name)}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35), $a).call($b);
      })(Opal.get_singleton_class(self));
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-store"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$import', '$!=']);
  self.$require("set");
  self.$require("hyperloop-config");
  $scope.get('Hyperloop').$import("hyper-store");
  (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $BaseStoreClass(){};
      var self = $BaseStoreClass = $klass($base, $super, 'BaseStoreClass', $BaseStoreClass);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base);
  self.$require("hyper-store/class_methods");
  self.$require("hyper-store/dispatch_receiver");
  self.$require("hyper-store/instance_methods");
  self.$require("hyper-store/mutator_wrapper");
  self.$require("hyper-store/state_wrapper/argument_validator");
  self.$require("hyper-store/state_wrapper");
  self.$require("hyper-store/version");
  self.$require("hyperloop/store");
  self.$require("hyperloop/application/boot");
  self.$require("hyperloop/store/mixin");
  self.$require("react/state");
  if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    } else {
    return nil
  };
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/state_wrapper"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$instance_variable_get', '$__from__', '$=~', '$respond_to?', '$deprecation_warning', '$gsub', '$__send__', '$mutate', '$pre_component_method_missing']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $StateWrapper(){};
      var self = $StateWrapper = $klass($base, $super, 'StateWrapper', $StateWrapper);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      Opal.defn(self, '$[]', TMP_1 = function(state) {
        var self = this;

        return self.$__from__().$instance_variable_get("@native").state[state] || nil;
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$[]=', TMP_2 = function(state, new_value) {
        var self = this;

        return self.$__from__().$instance_variable_get("@native").state[state] = new_value;
      }, TMP_2.$$arity = 2);

      Opal.alias(self, 'pre_component_method_missing', 'method_missing');

      return (Opal.defn(self, '$method_missing', TMP_3 = function $$method_missing(method, $a_rest) {
        var $b, $c, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ((($b = ($c = method['$=~'](/\!$/), $c !== false && $c !== nil && $c != null ?self.$__from__()['$respond_to?']("deprecation_warning") : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$__from__().$deprecation_warning("The mutator 'state." + (method) + "' has been deprecated.  Use 'mutate." + (method.$gsub(/\!$/, "")) + "' instead.");
          return ($b = self.$__from__().$mutate()).$__send__.apply($b, [method.$gsub(/\!$/, "")].concat(Opal.to_a(args)));
          } else {
          return ($c = self).$pre_component_method_missing.apply($c, [method].concat(Opal.to_a(args)))
        };
      }, TMP_3.$$arity = -2), nil) && 'method_missing';
    })($scope.base, $scope.get('BaseStoreClass'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/component/api"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$!', '$set_or_replace_state_or_prop', '$to_proc', '$private', '$raise', '$shallow_to_n', '$call']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $API, self = $API = $module($base, 'API');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        Opal.defn(self, '$dom_node', TMP_1 = function $$dom_node() {
          var $a, self = this;

          if ((($a = ((typeof ReactDOM === 'undefined' || typeof ReactDOM.findDOMNode === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ReactDOM.findDOMNode(self.native);
          } else if ((($a = ((typeof React.findDOMNode === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return React.findDOMNode(self.native);
            } else {
            return self.native.getDOMNode;
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$mounted?', TMP_2 = function() {
          var self = this;

          return self.native.isMounted();
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$force_update!', TMP_3 = function() {
          var self = this;

          return self.native.forceUpdate();
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$set_props', TMP_4 = function $$set_props(prop) {
          var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, prop, "setProps");
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$set_props!', TMP_5 = function(prop) {
          var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

          TMP_5.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, prop, "replaceProps");
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$set_state', TMP_6 = function $$set_state(state) {
          var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil;

          TMP_6.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, state, "setState");
        }, TMP_6.$$arity = 1);

        Opal.defn(self, '$set_state!', TMP_7 = function(state) {
          var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          TMP_7.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, state, "replaceState");
        }, TMP_7.$$arity = 1);

        self.$private();

        Opal.defn(self, '$set_or_replace_state_or_prop', TMP_8 = function $$set_or_replace_state_or_prop(state_or_prop, method) {
          var $a, self = this, $iter = TMP_8.$$p, block = $iter || nil;
          if (self["native"] == null) self["native"] = nil;

          TMP_8.$$p = null;
          if ((($a = self["native"]) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("No native ReactComponent associated")
          };
          
          self["native"][method](state_or_prop.$shallow_to_n(), function(){
            (function() {if (block !== false && block !== nil && block != null) {
            return block.$call()
            } else {
            return nil
          }; return nil; })()
          });
        ;
        }, TMP_8.$$arity = 2);
      })($scope.base)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/component/class_methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$deprecation_warning', '$==', '$[]', '$message', '$backtrace', '$>', '$length', '$!', '$append_backtrace', '$join', '$raise', '$<<', '$each', '$is_a?', '$type', '$define_method', '$render', '$instance_eval', '$to_proc', '$empty?', '$method_missing', '$haml_class_name', '$new', '$props_wrapper', '$validator', '$validate', '$+', '$name', '$count', '$default_props', '$build', '$first', '$delete', '$merge!', '$optional', '$requires', '$allow_undefined_props=', '$undefined_props', '$props', '$arity', '$last', '$pop', '$state', '$[]=', '$__send__', '$mutate', '$singleton_class', '$native_mixins', '$static_call_backs', '$split', '$Native', '$to_n', '$add_item_to_tree', '$create_native_react_class', '$reverse', '$import_native_component', '$eval_native_react_component', '$!=', '$class', '$inject']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_7, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_20, TMP_21, TMP_24, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_34, TMP_36;

        Opal.defn(self, '$deprecation_warning', TMP_1 = function $$deprecation_warning(message) {
          var self = this;

          return (($scope.get('React')).$$scope.get('Component')).$deprecation_warning(self, message);
        }, TMP_1.$$arity = 1);

        Opal.defn(self, '$reactrb_component?', TMP_2 = function() {
          var self = this;

          return true;
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$backtrace', TMP_3 = function $$backtrace($a_rest) {
          var $b, self = this, args;
          if (self.dont_catch_exceptions == null) self.dont_catch_exceptions = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          self.dont_catch_exceptions = (args['$[]'](0)['$==']("none"));
          return self.backtrace_off = ((($b = self.dont_catch_exceptions) !== false && $b !== nil && $b != null) ? $b : (args['$[]'](0)['$==']("off")));
        }, TMP_3.$$arity = -1);

        Opal.defn(self, '$process_exception', TMP_4 = function $$process_exception(e, component, reraise) {
          var $a, $b, $c, self = this, message = nil;
          if (self.dont_catch_exceptions == null) self.dont_catch_exceptions = nil;
          if (self.backtrace_off == null) self.backtrace_off = nil;

          if (reraise == null) {
            reraise = self.dont_catch_exceptions;
          }
          if ((($a = self.dont_catch_exceptions) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            message = ["Exception raised while rendering " + (component) + ": " + (e.$message())];
            if ((($a = ($b = ($c = e.$backtrace(), $c !== false && $c !== nil && $c != null ?$rb_gt(e.$backtrace().$length(), 1) : $c), $b !== false && $b !== nil && $b != null ?self.backtrace_off['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.$append_backtrace(message, e.$backtrace())};
            console.error(message.$join("\n"));
          };
          if (reraise !== false && reraise !== nil && reraise != null) {
            return self.$raise(e)
            } else {
            return nil
          };
        }, TMP_4.$$arity = -3);

        Opal.defn(self, '$append_backtrace', TMP_6 = function $$append_backtrace(message_array, backtrace) {
          var $a, $b, TMP_5, self = this;

          message_array['$<<']("    " + (backtrace['$[]'](0)));
          return ($a = ($b = backtrace['$[]']($range(1, -1, false))).$each, $a.$$p = (TMP_5 = function(line){var self = TMP_5.$$s || this;
if (line == null) line = nil;
          return message_array['$<<'](line)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
        }, TMP_6.$$arity = 2);

        Opal.defn(self, '$render', TMP_7 = function $$render(container, params) {
          var $a, $b, TMP_8, $c, TMP_10, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          if (container == null) {
            container = nil;
          }
          if (params == null) {
            params = $hash2([], {});
          }
          TMP_7.$$p = null;
          if (container !== false && container !== nil && container != null) {
            if ((($a = container['$is_a?']((($scope.get('React')).$$scope.get('Element')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              container = container.$type()};
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $c, $d, TMP_9;

            return ($c = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $c.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $e, $f;

              if (block !== false && block !== nil && block != null) {
                  return ($e = ($f = self).$instance_eval, $e.$$p = block.$to_proc(), $e).call($f)
                  } else {
                  return nil
                }}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $c).call($d, container, params)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b, "render");
            } else {
            return ($a = ($c = self).$define_method, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $d, $e;

            return ($d = ($e = self).$instance_eval, $d.$$p = block.$to_proc(), $d).call($e)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($c, "render")
          };
        }, TMP_7.$$arity = -1);

        Opal.defn(self, '$method_missing', TMP_11 = function $$method_missing(name, $a_rest) {
          var $b, $c, $d, self = this, args, $iter = TMP_11.$$p, children = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_11.$$p = null;
          if ((($b = args['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            ($b = ($c = $scope.get('Object')).$method_missing, $b.$$p = children.$to_proc(), $b).apply($c, [name].concat(Opal.to_a(args)))
          };
          return ($b = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = children.$to_proc(), $b).call($d, self, $hash2(["class"], {"class": (($scope.get('React')).$$scope.get('Element')).$haml_class_name(name)}));
        }, TMP_11.$$arity = -2);

        Opal.defn(self, '$validator', TMP_12 = function $$validator() {
          var $a, self = this;
          if (self.validator == null) self.validator = nil;

          return ((($a = self.validator) !== false && $a !== nil && $a != null) ? $a : self.validator = $scope.get('Validator').$new(self.$props_wrapper()));
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$prop_types', TMP_13 = function $$prop_types() {
          var $a, self = this;

          if ((($a = self.$validator()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $hash2(["_componentValidator"], {"_componentValidator": 
              function(props, propName, componentName) {
                var errors = self.$validator().$validate($scope.get('Hash').$new(props));
                var error = new Error($rb_plus("In component `" + (self.$name()) + "`\n", (errors).$join("\n")));
                return (function() {if ((($a = $rb_gt((errors).$count(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return error;
              } else {
              return undefined;
            }; return nil; })();
              }
            })
            } else {
            return $hash2([], {})
          };
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$default_props', TMP_14 = function $$default_props() {
          var self = this;

          return self.$validator().$default_props();
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$params', TMP_15 = function $$params() {
          var $a, $b, self = this, $iter = TMP_15.$$p, block = $iter || nil;

          TMP_15.$$p = null;
          return ($a = ($b = self.$validator()).$build, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$props_wrapper', TMP_16 = function $$props_wrapper() {
          var $a, self = this;
          if (self.props_wrapper == null) self.props_wrapper = nil;

          return ((($a = self.props_wrapper) !== false && $a !== nil && $a != null) ? $a : self.props_wrapper = $scope.get('Class').$new($scope.get('PropsWrapper')));
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$param', TMP_17 = function $$param($a_rest) {
          var $b, self = this, args, options = nil, name = nil, default$ = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = args['$[]'](0)['$is_a?']($scope.get('Hash'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            options = args['$[]'](0);
            name = options.$first()['$[]'](0);
            default$ = options.$first()['$[]'](1);
            options.$delete(name);
            options['$merge!']($hash2(["default"], {"default": default$}));
            } else {
            name = args['$[]'](0);
            options = ((($b = args['$[]'](1)) !== false && $b !== nil && $b != null) ? $b : $hash2([], {}));
          };
          if ((($b = options['$[]']("default")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self.$validator().$optional(name, options)
            } else {
            return self.$validator().$requires(name, options)
          };
        }, TMP_17.$$arity = -1);

        Opal.defn(self, '$collect_other_params_as', TMP_20 = function $$collect_other_params_as(name) {
          var $a, $b, TMP_18, $c, TMP_19, self = this, validator_in_lexical_scope = nil, validator_in_lexial_scope = nil;

          (($a = [true]), $b = self.$validator(), $b['$allow_undefined_props='].apply($b, $a), $a[$a.length-1]);
          validator_in_lexical_scope = self.$validator();
          ($a = ($b = self.$props_wrapper()).$define_method, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this, $c;
            if (self._all_others == null) self._all_others = nil;

          return ((($c = self._all_others) !== false && $c !== nil && $c != null) ? $c : self._all_others = validator_in_lexical_scope.$undefined_props(self.$props()))}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $a).call($b, name);
          validator_in_lexial_scope = self.$validator();
          return ($a = ($c = self.$props_wrapper()).$define_method, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this, $d;
            if (self._all_others == null) self._all_others = nil;

          return ((($d = self._all_others) !== false && $d !== nil && $d != null) ? $d : self._all_others = validator_in_lexial_scope.$undefined_props(self.$props()))}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $a).call($c, name);
        }, TMP_20.$$arity = 1);

        Opal.defn(self, '$define_state', TMP_21 = function $$define_state($a_rest) {
          var $b, $c, TMP_22, $d, TMP_23, self = this, states, $iter = TMP_21.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          states = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            states[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_21.$$p = null;
          self.$deprecation_warning("'define_state' is deprecated. Use the 'state' macro to declare states.");
          default_initial_value = (function() {if ((($b = ((($c = block !== false && block !== nil && block != null) ? block.$arity()['$=='](0) : block))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return Opal.yieldX(block, []);
            } else {
            return nil
          }; return nil; })();
          states_hash = (function() {if ((($b = (states.$last()['$is_a?']($scope.get('Hash')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return states.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          ($b = ($c = states).$each, $b.$$p = (TMP_22 = function(name){var self = TMP_22.$$s || this;
if (name == null) name = nil;
          return self.$state($hash(name, default_initial_value))}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $b).call($c);
          return ($b = ($d = states_hash).$each, $b.$$p = (TMP_23 = function(name, value){var self = TMP_23.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          return self.$state($hash(name, value))}, TMP_23.$$s = self, TMP_23.$$arity = 2, TMP_23), $b).call($d);
        }, TMP_21.$$arity = -1);

        Opal.defn(self, '$export_state', TMP_24 = function $$export_state($a_rest) {
          var $b, $c, TMP_25, $d, TMP_26, self = this, states, $iter = TMP_24.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          states = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            states[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_24.$$p = null;
          self.$deprecation_warning("'export_state' is deprecated. Use the 'state' macro to declare states.");
          default_initial_value = (function() {if ((($b = ((($c = block !== false && block !== nil && block != null) ? block.$arity()['$=='](0) : block))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return Opal.yieldX(block, []);
            } else {
            return nil
          }; return nil; })();
          states_hash = (function() {if ((($b = (states.$last()['$is_a?']($scope.get('Hash')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return states.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          ($b = ($c = states).$each, $b.$$p = (TMP_25 = function(name){var self = TMP_25.$$s || this;
if (name == null) name = nil;
          return states_hash['$[]='](name, default_initial_value)}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $b).call($c);
          return ($b = ($d = states_hash).$each, $b.$$p = (TMP_26 = function(name, value){var self = TMP_26.$$s || this, $a, $e, TMP_27;
if (name == null) name = nil;if (value == null) value = nil;
          self.$state($hash(name, value, "scope", "class", "reader", true));
            return ($a = ($e = self.$singleton_class()).$define_method, $a.$$p = (TMP_27 = function($f_rest){var self = TMP_27.$$s || this, args, $g;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return ($g = self.$mutate()).$__send__.apply($g, [name].concat(Opal.to_a(args)))}, TMP_27.$$s = self, TMP_27.$$arity = -1, TMP_27), $a).call($e, "" + (name) + "!");}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26), $b).call($d);
        }, TMP_24.$$arity = -1);

        Opal.defn(self, '$native_mixin', TMP_28 = function $$native_mixin(item) {
          var self = this;

          return self.$native_mixins()['$<<'](item);
        }, TMP_28.$$arity = 1);

        Opal.defn(self, '$native_mixins', TMP_29 = function $$native_mixins() {
          var $a, self = this;
          if (self.native_mixins == null) self.native_mixins = nil;

          return ((($a = self.native_mixins) !== false && $a !== nil && $a != null) ? $a : self.native_mixins = []);
        }, TMP_29.$$arity = 0);

        Opal.defn(self, '$static_call_back', TMP_30 = function $$static_call_back(name) {
          var self = this, $iter = TMP_30.$$p, block = $iter || nil;

          TMP_30.$$p = null;
          return self.$static_call_backs()['$[]='](name, block);
        }, TMP_30.$$arity = 1);

        Opal.defn(self, '$static_call_backs', TMP_31 = function $$static_call_backs() {
          var $a, self = this;
          if (self.static_call_backs == null) self.static_call_backs = nil;

          return ((($a = self.static_call_backs) !== false && $a !== nil && $a != null) ? $a : self.static_call_backs = $hash2([], {}));
        }, TMP_31.$$arity = 0);

        Opal.defn(self, '$export_component', TMP_32 = function $$export_component(opts) {
          var $a, self = this, export_name = nil, first_name = nil;

          if (opts == null) {
            opts = $hash2([], {});
          }
          export_name = (((($a = opts['$[]']("as")) !== false && $a !== nil && $a != null) ? $a : self.$name())).$split("::");
          first_name = export_name.$first();
          return self.$Native(Opal.global)['$[]='](first_name, self.$add_item_to_tree(self.$Native(Opal.global)['$[]'](first_name), $rb_plus([(($scope.get('React')).$$scope.get('API')).$create_native_react_class(self)], export_name['$[]']($range(1, -1, false)).$reverse())).$to_n());
        }, TMP_32.$$arity = -1);

        Opal.defn(self, '$imports', TMP_34 = function $$imports(component_name) {
          var $a, $b, TMP_33, self = this, e = nil;

          try {
          try {
            (($scope.get('React')).$$scope.get('API')).$import_native_component(self, (($scope.get('React')).$$scope.get('API')).$eval_native_react_component(component_name));
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this;

            return nil}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33), $a).call($b, "render");
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$raise("" + (self) + " cannot import '" + (component_name) + "': " + (e.$message()) + ".")
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
          } finally {
            self
          };
        }, TMP_34.$$arity = 1);

        Opal.defn(self, '$add_item_to_tree', TMP_36 = function $$add_item_to_tree(current_tree, new_item) {
          var $a, $b, TMP_35, self = this;

          if ((($a = ((($b = self.$Native(current_tree).$class()['$!=']((($scope.get('Native')).$$scope.get('Object')))) !== false && $b !== nil && $b != null) ? $b : new_item.$length()['$=='](1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = new_item).$inject, $a.$$p = (TMP_35 = function(a, e){var self = TMP_35.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
            return $hash(e, a)}, TMP_35.$$s = self, TMP_35.$$arity = 2, TMP_35), $a).call($b)
            } else {
            self.$Native(current_tree)['$[]='](new_item.$last(), self.$add_item_to_tree(self.$Native(current_tree)['$[]'](new_item.$last()), new_item['$[]']($range(0, -2, false))));
            return current_tree;
          };
        }, TMP_36.$$arity = 2);
      })($scope.base)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/component/props_wrapper"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$==', '$define_method', '$value_for', '$>', '$count', '$call', '$[]', '$props', '$to_proc', '$fetch_from_cache', '$respond_to?', '$_react_param_conversion', '$is_a?', '$collect', '$private', '$cache', '$equal?', '$tap', '$[]=', '$new', '$component', '$instance_variable_get']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $PropsWrapper(){};
        var self = $PropsWrapper = $klass($base, $super, 'PropsWrapper', $PropsWrapper);

        var def = self.$$proto, $scope = self.$$scope, TMP_7, TMP_8, TMP_9, TMP_11, TMP_13, TMP_14, TMP_15;

        def.cache = nil;
        self.$attr_reader("component");

        Opal.defs(self, '$define_param', TMP_7 = function $$define_param(name, param_type) {
          var $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, self = this;

          if (param_type['$==']($scope.get('Observable'))) {
            ($a = ($b = self).$define_method, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

            return self.$value_for(name)}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b, "" + (name));
            return ($a = ($c = self).$define_method, $a.$$p = (TMP_2 = function($d_rest){var self = TMP_2.$$s || this, args, $e, current_value = nil;
              if (self.dont_update_state == null) self.dont_update_state = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            current_value = self.$value_for(name);
              if ((($e = $rb_gt(args.$count(), 0)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                self.$props()['$[]'](name).$call(args['$[]'](0));
                return current_value;
                } else {
                
                try {(function() {if ((($e = self.dont_update_state) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                  return nil
                  } else {
                  return self.$props()['$[]'](name).$call(current_value)
                }; return nil; })() } catch ($err) { 
                  if (Opal.rescue($err, [$scope.get('StandardError')])) {
                  nil
                  } else { throw $err; } };
                return self.$props()['$[]'](name);
              };}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2), $a).call($c, "" + (name) + "!");
          } else if (param_type['$==']($scope.get('Proc'))) {
            return ($a = ($d = self).$define_method, $a.$$p = (TMP_3 = function($e_rest){var self = TMP_3.$$s || this, block, args, $f, $g;

              block = TMP_3.$$p || nil, TMP_3.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            if ((($f = self.$props()['$[]'](name)) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                return ($f = ($g = self.$props()['$[]'](name)).$call, $f.$$p = block.$to_proc(), $f).apply($g, Opal.to_a(args))
                } else {
                return nil
              }}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3), $a).call($d, "" + (name))
            } else {
            return ($a = ($e = self).$define_method, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $f, $g, TMP_5;

            return ($f = ($g = self).$fetch_from_cache, $f.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $h, $i, TMP_6;

              if ((($h = param_type['$respond_to?']("_react_param_conversion")) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                  return param_type.$_react_param_conversion(self.$props()['$[]'](name), nil)
                } else if ((($h = ($i = param_type['$is_a?']($scope.get('Array')), $i !== false && $i !== nil && $i != null ?param_type['$[]'](0)['$respond_to?']("_react_param_conversion") : $i)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                  return ($h = ($i = self.$props()['$[]'](name)).$collect, $h.$$p = (TMP_6 = function(param){var self = TMP_6.$$s || this;
if (param == null) param = nil;
                  return param_type['$[]'](0).$_react_param_conversion(param, nil)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $h).call($i)
                  } else {
                  return self.$props()['$[]'](name)
                }}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $f).call($g, name)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($e, "" + (name))
          };
        }, TMP_7.$$arity = 2);

        Opal.defn(self, '$initialize', TMP_8 = function $$initialize(component) {
          var self = this;

          return self.component = component;
        }, TMP_8.$$arity = 1);

        Opal.defn(self, '$[]', TMP_9 = function(prop) {
          var self = this;

          return self.$props()['$[]'](prop);
        }, TMP_9.$$arity = 1);

        self.$private();

        Opal.defn(self, '$fetch_from_cache', TMP_11 = function $$fetch_from_cache(name) {
          var $a, $b, TMP_10, self = this, $iter = TMP_11.$$p, $yield = $iter || nil, last = nil, value = nil;

          TMP_11.$$p = null;
          $b = self.$cache()['$[]'](name), $a = Opal.to_ary($b), last = ($a[0] == null ? nil : $a[0]), value = ($a[1] == null ? nil : $a[1]), $b;
          if ((($a = last['$equal?'](self.$props()['$[]'](name))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return value};
          return ($a = ($b = Opal.yieldX($yield, [])).$tap, $a.$$p = (TMP_10 = function(value){var self = TMP_10.$$s || this;
if (value == null) value = nil;
          return self.$cache()['$[]='](name, [self.$props()['$[]'](name), value])}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b);
        }, TMP_11.$$arity = 1);

        Opal.defn(self, '$cache', TMP_13 = function $$cache() {
          var $a, $b, $c, TMP_12, self = this;

          return ((($a = self.cache) !== false && $a !== nil && $a != null) ? $a : self.cache = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_12 = function(h, k){var self = TMP_12.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, [])}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $b).call($c));
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$props', TMP_14 = function $$props() {
          var self = this;

          return self.$component().$props();
        }, TMP_14.$$arity = 0);

        return (Opal.defn(self, '$value_for', TMP_15 = function $$value_for(name) {
          var $a, self = this;

          if ((($a = self['$[]'](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self['$[]'](name).$instance_variable_get("@value")
            } else {
            return nil
          };
        }, TMP_15.$$arity = 1), nil) && 'value_for';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/component"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$class_eval', '$class_attribute', '$define_callback', '$extend', '$deprecation_warning', '$name', '$class', '$init_store', '$call', '$[]', '$params', '$event_camelize', '$to_s', '$on_opal_client?', '$load_context', '$set_state_context_to', '$run_callback', '$process_exception', '$update_states_to_observe', '$new', '$remove', '$attr_reader', '$==', '$set_state', '$to_f', '$now', '$method_defined?', '$raise', '$render', '$respond_to?', '$waiting_on_resources', '$initialize_states', '$define_state', '$to_proc', '$include?', '$<<', '$log']);
  self.$require("react/ext/string");
  self.$require("react/ext/hash");
  self.$require("active_support/core_ext/class/attribute");
  self.$require("react/callbacks");
  self.$require("react/rendering_context");
  self.$require("hyper-store");
  self.$require("react/state_wrapper");
  self.$require("react/component/api");
  self.$require("react/component/class_methods");
  self.$require("react/component/props_wrapper");
  self.$require("native");
  (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Component(){};
      var self = $Component = $klass($base, $super, 'Component', $Component);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base) {
        var $Mixin, self = $Mixin = $module($base, 'Mixin');

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_10, TMP_12, TMP_14, TMP_16, TMP_18, TMP_19, $a, TMP_20, TMP_23, TMP_24, TMP_25;

        Opal.defs(self, '$included', TMP_2 = function $$included(base) {
          var $a, $b, TMP_1, self = this;

          base.$include((($scope.get('Store')).$$scope.get('Mixin')));
          base.$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('API')));
          base.$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Callbacks')));
          base.$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Tags')));
          base.$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('DslInstanceMethods')));
          base.$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('ShouldComponentUpdate')));
          ($a = ($b = base).$class_eval, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

          self.$class_attribute("initial_state");
            self.$define_callback("before_mount");
            self.$define_callback("after_mount");
            self.$define_callback("before_receive_props");
            self.$define_callback("before_update");
            self.$define_callback("after_update");
            return self.$define_callback("before_unmount");}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
          return base.$extend((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('ClassMethods')));
        }, TMP_2.$$arity = 1);

        Opal.defs(self, '$deprecation_warning', TMP_3 = function $$deprecation_warning(message) {
          var self = this;

          return (($scope.get('React')).$$scope.get('Component')).$deprecation_warning(self.$name(), message);
        }, TMP_3.$$arity = 1);

        Opal.defn(self, '$deprecation_warning', TMP_4 = function $$deprecation_warning(message) {
          var self = this;

          return (($scope.get('React')).$$scope.get('Component')).$deprecation_warning(self.$class().$name(), message);
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$initialize', TMP_5 = function $$initialize(native_element) {
          var self = this;

          self["native"] = native_element;
          return self.$init_store();
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$emit', TMP_6 = function $$emit(event_name, $a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          return ($b = self.$params()['$[]']("_on" + (event_name.$to_s().$event_camelize()))).$call.apply($b, Opal.to_a(args));
        }, TMP_6.$$arity = -2);

        Opal.defn(self, '$component_will_mount', TMP_8 = function $$component_will_mount() {
          var $a, $b, TMP_7, self = this, e = nil;

          try {
            if ((($a = (($scope.get('React')).$$scope.get('IsomorphicHelpers'))['$on_opal_client?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              (($scope.get('React')).$$scope.get('IsomorphicHelpers')).$load_context(true)};
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

            return self.$run_callback("before_mount")}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b, self);
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_10 = function $$component_did_mount() {
          var $a, $b, TMP_9, self = this, e = nil;

          try {
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            self.$run_callback("after_mount");
              return (($scope.get('React')).$$scope.get('State')).$update_states_to_observe();}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($b, self)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$component_will_receive_props', TMP_12 = function $$component_will_receive_props(next_props) {
          var $a, $b, TMP_11, self = this, e = nil;

          try {
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

            return self.$run_callback("before_receive_props", $scope.get('Hash').$new(next_props))}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($b, self)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_12.$$arity = 1);

        Opal.defn(self, '$component_will_update', TMP_14 = function $$component_will_update(next_props, next_state) {
          var $a, $b, TMP_13, self = this, e = nil;

          try {
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

            return self.$run_callback("before_update", $scope.get('Hash').$new(next_props), $scope.get('Hash').$new(next_state))}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b, self)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_14.$$arity = 2);

        Opal.defn(self, '$component_did_update', TMP_16 = function $$component_did_update(prev_props, prev_state) {
          var $a, $b, TMP_15, self = this, e = nil;

          try {
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

            self.$run_callback("after_update", $scope.get('Hash').$new(prev_props), $scope.get('Hash').$new(prev_state));
              return (($scope.get('React')).$$scope.get('State')).$update_states_to_observe();}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $a).call($b, self)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_16.$$arity = 2);

        Opal.defn(self, '$component_will_unmount', TMP_18 = function $$component_will_unmount() {
          var $a, $b, TMP_17, self = this, e = nil;

          try {
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

            self.$run_callback("before_unmount");
              return (($scope.get('React')).$$scope.get('State')).$remove();}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $a).call($b, self)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_18.$$arity = 0);

        self.$attr_reader("waiting_on_resources");

        Opal.defn(self, '$update_react_js_state', TMP_19 = function $$update_react_js_state(object, name, value) {
          var self = this;

          if (object !== false && object !== nil && object != null) {
            if (object['$=='](self)) {
              } else {
              name = "" + (object.$class()) + "." + (name)
            };
            return self.$set_state($hash("***_state_updated_at-***", $scope.get('Time').$now().$to_f(), name, value));
            } else {
            return self.$set_state($hash(name, value))
          };
        }, TMP_19.$$arity = 3);

        if ((($a = self['$method_defined?']("render")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          Opal.defn(self, '$render', TMP_20 = function $$render() {
            var self = this;

            return self.$raise("no render defined");
          }, TMP_20.$$arity = 0)
        };

        Opal.defn(self, '$_render_wrapper', TMP_23 = function $$_render_wrapper() {
          var $a, $b, TMP_21, self = this, e = nil;

          try {
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this, $c, $d, TMP_22, element = nil;

            element = ($c = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $c.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this, $e;

              return ((($e = self.$render()) !== false && $e !== nil && $e != null) ? $e : "")}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $c).call($d, nil);
              if ((($c = element['$respond_to?']("waiting_on_resources")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                self.waiting_on_resources = element.$waiting_on_resources()};
              return element;}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $a).call($b, self, true)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_23.$$arity = 0);

        Opal.defn(self, '$watch', TMP_24 = function $$watch(value) {
          var self = this, $iter = TMP_24.$$p, on_change = $iter || nil;

          TMP_24.$$p = null;
          return $scope.get('Observable').$new(value, on_change);
        }, TMP_24.$$arity = 1);

        Opal.defn(self, '$define_state', TMP_25 = function $$define_state($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_25.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_25.$$p = null;
          return (($scope.get('React')).$$scope.get('State')).$initialize_states(self, ($b = ($c = self.$class()).$define_state, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args)));
        }, TMP_25.$$arity = -1);
      })($scope.base)
    })($scope.base, null)
  })($scope.base);
  (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope, TMP_26, TMP_27;

      Opal.defs(self, '$included', TMP_26 = function $$included(base) {
        var self = this;

        self.$deprecation_warning(base, "The module name React::Component has been deprecated.  Use Hyperloop::Component::Mixin instead.");
        return base.$include((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('Mixin')));
      }, TMP_26.$$arity = 1);

      Opal.defs(self, '$deprecation_warning', TMP_27 = function $$deprecation_warning(name, message) {
        var $a, self = this;
        if (self.deprecation_messages == null) self.deprecation_messages = nil;

        ((($a = self.deprecation_messages) !== false && $a !== nil && $a != null) ? $a : self.deprecation_messages = []);
        message = "Warning: Deprecated feature used in " + (name) + ". " + (message);
        if ((($a = self.deprecation_messages['$include?'](message)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          self.deprecation_messages['$<<'](message);
          return (($scope.get('React')).$$scope.get('IsomorphicHelpers')).$log(message, "warning");
        };
      }, TMP_27.$$arity = 2);
    })($scope.base);

    (function($base) {
      var $ComponentNoNotice, self = $ComponentNoNotice = $module($base, 'ComponentNoNotice');

      var def = self.$$proto, $scope = self.$$scope, TMP_28;

      Opal.defs(self, '$included', TMP_28 = function $$included(base) {
        var self = this;

        return base.$include((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('Mixin')));
      }, TMP_28.$$arity = 1)
    })($scope.base);
  })($scope.base);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    nil
  })($scope.base);
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/children"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$to_enum', '$length', '$>', '$new', '$call', '$<<', '$alias_method']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Children(){};
      var self = $Children = $klass($base, $super, 'Children', $Children);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4;

      def.children = def.length = nil;
      self.$include($scope.get('Enumerable'));

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(children) {
        var self = this;

        return self.children = children;
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$each', TMP_2 = function $$each() {
        var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil, collection = nil, element = nil;

        TMP_2.$$p = null;
        if ((block !== nil)) {
          } else {
          return ($a = ($b = self).$to_enum, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$length()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b, "each")
        };
        if ((($a = $rb_gt(self.$length(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return []
        };
        collection = [];
        
        React.Children.forEach(self.children, function(context){
          element = (($scope.get('React')).$$scope.get('Element')).$new(context)
        block.$call(element)
        collection['$<<'](element)
        })
      ;
        return collection;
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$length', TMP_4 = function $$length() {
        var $a, self = this;

        return ((($a = self.length) !== false && $a !== nil && $a != null) ? $a : self.length = React.Children.count(self.children));
      }, TMP_4.$$arity = 0);

      return self.$alias_method("size", "length");
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/component/dsl_instance_methods"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$new', '$props_wrapper', '$class']);
  self.$require("react/children");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $DslInstanceMethods, self = $DslInstanceMethods = $module($base, 'DslInstanceMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

        Opal.defn(self, '$children', TMP_1 = function $$children() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return $scope.get('Children').$new(self["native"].props.children);
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$params', TMP_2 = function $$params() {
          var $a, self = this;
          if (self.params == null) self.params = nil;

          return ((($a = self.params) !== false && $a !== nil && $a != null) ? $a : self.params = self.$class().$props_wrapper().$new(self));
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$props', TMP_3 = function $$props() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return $scope.get('Hash').$new(self["native"].props);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$refs', TMP_4 = function $$refs() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return $scope.get('Hash').$new(self["native"].refs);
        }, TMP_4.$$arity = 0);
      })($scope.base)
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/component/should_component_update"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$set_state_context_to', '$new', '$respond_to?', '$!', '$call_needs_update', '$props_changed?', '$native_state_changed?', '$define_singleton_method', '$needs_update?', '$!=', '$sort', '$keys', '$props', '$detect']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $ShouldComponentUpdate, self = $ShouldComponentUpdate = $module($base, 'ShouldComponentUpdate');

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_5, TMP_6, TMP_8;

        Opal.defn(self, '$should_component_update?', TMP_2 = function(native_next_props, native_next_state) {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c, next_params = nil;

          next_params = $scope.get('Hash').$new(native_next_props);
            if ((($c = self['$respond_to?']("needs_update?")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$call_needs_update(next_params, native_next_state)['$!']()['$!']()
              } else {
              return (((($c = self['$props_changed?'](next_params)) !== false && $c !== nil && $c != null) ? $c : self['$native_state_changed?'](native_next_state)))['$!']()['$!']()
            };}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b, self, false);
        }, TMP_2.$$arity = 2);

        Opal.defn(self, '$call_needs_update', TMP_5 = function $$call_needs_update(next_params, native_next_state) {
          var $a, $b, TMP_3, $c, TMP_4, self = this, component = nil, next_state = nil;

          component = self;
          ($a = ($b = next_params).$define_singleton_method, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return component['$props_changed?'](self)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b, "changed?");
          next_state = $scope.get('Hash').$new(native_next_state);
          ($a = ($c = next_state).$define_singleton_method, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return component['$native_state_changed?'](native_next_state)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c, "changed?");
          return self['$needs_update?'](next_params, next_state);
        }, TMP_5.$$arity = 2);

        Opal.defn(self, '$native_state_changed?', TMP_6 = function(next_state) {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
          var current_state = self["native"].state
          var normalized_next_state =
            !next_state || Object.keys(next_state).length === 0 || nil == next_state ?
            false : next_state
          var normalized_current_state =
            !current_state || Object.keys(current_state).length === 0 || nil == current_state ?
            false : current_state
          if (!normalized_current_state != !normalized_next_state) return(true)
          if (!normalized_current_state && !normalized_next_state) return(false)
          if (!normalized_current_state['***_state_updated_at-***'] ||
              !normalized_next_state['***_state_updated_at-***']) return(true)
          return (normalized_current_state['***_state_updated_at-***'] !=
                  normalized_next_state['***_state_updated_at-***'])
        ;
        }, TMP_6.$$arity = 1);

        Opal.defn(self, '$props_changed?', TMP_8 = function(next_params) {
          var $a, $b, $c, TMP_7, self = this;

          return ((($a = (self.$props().$keys().$sort()['$!='](next_params.$keys().$sort()))) !== false && $a !== nil && $a != null) ? $a : ($b = ($c = next_params).$detect, $b.$$p = (TMP_7 = function(k, v){var self = TMP_7.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (k == null) k = nil;if (v == null) v = nil;
          return v != self["native"].props[k];}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7), $b).call($c));
        }, TMP_8.$$arity = 1);
      })($scope.base)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/element"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$alias_native', '$attr_reader', '$attr_accessor', '$each', '$merge_event_prop!', '$to_proc', '$to_n', '$shallow_to_n', '$properties', '$empty?', '$render', '$convert_props', '$new', '$type', '$merge', '$block', '$delete', '$as_node', '$rendered?', '$method_missing', '$dup', '$replace', '$build', '$build_new_properties', '$gsub', '$private', '$haml_class_name', '$class', '$[]=', '$join', '$uniq', '$split', '$[]', '$merge!', '$=~', '$merge_component_event_prop!', '$include?', '$event_camelize', '$merge_built_in_event_prop!', '$instance_variable_get', '$merge_deprecated_component_event_prop!', '$Array', '$deprecation_warning']);
  self.$require("react/ext/string");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Element(){};
      var self = $Element = $klass($base, $super, 'Element', $Element);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_7, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15;

      def.type = def.properties = nil;
      self.$include($scope.get('Native'));

      self.$alias_native("element_type", "type");

      self.$alias_native("props", "props");

      self.$attr_reader("type");

      self.$attr_reader("properties");

      self.$attr_reader("block");

      self.$attr_accessor("waiting_on_resources");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(native_element, type, properties, block) {
        var $a, $b, self = this;

        if (type == null) {
          type = nil;
        }
        if (properties == null) {
          properties = $hash2([], {});
        }
        if (block == null) {
          block = nil;
        }
        self.type = type;
        self.properties = ((($a = ((function() {if ((($b = typeof properties === 'undefined') !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return nil
          } else {
          return properties
        }; return nil; })())) !== false && $a !== nil && $a != null) ? $a : $hash2([], {}));
        self.block = block;
        return self["native"] = native_element;
      }, TMP_1.$$arity = -2);

      Opal.defn(self, '$on', TMP_2 = function $$on($a_rest) {
        var $b, $c, TMP_3, self = this, event_names, $iter = TMP_2.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        event_names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          event_names[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_2.$$p = null;
        ($b = ($c = event_names).$each, $b.$$p = (TMP_3 = function(event_name){var self = TMP_3.$$s || this, $a, $d;
if (event_name == null) event_name = nil;
        return ($a = ($d = self)['$merge_event_prop!'], $a.$$p = block.$to_proc(), $a).call($d, event_name)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $b).call($c);
        self["native"] = React.cloneElement(self.$to_n(), self.$properties().$shallow_to_n());
        return self;
      }, TMP_2.$$arity = -1);

      Opal.defn(self, '$render', TMP_4 = function $$render(props) {
        var $a, self = this, $iter = TMP_4.$$p, new_block = $iter || nil;

        if (props == null) {
          props = $hash2([], {});
        }
        TMP_4.$$p = null;
        if ((($a = props['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (($scope.get('React')).$$scope.get('RenderingContext')).$render(self)
          } else {
          props = $scope.get('API').$convert_props(props);
          return (($scope.get('React')).$$scope.get('RenderingContext')).$render($scope.get('Element').$new(React.cloneElement(self.$to_n(), props.$shallow_to_n()), self.$type(), self.$properties().$merge(props), self.$block()));
        };
      }, TMP_4.$$arity = -1);

      Opal.defn(self, '$delete', TMP_5 = function() {
        var self = this;

        return (($scope.get('React')).$$scope.get('RenderingContext')).$delete(self);
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$as_node', TMP_6 = function $$as_node() {
        var self = this;

        return (($scope.get('React')).$$scope.get('RenderingContext')).$as_node(self);
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$method_missing', TMP_7 = function $$method_missing(class_name, args) {
        var $a, $b, $c, TMP_8, self = this, $iter = TMP_7.$$p, new_block = $iter || nil;

        if (args == null) {
          args = $hash2([], {});
        }
        TMP_7.$$p = null;
        if ((($a = self['$rendered?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return ($a = ($b = self.$dup().$render()).$method_missing, $a.$$p = new_block.$to_proc(), $a).call($b, class_name, args)
        };
        return (($scope.get('React')).$$scope.get('RenderingContext')).$replace(self, ($a = ($c = $scope.get('RenderingContext')).$build, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $d, $e;

        return ($d = ($e = $scope.get('RenderingContext')).$render, $d.$$p = new_block.$to_proc(), $d).call($e, self.$type(), self.$build_new_properties(class_name, args))}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($c));
      }, TMP_7.$$arity = -2);

      Opal.defn(self, '$rendered?', TMP_9 = function() {
        var self = this;

        return (($scope.get('React')).$$scope.get('RenderingContext'))['$rendered?'](self);
      }, TMP_9.$$arity = 0);

      Opal.defs(self, '$haml_class_name', TMP_10 = function $$haml_class_name(class_name) {
        var self = this;

        return class_name.$gsub(/__|_/, $hash2(["__", "_"], {"__": "_", "_": "-"}));
      }, TMP_10.$$arity = 1);

      self.$private();

      Opal.defn(self, '$build_new_properties', TMP_11 = function $$build_new_properties(class_name, args) {
        var self = this, new_props = nil;

        class_name = self.$class().$haml_class_name(class_name);
        new_props = self.$properties().$dup();
        new_props['$[]=']("className", ((((((((("        ") + (class_name)) + " ") + (new_props['$[]']("className"))) + " ") + (args.$delete("class"))) + " ") + (args.$delete("className"))) + "      ").$split(" ").$uniq().$join(" "));
        return new_props['$merge!'](args);
      }, TMP_11.$$arity = 2);

      Opal.defn(self, '$merge_event_prop!', TMP_12 = function(event_name) {
        var $a, $b, $c, $d, $e, $f, self = this, $iter = TMP_12.$$p, block = $iter || nil, name = nil;

        TMP_12.$$p = null;
        if ((($a = event_name['$=~'](/^<(.+)>$/)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self)['$merge_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($b, event_name.$gsub(/^<(.+)>$/, "\\1"))
        } else if ((($a = (((($scope.get('React')).$$scope.get('Event'))).$$scope.get('BUILT_IN_EVENTS'))['$include?'](name = "on" + (event_name.$event_camelize()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($c = self)['$merge_built_in_event_prop!'], $a.$$p = block.$to_proc(), $a).call($c, name)
        } else if ((($a = self.type.$instance_variable_get("@native_import")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($d = self)['$merge_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($d, name)
          } else {
          ($a = ($e = self)['$merge_deprecated_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($e, event_name);
          return ($a = ($f = self)['$merge_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($f, "on_" + (event_name));
        };
      }, TMP_12.$$arity = 1);

      Opal.defn(self, '$merge_built_in_event_prop!', TMP_13 = function(prop_name) {
        var self = this, $iter = TMP_13.$$p, $yield = $iter || nil;

        TMP_13.$$p = null;
        return self.properties['$merge!']($hash(prop_name, 
          function(event){
            return Opal.yield1($yield, (($scope.get('React')).$$scope.get('Event')).$new(event))
          }
        ));
      }, TMP_13.$$arity = 1);

      Opal.defn(self, '$merge_component_event_prop!', TMP_14 = function(prop_name) {
        var self = this, $iter = TMP_14.$$p, $yield = $iter || nil;

        TMP_14.$$p = null;
        return self.properties['$merge!']($hash(prop_name, 
          function(){
            return Opal.yieldX($yield, Opal.to_a(self.$Array(arguments)))
          }
        ));
      }, TMP_14.$$arity = 1);

      return (Opal.defn(self, '$merge_deprecated_component_event_prop!', TMP_15 = function(event_name) {
        var self = this, $iter = TMP_15.$$p, $yield = $iter || nil, prop_name = nil, fn = nil;

        TMP_15.$$p = null;
        prop_name = "_on" + (event_name.$event_camelize());
        fn = function(){(($scope.get('React')).$$scope.get('Component')).$deprecation_warning(self.$type(), "In future releases React::Element#on('" + (event_name) + "') will no longer respond " + ("to the '" + (prop_name) + "' emitter.\n") + ("Rename your emitter param to 'on_" + (event_name) + "' or use .on('<" + (prop_name) + ">')"))
        return Opal.yieldX($yield, Opal.to_a(self.$Array(arguments)))
      };
        return self.properties['$merge!']($hash(prop_name, fn));
      }, TMP_15.$$arity = 1), nil) && 'merge_deprecated_component_event_prop!';
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/event"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.$include($scope.get('Native'));

      self.$alias_native("bubbles", "bubbles");

      self.$alias_native("cancelable", "cancelable");

      self.$alias_native("current_target", "currentTarget");

      self.$alias_native("default_prevented", "defaultPrevented");

      self.$alias_native("event_phase", "eventPhase");

      self.$alias_native("is_trusted?", "isTrusted");

      self.$alias_native("native_event", "nativeEvent");

      self.$alias_native("target", "target");

      self.$alias_native("timestamp", "timeStamp");

      self.$alias_native("event_type", "type");

      self.$alias_native("prevent_default", "preventDefault");

      self.$alias_native("stop_propagation", "stopPropagation");

      self.$alias_native("clipboard_data", "clipboardData");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("char_code", "charCode");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("key", "key");

      self.$alias_native("key_code", "keyCode");

      self.$alias_native("locale", "locale");

      self.$alias_native("location", "location");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("repeat", "repeat");

      self.$alias_native("shift_key", "shiftKey");

      self.$alias_native("which", "which");

      self.$alias_native("related_target", "relatedTarget");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("button", "button");

      self.$alias_native("buttons", "buttons");

      self.$alias_native("client_x", "clientX");

      self.$alias_native("client_y", "clientY");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("page_x", "pageX");

      self.$alias_native("page_y", "pageY");

      self.$alias_native("related_target", "relatedTarget");

      self.$alias_native("screen_x", "screen_x");

      self.$alias_native("screen_y", "screen_y");

      self.$alias_native("shift_key", "shift_key");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("changed_touches", "changedTouches");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("shift_key", "shiftKey");

      self.$alias_native("target_touches", "targetTouches");

      self.$alias_native("touches", "touches");

      self.$alias_native("detail", "detail");

      self.$alias_native("view", "view");

      self.$alias_native("delta_mode", "deltaMode");

      self.$alias_native("delta_x", "deltaX");

      self.$alias_native("delta_y", "deltaY");

      self.$alias_native("delta_z", "deltaZ");

      Opal.cdecl($scope, 'BUILT_IN_EVENTS', ["onCopy", "onCut", "onPaste", "onKeyDown", "onKeyPress", "onKeyUp", "onFocus", "onBlur", "onChange", "onInput", "onSubmit", "onClick", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp", "onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart", "onScroll"]);

      return (Opal.defn(self, '$initialize', TMP_1 = function $$initialize(native_element) {
        var self = this;

        return self["native"] = native_element;
      }, TMP_1.$$arity = 1), nil) && 'initialize';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/native_library"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$each', '$lookup_native_name', '$create_component_wrapper', '$create_library_wrapper', '$raise', '$name', '$scope_native_name', '$+', '$downcase', '$[]', '$import_const_from_native', '$const_defined?', '$get_const', '$render', '$to_proc', '$private', '$native_react_component?', '$const_set', '$new', '$class_eval', '$include', '$imports']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $NativeLibrary(){};
      var self = $NativeLibrary = $klass($base, $super, 'NativeLibrary', $NativeLibrary);

      var def = self.$$proto, $scope = self.$$scope;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_10, TMP_11;

        Opal.defn(self, '$imports', TMP_1 = function $$imports(native_name) {
          var self = this;

          self.native_prefix = "" + (native_name) + ".";
          return self;
        }, TMP_1.$$arity = 1);
        Opal.defn(self, '$rename', TMP_3 = function $$rename(rename_list) {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = rename_list).$each, $a.$$p = (TMP_2 = function(js_name, ruby_name){var self = TMP_2.$$s || this, $c, native_name = nil;
if (js_name == null) js_name = nil;if (ruby_name == null) ruby_name = nil;
          native_name = self.$lookup_native_name(js_name);
            if ((($c = self.$lookup_native_name(js_name)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return ((($c = self.$create_component_wrapper(self, native_name, ruby_name)) !== false && $c !== nil && $c != null) ? $c : self.$create_library_wrapper(self, native_name, ruby_name))
              } else {
              return self.$raise("class " + (self.$name()) + " < React::NativeLibrary could not import " + (js_name) + ". " + ("Native value " + (self.$scope_native_name(js_name)) + " is undefined."))
            };}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b);
        }, TMP_3.$$arity = 1);
        Opal.defn(self, '$import_const_from_native', TMP_4 = function $$import_const_from_native(klass, const_name, create_library) {
          var $a, $b, $c, self = this, native_name = nil;

          native_name = ((($a = self.$lookup_native_name(const_name)) !== false && $a !== nil && $a != null) ? $a : self.$lookup_native_name($rb_plus(const_name['$[]'](0).$downcase(), const_name['$[]']($range(1, -1, false)))));
          return (($a = native_name !== false && native_name !== nil && native_name != null) ? (((($b = self.$create_component_wrapper(klass, native_name, const_name)) !== false && $b !== nil && $b != null) ? $b : ((($c = create_library !== false && create_library !== nil && create_library != null) ? self.$create_library_wrapper(klass, native_name, const_name) : create_library)))) : native_name);
        }, TMP_4.$$arity = 3);
        Opal.defn(self, '$const_missing', TMP_5 = function $$const_missing(const_name) {
          var $a, $b, $c, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_5.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          return ((($a = self.$import_const_from_native(self, const_name, true)) !== false && $a !== nil && $a != null) ? $a : ($b = ($c = self, Opal.find_super_dispatcher(self, 'const_missing', TMP_5, false)), $b.$$p = $iter, $b).apply($c, $zuper));
        }, TMP_5.$$arity = 1);
        Opal.defn(self, '$method_missing', TMP_6 = function $$method_missing(method, $a_rest) {
          var $b, $c, self = this, args, $iter = TMP_6.$$p, block = $iter || nil, component_class = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_6.$$p = null;
          if ((($b = self['$const_defined?'](method)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            component_class = self.$get_const(method)};
          ((($b = component_class) !== false && $b !== nil && $b != null) ? $b : component_class = self.$import_const_from_native(self, method, false));
          if (component_class !== false && component_class !== nil && component_class != null) {
            } else {
            self.$raise("could not import a react component named: " + (self.$scope_native_name(method)))
          };
          return ($b = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = block.$to_proc(), $b).apply($c, [component_class].concat(Opal.to_a(args)));
        }, TMP_6.$$arity = -2);
        self.$private();
        Opal.defn(self, '$lookup_native_name', TMP_7 = function $$lookup_native_name(js_name) {
          var self = this, native_name = nil;

          try {
            native_name = self.$scope_native_name(js_name);
            return eval(native_name) !== undefined && native_name;
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_7.$$arity = 1);
        Opal.defn(self, '$scope_native_name', TMP_8 = function $$scope_native_name(js_name) {
          var self = this;
          if (self.native_prefix == null) self.native_prefix = nil;

          return "" + (self.native_prefix) + (js_name);
        }, TMP_8.$$arity = 1);
        Opal.defn(self, '$create_component_wrapper', TMP_10 = function $$create_component_wrapper(klass, native_name, ruby_name) {
          var $a, $b, TMP_9, self = this, new_klass = nil;

          if ((($a = (($scope.get('React')).$$scope.get('API'))['$native_react_component?'](native_name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            new_klass = klass.$const_set(ruby_name, $scope.get('Class').$new());
            ($a = ($b = new_klass).$class_eval, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            self.$include((($scope.get('React')).$$scope.get('Component')));
              return self.$imports(native_name);}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($b);
            return new_klass;
            } else {
            return nil
          };
        }, TMP_10.$$arity = 3);
        return (Opal.defn(self, '$create_library_wrapper', TMP_11 = function $$create_library_wrapper(klass, native_name, ruby_name) {
          var self = this;

          return klass.$const_set(ruby_name, $scope.get('Class').$new((($scope.get('React')).$$scope.get('NativeLibrary'))).$imports(native_name));
        }, TMP_11.$$arity = 3), nil) && 'create_library_wrapper';
      })(Opal.get_singleton_class(self))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/api"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$instance_variable_set', '$[]=', '$raise', '$eval_native_react_component', '$!', '$method_defined?', '$[]', '$name', '$respond_to?', '$to_n', '$prop_types', '$default_props', '$native_mixins', '$static_call_backs', '$component_will_mount', '$component_did_mount', '$component_will_receive_props', '$new', '$should_component_update?', '$component_will_update', '$component_did_update', '$component_will_unmount', '$send', '$<<', '$kind_of?', '$create_native_react_class', '$include?', '$is_a?', '$convert_props', '$shallow_to_n', '$each', '$flatten', '$map', '$==', '$lower_camelize', '$const_defined?', '$tr', '$html_attr?', '$private', '$split', '$first', '$concat', '$+', '$upcase', '$join']);
  self.$require("react/native_library");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $API(){};
      var self = $API = $klass($base, $super, 'API', $API);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_10, TMP_12;

      (Opal.cvars['@@component_classes'] = $hash2([], {}));

      Opal.defs(self, '$import_native_component', TMP_1 = function $$import_native_component(opal_class, native_class) {
        var $a, self = this;

        opal_class.$instance_variable_set("@native_import", true);
        return (($a = Opal.cvars['@@component_classes']) == null ? nil : $a)['$[]='](opal_class, native_class);
      }, TMP_1.$$arity = 2);

      Opal.defs(self, '$eval_native_react_component', TMP_2 = function $$eval_native_react_component(name) {
        var $a, $b, $c, self = this, component = nil, is_component_class = nil, is_functional_component = nil, is_not_using_react_v13 = nil;

        component = eval(name);
        if ((($a = component === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise("" + (name) + " is not defined")};
        is_component_class = ($a = component.prototype !== undefined, $a !== false && $a !== nil && $a != null ?(((($b = !!component.prototype.isReactComponent) !== false && $b !== nil && $b != null) ? $b : !!component.prototype.render)) : $a);
        is_functional_component = typeof component === "function";
        is_not_using_react_v13 = !Opal.global.React.version.match(/0\.13/);
        if ((($a = ((($b = is_component_class) !== false && $b !== nil && $b != null) ? $b : ((($c = is_not_using_react_v13 !== false && is_not_using_react_v13 !== nil && is_not_using_react_v13 != null) ? is_functional_component : is_not_using_react_v13)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise("does not appear to be a native react component")
        };
        return component;
      }, TMP_2.$$arity = 1);

      Opal.defs(self, '$native_react_component?', TMP_3 = function(name) {
        var self = this;

        if (name == null) {
          name = nil;
        }
        try {
          if (name !== false && name !== nil && name != null) {
            } else {
            return false
          };
          return self.$eval_native_react_component(name);
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('StandardError')])) {
            try {
              return nil
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_3.$$arity = -1);

      Opal.defs(self, '$create_native_react_class', TMP_4 = function $$create_native_react_class(type) {
        var $a, $b, $c, $d, self = this, render_fn = nil;

        if ((($a = (type['$method_defined?']("render"))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise("Provided class should define `render` method")};
        render_fn = (function() {if ((($a = (type['$method_defined?']("_render_wrapper"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "_render_wrapper"
          } else {
          return "render"
        }; return nil; })();
        return ($a = type, $b = (($c = Opal.cvars['@@component_classes']) == null ? nil : $c), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, 
        React.createClass({
          displayName: type.$name(),
          propTypes: (function() {if ((($d = type['$respond_to?']("prop_types")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return type.$prop_types().$to_n()
          } else {
          return {};
        }; return nil; })(),
          getDefaultProps: function(){
            return (function() {if ((($d = type['$respond_to?']("default_props")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return type.$default_props().$to_n()
          } else {
          return {};
        }; return nil; })();
          },
          mixins: (function() {if ((($d = type['$respond_to?']("native_mixins")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return type.$native_mixins()
          } else {
          return [];
        }; return nil; })(),
          statics: (function() {if ((($d = type['$respond_to?']("static_call_backs")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return type.$static_call_backs().$to_n()
          } else {
          return {};
        }; return nil; })(),
          componentWillMount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_mount")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_mount()
          } else {
          return nil
        }; return nil; })();
          },
          componentDidMount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_did_mount")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_did_mount()
          } else {
          return nil
        }; return nil; })();
          },
          componentWillReceiveProps: function(next_props) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_receive_props")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_receive_props($scope.get('Hash').$new(next_props))
          } else {
          return nil
        }; return nil; })();
          },
          shouldComponentUpdate: function(next_props, next_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("should_component_update?")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance)['$should_component_update?']($scope.get('Hash').$new(next_props), $scope.get('Hash').$new(next_state))
          } else {
          return nil
        }; return nil; })();
          },
          componentWillUpdate: function(next_props, next_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_update")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_update($scope.get('Hash').$new(next_props), $scope.get('Hash').$new(next_state))
          } else {
          return nil
        }; return nil; })();
          },
          componentDidUpdate: function(prev_props, prev_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_did_update")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_did_update($scope.get('Hash').$new(prev_props), $scope.get('Hash').$new(prev_state))
          } else {
          return nil
        }; return nil; })();
          },
          componentWillUnmount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_unmount")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_unmount()
          } else {
          return nil
        }; return nil; })();
          },
          _getOpalInstance: function() {
            if (this.__opalInstance == undefined) {
              var instance = type.$new(this);
            } else {
              var instance = this.__opalInstance;
            }
            this.__opalInstance = instance;
            return instance;
          },
          render: function() {
            var instance = this._getOpalInstance.apply(this);
            return (instance).$send(render_fn).$to_n();
          }
        })
      )));
      }, TMP_4.$$arity = 1);

      Opal.defs(self, '$create_element', TMP_5 = function $$create_element(type, properties) {
        var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil, params = nil;

        if (properties == null) {
          properties = $hash2([], {});
        }
        TMP_5.$$p = null;
        params = [];
        if ((($a = (($b = Opal.cvars['@@component_classes']) == null ? nil : $b)['$[]'](type)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          params['$<<']((($a = Opal.cvars['@@component_classes']) == null ? nil : $a)['$[]'](type))
        } else if ((($a = type['$kind_of?']($scope.get('Class'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          params['$<<'](self.$create_native_react_class(type))
        } else if ((($a = (((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Tags'))).$$scope.get('HTML_TAGS'))['$include?'](type)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          params['$<<'](type)
        } else if ((($a = type['$is_a?']($scope.get('String'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (($scope.get('React')).$$scope.get('Element')).$new(type)
          } else {
          self.$raise("" + (type) + " not implemented")
        };
        properties = self.$convert_props(properties);
        params['$<<'](properties.$shallow_to_n());
        if ((block !== nil)) {
          ($a = ($b = [Opal.yieldX(block, [])].$flatten()).$each, $a.$$p = (TMP_6 = function(ele){var self = TMP_6.$$s || this;
if (ele == null) ele = nil;
          return params['$<<'](ele.$to_n())}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b)};
        return (($scope.get('React')).$$scope.get('Element')).$new(React.createElement.apply(null, params), type, properties, block);
      }, TMP_5.$$arity = -2);

      Opal.defs(self, '$clear_component_class_cache', TMP_7 = function $$clear_component_class_cache() {
        var self = this;

        return (Opal.cvars['@@component_classes'] = $hash2([], {}));
      }, TMP_7.$$arity = 0);

      Opal.defs(self, '$convert_props', TMP_10 = function $$convert_props(properties) {
        var $a, $b, TMP_8, self = this, props = nil;

        if ((($a = properties['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise("Component parameters must be a hash. Instead you sent " + (properties))
        };
        props = $hash2([], {});
        ($a = ($b = properties).$map, $a.$$p = (TMP_8 = function(key, value){var self = TMP_8.$$s || this, $c, $d, TMP_9;
if (key == null) key = nil;if (value == null) value = nil;
        if ((($c = (($d = key['$==']("class_name")) ? value['$is_a?']($scope.get('Hash')) : key['$==']("class_name"))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return props['$[]='](self.$lower_camelize(key), React.addons.classSet(value.$to_n()))
          } else if (key['$==']("class")) {
            return props['$[]=']("className", value)
          } else if ((($c = ["style", "dangerously_set_inner_HTML"]['$include?'](key)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return props['$[]='](self.$lower_camelize(key), value.$to_n())
          } else if ((($c = (($d = key['$==']("ref")) ? value['$is_a?']($scope.get('Proc')) : key['$==']("ref"))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            if ((($c = $scope.get('React')['$const_defined?']("RefsCallbackExtension")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              } else {
              
                console.error(
                  "Warning: Using deprecated behavior of ref callback,",
                  "require \"react/ref_callback\" to get the correct behavior."
                );
            
            };
            return props['$[]='](key, value);
          } else if ((($c = ($d = (($scope.get('React')).$$scope.get('HASH_ATTRIBUTES'))['$include?'](key), $d !== false && $d !== nil && $d != null ?value['$is_a?']($scope.get('Hash')) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return ($c = ($d = value).$each, $c.$$p = (TMP_9 = function(k, v){var self = TMP_9.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
            return props['$[]=']("" + (key) + "-" + (k.$tr("_", "-")), v.$to_n())}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $c).call($d)
            } else {
            return props['$[]=']((function() {if ((($c = $scope.get('React')['$html_attr?'](self.$lower_camelize(key))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$lower_camelize(key)
              } else {
              return key
            }; return nil; })(), value)
          }}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8), $a).call($b);
        return props;
      }, TMP_10.$$arity = 1);

      self.$private();

      return (Opal.defs(self, '$lower_camelize', TMP_12 = function $$lower_camelize(snake_cased_word) {
        var $a, $b, TMP_11, self = this, words = nil, result = nil;

        words = snake_cased_word.$split("_");
        result = [words.$first()];
        result.$concat(($a = ($b = words['$[]']($range(1, -1, false))).$map, $a.$$p = (TMP_11 = function(word){var self = TMP_11.$$s || this;
if (word == null) word = nil;
        return $rb_plus(word['$[]'](0).$upcase(), word['$[]']($range(1, -1, false)))}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b));
        return result.$join("");
      }, TMP_12.$$arity = 1), nil) && 'lower_camelize';
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/object"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$_reactrb_tag_original_const_missing', '$html_tag_class_for', '$raise']);
  return (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    return (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1;

      Opal.alias(self, '_reactrb_tag_original_const_missing', 'const_missing');
      return (Opal.defn(self, '$const_missing', TMP_1 = function $$const_missing(const_name) {
        var $a, self = this, e = nil;

        try {
          return self.$_reactrb_tag_original_const_missing(const_name)
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('StandardError')])) {e = $err;
            try {
              return ((($a = (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Tags')).$html_tag_class_for(const_name)) !== false && $a !== nil && $a != null) ? $a : self.$raise(e))
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_1.$$arity = 1), nil) && 'const_missing';
    })(Opal.get_singleton_class(self))
  })($scope.base, null)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/ext/opal-jquery/element"] = function(Opal) {
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$const_defined?', '$instance_eval', '$dom_node', '$find', '$define_method', '$to_n', '$new', '$class_eval', '$render', '$to_proc', '$create_element']);
  if ((($a = $scope.get('Object')['$const_defined?']("Element")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    return ($a = ($b = $scope.get('Element')).$instance_eval, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2, TMP_3, $c, $d, TMP_4;

    Opal.defs(self, '$find', TMP_2 = function $$find(selector) {
        var $a, self = this;

        if ((($a = selector.$dom_node !== undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          selector = (function() { try {
            return selector.$dom_node()
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
              try {
                return selector
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})()};
        return $(selector);
      }, TMP_2.$$arity = 1);
      Opal.defs(self, '$[]', TMP_3 = function(selector) {
        var self = this;

        return self.$find(selector);
      }, TMP_3.$$arity = 1);
      return ($c = ($d = self).$define_method, $c.$$p = (TMP_4 = function(container, params){var self = TMP_4.$$s || this, block, $e, $f, TMP_5, klass = nil;

        block = TMP_4.$$p || nil, TMP_4.$$p = null;
        if (container == null) {
          container = nil;
        }
        if (params == null) {
          params = $hash2([], {});
        }
      if ((($e = self.$to_n()._reactrb_component_class === undefined) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
          self.$to_n()._reactrb_component_class = $scope.get('Class').$new((($scope.get('Hyperloop')).$$scope.get('Component')));};
        klass = self.$to_n()._reactrb_component_class;
        ($e = ($f = klass).$class_eval, $e.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $g, $h;

        return ($g = ($h = self).$render, $g.$$p = block.$to_proc(), $g).call($h, container, params)}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $e).call($f);
        return $scope.get('React').$render($scope.get('React').$create_element(self.$to_n()._reactrb_component_class), self);}, TMP_4.$$s = self, TMP_4.$$arity = -1, TMP_4), $c).call($d, "render");}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b)
    } else {
    return nil
  }
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/config/client"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$extend', '$[]=', '$config', '$default_config']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Config, self = $Config = $module($base, 'Config');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      self.$extend(self);

      Opal.defn(self, '$environment=', TMP_1 = function(value) {
        var self = this;

        return self.$config()['$[]=']("environment", value);
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$config', TMP_2 = function $$config() {
        var $a, self = this;
        if (self.config == null) self.config = nil;

        return ((($a = self.config) !== false && $a !== nil && $a != null) ? $a : self.config = self.$default_config());
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$default_config', TMP_3 = function $$default_config() {
        var self = this;

        return $hash2(["environment"], {"environment": "express"});
      }, TMP_3.$$arity = 0);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/config"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$!=', '$require']);
  if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    } else {
    return self.$require("react/config/client")
  }
};

/* Generated by Opal 0.10.3 */
Opal.modules["reactive-ruby/isomorphic_helpers"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$extend', '$!=', '$!', '$unique_id', '$on_opal_server?', '$log', '$new', '$is_a?', '$==', '$[]', '$config', '$+', '$class', '$on_opal_client?', '$join', '$collect', '$call', '$prerender_footer_blocks', '$attr_reader', '$run', '$each', '$before_first_mount_blocks', '$eval', '$length', '$load!', '$<<', '$first', '$send_to_server', '$to_json', '$parse', '$controller', '$context', '$register_before_first_mount_block', '$to_proc', '$register_prerender_footer_block', '$send', '$result']);
  self.$require("react/config");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $IsomorphicHelpers, self = $IsomorphicHelpers = $module($base, 'IsomorphicHelpers');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_10;

      Opal.defs(self, '$included', TMP_1 = function $$included(base) {
        var self = this;

        return base.$extend($scope.get('ClassMethods'));
      }, TMP_1.$$arity = 1);

      if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        Opal.defs(self, '$load_context', TMP_2 = function $$load_context(unique_id, name) {
          var $a, $b, $c, self = this, message = nil;
          if (self.context == null) self.context = nil;

          if (unique_id == null) {
            unique_id = nil;
          }
          if (name == null) {
            name = nil;
          }
          if ((($a = ((($b = ((($c = unique_id['$!']()) !== false && $c !== nil && $c != null) ? $c : self.context['$!']())) !== false && $b !== nil && $b != null) ? $b : self.context.$unique_id()['$!='](unique_id))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self['$on_opal_server?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              
              try {console.history = [] } catch ($err) { 
                if (Opal.rescue($err, [$scope.get('StandardError')])) {
                nil
                } else { throw $err; } };
              message = "************************ React Prerendering Context Initialized " + (name) + " ***********************";
              } else {
              message = "************************ React Browser Context Initialized ****************************"
            };
            self.$log(message);
            self.context = $scope.get('Context').$new(unique_id);};
          return self.context;
        }, TMP_2.$$arity = -1)
      };

      Opal.defs(self, '$log', TMP_3 = function $$log(message, message_type) {
        var $a, $b, $c, self = this, is_production = nil, style = nil;

        if (message_type == null) {
          message_type = "info";
        }
        if ((($a = message['$is_a?']($scope.get('Array'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          message = [message]
        };
        is_production = (($scope.get('React')).$$scope.get('Config')).$config()['$[]']("environment")['$==']("production");
        if ((($a = ($b = (((($c = message_type['$==']("info")) !== false && $c !== nil && $c != null) ? $c : message_type['$==']("warning"))), $b !== false && $b !== nil && $b != null ?is_production : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        if (message_type['$==']("info")) {
          if ((($a = self['$on_opal_server?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            style = "background: #00FFFF; color: red"
            } else {
            style = "background: #222; color: #bada55"
          };
          message = $rb_plus([$rb_plus("%c", message['$[]'](0)), style], message['$[]']($range(1, -1, false)));
          return console.log.apply(console, message);
        } else if (message_type['$==']("warning")) {
          return console.warn.apply(console, message);
          } else {
          return console.error.apply(console, message);
        };
      }, TMP_3.$$arity = -2);

      if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        Opal.defs(self, '$on_opal_server?', TMP_4 = function() {
          var self = this;

          return typeof Opal.global.document === 'undefined';
        }, TMP_4.$$arity = 0);

        Opal.defs(self, '$on_opal_client?', TMP_5 = function() {
          var self = this;

          return self['$on_opal_server?']()['$!']();
        }, TMP_5.$$arity = 0);
      };

      Opal.defn(self, '$log', TMP_6 = function $$log($a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = $scope.get('IsomorphicHelpers')).$log.apply($b, Opal.to_a(args));
      }, TMP_6.$$arity = -1);

      Opal.defn(self, '$on_opal_server?', TMP_7 = function() {
        var self = this;

        return self.$class()['$on_opal_server?']();
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$on_opal_client?', TMP_8 = function() {
        var self = this;

        return self.$class()['$on_opal_client?']();
      }, TMP_8.$$arity = 0);

      Opal.defs(self, '$prerender_footers', TMP_10 = function $$prerender_footers(controller) {
        var $a, $b, TMP_9, self = this, footer = nil;

        if (controller == null) {
          controller = nil;
        }
        footer = ($a = ($b = $scope.get('Context').$prerender_footer_blocks()).$collect, $a.$$p = (TMP_9 = function(block){var self = TMP_9.$$s || this;
if (block == null) block = nil;
        return block.$call(controller)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b).$join("\n");
        if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {};
        return footer;
      }, TMP_10.$$arity = -1);

      (function($base, $super) {
        function $Context(){};
        var self = $Context = $klass($base, $super, 'Context', $Context);

        var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_12, TMP_14, TMP_15, TMP_17, TMP_18, TMP_19;

        def.ctx = nil;
        self.$attr_reader("controller");

        self.$attr_reader("unique_id");

        Opal.defs(self, '$before_first_mount_blocks', TMP_11 = function $$before_first_mount_blocks() {
          var $a, self = this;
          if (self.before_first_mount_blocks == null) self.before_first_mount_blocks = nil;

          return ((($a = self.before_first_mount_blocks) !== false && $a !== nil && $a != null) ? $a : self.before_first_mount_blocks = []);
        }, TMP_11.$$arity = 0);

        Opal.defs(self, '$prerender_footer_blocks', TMP_12 = function $$prerender_footer_blocks() {
          var $a, self = this;
          if (self.prerender_footer_blocks == null) self.prerender_footer_blocks = nil;

          return ((($a = self.prerender_footer_blocks) !== false && $a !== nil && $a != null) ? $a : self.prerender_footer_blocks = []);
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$initialize', TMP_14 = function $$initialize(unique_id, ctx, controller, name) {
          var $a, $b, TMP_13, self = this;

          if (ctx == null) {
            ctx = nil;
          }
          if (controller == null) {
            controller = nil;
          }
          if (name == null) {
            name = nil;
          }
          self.unique_id = unique_id;
          if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {};
          (((($scope.get('Hyperloop')).$$scope.get('Application'))).$$scope.get('Boot')).$run($hash2(["context"], {"context": self}));
          return ($a = ($b = self.$class().$before_first_mount_blocks()).$each, $a.$$p = (TMP_13 = function(block){var self = TMP_13.$$s || this;
if (block == null) block = nil;
          return block.$call(self)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
        }, TMP_14.$$arity = -2);

        Opal.defn(self, '$eval', TMP_15 = function(js) {
          var $a, self = this;

          if ((($a = self.ctx) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.ctx.$eval(js)
            } else {
            return nil
          };
        }, TMP_15.$$arity = 1);

        Opal.defn(self, '$send_to_opal', TMP_17 = function $$send_to_opal(method, $a_rest) {
          var $b, $c, TMP_16, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ((($b = self.ctx) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            return nil
          };
          if (args.$length()['$=='](0)) {
            args = [1]};
          ((Opal.get('ReactiveRuby')).$$scope.get('ComponentLoader')).$new(self.ctx)['$load!']();
          return self.ctx.$eval("Opal.React.$const_get('IsomorphicHelpers').$" + (method) + "(" + (($b = ($c = args).$collect, $b.$$p = (TMP_16 = function(arg){var self = TMP_16.$$s || this;
if (arg == null) arg = nil;
          return "'" + (arg) + "'"}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $b).call($c).$join(", ")) + ")");
        }, TMP_17.$$arity = -2);

        Opal.defs(self, '$register_before_first_mount_block', TMP_18 = function $$register_before_first_mount_block() {
          var self = this, $iter = TMP_18.$$p, block = $iter || nil;

          TMP_18.$$p = null;
          return self.$before_first_mount_blocks()['$<<'](block);
        }, TMP_18.$$arity = 0);

        return (Opal.defs(self, '$register_prerender_footer_block', TMP_19 = function $$register_prerender_footer_block() {
          var self = this, $iter = TMP_19.$$p, block = $iter || nil;

          TMP_19.$$p = null;
          return self.$prerender_footer_blocks()['$<<'](block);
        }, TMP_19.$$arity = 0), nil) && 'register_prerender_footer_block';
      })($scope.base, null);

      (function($base, $super) {
        function $IsomorphicProcCall(){};
        var self = $IsomorphicProcCall = $klass($base, $super, 'IsomorphicProcCall', $IsomorphicProcCall);

        var def = self.$$proto, $scope = self.$$scope, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24;

        def.result = def.name = nil;
        Opal.defn(self, '$result', TMP_20 = function $$result() {
          var $a, self = this;

          if ((($a = self.result) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.result.$first()
            } else {
            return nil
          };
        }, TMP_20.$$arity = 0);

        Opal.defn(self, '$initialize', TMP_21 = function $$initialize(name, block, $a_rest) {
          var $b, $c, $d, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 2;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 2] = arguments[$arg_idx];
          }
          self.name = name;
          ($b = block).$call.apply($b, [self].concat(Opal.to_a(args)));
          if ((($c = $scope.get('IsomorphicHelpers')['$on_opal_server?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return ((($c = self.result) !== false && $c !== nil && $c != null) ? $c : self.result = ($d = self).$send_to_server.apply($d, Opal.to_a(args)))
            } else {
            return nil
          };
        }, TMP_21.$$arity = -3);

        Opal.defn(self, '$when_on_client', TMP_22 = function $$when_on_client() {
          var $a, self = this, $iter = TMP_22.$$p, block = $iter || nil;

          TMP_22.$$p = null;
          if ((($a = $scope.get('IsomorphicHelpers')['$on_opal_client?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.result = [block.$call()]
            } else {
            return nil
          };
        }, TMP_22.$$arity = 0);

        Opal.defn(self, '$send_to_server', TMP_23 = function $$send_to_server($a_rest) {
          var $b, self = this, args, args_as_json = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = $scope.get('IsomorphicHelpers')['$on_opal_server?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            args_as_json = args.$to_json();
            return self.result = [$scope.get('JSON').$parse(Opal.global.ServerSideIsomorphicMethods[self.name](args_as_json))];
            } else {
            return nil
          };
        }, TMP_23.$$arity = -1);

        return (Opal.defn(self, '$when_on_server', TMP_24 = function $$when_on_server() {
          var $a, $b, self = this, $iter = TMP_24.$$p, block = $iter || nil;

          TMP_24.$$p = null;
          if ((($a = ((($b = $scope.get('IsomorphicHelpers')['$on_opal_client?']()) !== false && $b !== nil && $b != null) ? $b : $scope.get('IsomorphicHelpers')['$on_opal_server?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.result = [block.$call().$to_json()]
          };
        }, TMP_24.$$arity = 0), nil) && 'when_on_server';
      })($scope.base, null);

      (function($base) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, $a, TMP_31;

        Opal.defn(self, '$on_opal_server?', TMP_25 = function() {
          var self = this;

          return $scope.get('IsomorphicHelpers')['$on_opal_server?']();
        }, TMP_25.$$arity = 0);

        Opal.defn(self, '$on_opal_client?', TMP_26 = function() {
          var self = this;

          return $scope.get('IsomorphicHelpers')['$on_opal_client?']();
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$log', TMP_27 = function $$log($a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = $scope.get('IsomorphicHelpers')).$log.apply($b, Opal.to_a(args));
        }, TMP_27.$$arity = -1);

        Opal.defn(self, '$controller', TMP_28 = function $$controller() {
          var self = this;

          return $scope.get('IsomorphicHelpers').$context().$controller();
        }, TMP_28.$$arity = 0);

        Opal.defn(self, '$before_first_mount', TMP_29 = function $$before_first_mount() {
          var $a, $b, self = this, $iter = TMP_29.$$p, block = $iter || nil;

          TMP_29.$$p = null;
          return ($a = ($b = (((($scope.get('React')).$$scope.get('IsomorphicHelpers'))).$$scope.get('Context'))).$register_before_first_mount_block, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_29.$$arity = 0);

        Opal.defn(self, '$prerender_footer', TMP_30 = function $$prerender_footer() {
          var $a, $b, self = this, $iter = TMP_30.$$p, block = $iter || nil;

          TMP_30.$$p = null;
          return ($a = ($b = (((($scope.get('React')).$$scope.get('IsomorphicHelpers'))).$$scope.get('Context'))).$register_prerender_footer_block, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_30.$$arity = 0);

        if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$require("json");

          Opal.defn(self, '$isomorphic_method', TMP_31 = function $$isomorphic_method(name) {
            var $a, $b, TMP_32, self = this, $iter = TMP_31.$$p, block = $iter || nil;

            TMP_31.$$p = null;
            return ($a = ($b = self.$class()).$send, $a.$$p = (TMP_32 = function($c_rest){var self = TMP_32.$$s || this, args, $d;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return ($d = (((($scope.get('React')).$$scope.get('IsomorphicHelpers'))).$$scope.get('IsomorphicProcCall'))).$new.apply($d, [name, block].concat(Opal.to_a(args))).$result()}, TMP_32.$$s = self, TMP_32.$$arity = -1, TMP_32), $a).call($b, "define_method", name);
          }, TMP_31.$$arity = 1);
        };
      })($scope.base);
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.10.3 */
Opal.modules["rails-helpers/top_level_rails_component"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$export_component', '$param', '$backtrace', '$start_with?', '$component_name', '$params', '$<<', '$gsub', '$inject', '$const_get', '$split', '$method_defined?', '$present', '$render_params', '$each', '$==', '$+', '$name', '$controller', '$search_path', '$class', '$raise', '$join', '$search_path=', '$!', '$include?', '$add_to_react_search_path']);
  (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $TopLevelRailsComponent(){};
      var self = $TopLevelRailsComponent = $klass($base, $super, 'TopLevelRailsComponent', $TopLevelRailsComponent);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_7;

      self.$include((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('Mixin')));

      Opal.defs(self, '$search_path', TMP_1 = function $$search_path() {
        var $a, self = this;
        if (self.search_path == null) self.search_path = nil;

        return ((($a = self.search_path) !== false && $a !== nil && $a != null) ? $a : self.search_path = [$scope.get('Module')]);
      }, TMP_1.$$arity = 0);

      self.$export_component();

      self.$param("component_name");

      self.$param("controller");

      self.$param("render_params");

      self.$backtrace("off");

      return (Opal.defn(self, '$render', TMP_7 = function $$render() {try {

        var $a, $b, TMP_2, $c, TMP_3, $d, TMP_5, self = this, paths_searched = nil, component = nil;

        paths_searched = [];
        if ((($a = self.$params().$component_name()['$start_with?']("::")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          paths_searched['$<<'](self.$params().$component_name().$gsub(/^\:\:/, ""));
          component = (function() {
          try {return ($a = ($b = self.$params().$component_name().$gsub(/^\:\:/, "").$split("::")).$inject, $a.$$p = (TMP_2 = function(scope, next_const){var self = TMP_2.$$s || this;
if (scope == null) scope = nil;if (next_const == null) next_const = nil;
          return scope.$const_get(next_const, false)}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b, $scope.get('Module')) } catch ($err) { 
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
            return nil
            } else { throw $err; } }})();
          if ((($a = (($c = component !== false && component !== nil && component != null) ? component['$method_defined?']("render") : component)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$present(component, self.$params().$render_params())};
          } else {
          ($a = ($c = self.$class().$search_path()).$each, $a.$$p = (TMP_3 = function(path){var self = TMP_3.$$s || this, $d, $e, TMP_4, $f;
if (path == null) path = nil;
          paths_searched['$<<']("" + ((function() {if (path['$==']($scope.get('Module'))) {
              return nil
              } else {
              return $rb_plus(path.$name(), "::")
            }; return nil; })()) + (self.$params().$controller()) + "::" + (self.$params().$component_name()));
            component = (function() {
            try {return ($d = ($e = (((("") + (self.$params().$controller())) + "::") + (self.$params().$component_name())).$split("::")).$inject, $d.$$p = (TMP_4 = function(scope, next_const){var self = TMP_4.$$s || this;
if (scope == null) scope = nil;if (next_const == null) next_const = nil;
            return scope.$const_get(next_const, false)}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4), $d).call($e, path) } catch ($err) { 
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
              return nil
              } else { throw $err; } }})();
            if ((($d = (($f = component !== false && component !== nil && component != null) ? component['$method_defined?']("render") : component)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              Opal.ret(self.$present(component, self.$params().$render_params()))
              } else {
              return nil
            };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($c);
          ($a = ($d = self.$class().$search_path()).$each, $a.$$p = (TMP_5 = function(path){var self = TMP_5.$$s || this, $e, $f, TMP_6, $g;
if (path == null) path = nil;
          paths_searched['$<<']("" + ((function() {if (path['$==']($scope.get('Module'))) {
              return nil
              } else {
              return $rb_plus(path.$name(), "::")
            }; return nil; })()) + (self.$params().$component_name()));
            component = (function() {
            try {return ($e = ($f = (("") + (self.$params().$component_name())).$split("::")).$inject, $e.$$p = (TMP_6 = function(scope, next_const){var self = TMP_6.$$s || this;
if (scope == null) scope = nil;if (next_const == null) next_const = nil;
            return scope.$const_get(next_const, false)}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6), $e).call($f, path) } catch ($err) { 
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
              return nil
              } else { throw $err; } }})();
            if ((($e = (($g = component !== false && component !== nil && component != null) ? component['$method_defined?']("render") : component)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              Opal.ret(self.$present(component, self.$params().$render_params()))
              } else {
              return nil
            };}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($d);
        };
        return self.$raise("Could not find component class '" + (self.$params().$component_name()) + "' for params.controller '" + (self.$params().$controller()) + "' in any component directory. Tried [" + (paths_searched.$join(", ")) + "]");
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_7.$$arity = 0), nil) && 'render';
    })($scope.base, null)
  })($scope.base);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_8;

    return (Opal.defn(self, '$add_to_react_search_path', TMP_8 = function $$add_to_react_search_path(replace_search_path) {
      var $a, $b, self = this;

      if (replace_search_path == null) {
        replace_search_path = nil;
      }
      if (replace_search_path !== false && replace_search_path !== nil && replace_search_path != null) {
        return (($a = [[self]]), $b = (($scope.get('React')).$$scope.get('TopLevelRailsComponent')), $b['$search_path='].apply($b, $a), $a[$a.length-1])
      } else if ((($a = (($scope.get('React')).$$scope.get('TopLevelRailsComponent')).$search_path()['$include?'](self)['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('React')).$$scope.get('TopLevelRailsComponent')).$search_path()['$<<'](self)
        } else {
        return nil
      };
    }, TMP_8.$$arity = -1), nil) && 'add_to_react_search_path'
  })($scope.base, null);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    self.$add_to_react_search_path()
  })($scope.base);
};

/* Generated by Opal 0.10.3 */
Opal.modules["reactive-ruby/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.12.3")
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-react"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$import', '$==', '$raise', '$join', '$include', '$deprecation_warning']);
  self.$require("hyperloop-config");
  $scope.get('Hyperloop').$import("hyper-store");
  $scope.get('Hyperloop').$import("react/react-source-browser");
  $scope.get('Hyperloop').$import("react/react-source-server", $hash2(["server_only"], {"server_only": true}));
  $scope.get('Hyperloop').$import("opal-jquery", $hash2(["client_only"], {"client_only": true}));
  $scope.get('Hyperloop').$import("browser/delay", $hash2(["client_only"], {"client_only": true}));
  $scope.get('Hyperloop').$import("react_ujs", $hash2(["client_only"], {"client_only": true}));
  $scope.get('Hyperloop').$import("hyper-react");
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    (function($base) {
      var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Component(){};
        var self = $Component = $klass($base, $super, 'Component', $Component);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, null)
    })($scope.base);
    if ((($a = Opal.global.React === undefined || Opal.global.React.version === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      self.$raise(["No React.js Available", "", "A global `React` must be defined before requiring 'hyper-react'", "", "To USE THE BUILT-IN SOURCE: ", "   add 'require \"react/react-source-browser\"' immediately before the 'require \"hyper-react\" directive.", "IF USING WEBPACK:", "   add 'react' to your webpack manifest."].$join("\n"))};
    self.$require("react/hash");
    self.$require("react/top_level");
    self.$require("react/observable");
    self.$require("react/validator");
    self.$require("react/component");
    self.$require("react/component/dsl_instance_methods");
    self.$require("react/component/should_component_update");
    self.$require("react/component/tags");
    self.$require("react/component/base");
    self.$require("react/element");
    self.$require("react/event");
    self.$require("react/api");
    self.$require("react/rendering_context");
    self.$require("react/state");
    self.$require("react/object");
    self.$require("react/ext/opal-jquery/element");
    self.$require("reactive-ruby/isomorphic_helpers");
    self.$require("rails-helpers/top_level_rails_component");
    self.$require("reactive-ruby/version");
    (function($base) {
      var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Component(){};
        var self = $Component = $klass($base, $super, 'Component', $Component);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (Opal.defs(self, '$inherited', TMP_1 = function $$inherited(child) {
          var self = this;

          return child.$include($scope.get('Mixin'));
        }, TMP_1.$$arity = 1), nil) && 'inherited'
      })($scope.base, null)
    })($scope.base);
    if ((($a = (function(){ try { return (((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('VERSION'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("components.rb", "Requiring 'hyper-react' is deprecated.  Use gem 'hyper-component', and require 'hyper-component' instead.")
    };};
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-component"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$import', '$==']);
  self.$require("hyperloop/component/version");
  self.$require("hyperloop-config");
  $scope.get('Hyperloop').$import("hyper-component");
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    (function($base) {
      var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Component(){};
        var self = $Component = $klass($base, $super, 'Component', $Component);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, null)
    })($scope.base);
    return self.$require("hyper-react");};
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/call_by_class_name"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$private', '$lookup_const', '$<', '$!', '$method_defined?', '$raise', '$=~', '$reverse', '$inject', '$+', '$const_get', '$last', '$split', '$to_s', '$name', '$detect', '$is_a?', '$_hyper_operation_original_method_missing', '$to_proc', '$send', '$class']);
  (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, null)
  })($scope.base);
  (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Tags, self = $Tags = $module($base, 'Tags');

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$private();

        Opal.defn(self, '$find_component', TMP_1 = function $$find_component(name) {
          var $a, $b, self = this, component = nil;

          component = self.$lookup_const(name);
          if ((($a = (($b = component !== false && component !== nil && component != null) ? $rb_lt(component, (($scope.get('Hyperloop')).$$scope.get('Operation'))) : component)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil};
          if ((($a = (($b = component !== false && component !== nil && component != null) ? component['$method_defined?']("render")['$!']() : component)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$raise("" + (name) + " does not appear to be a react component.")};
          return component;
        }, TMP_1.$$arity = 1);
      })($scope.base)
    })($scope.base)
  })($scope.base);
  return (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_5;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_2;

      Opal.alias(self, '_hyper_operation_original_method_missing', 'method_missing');
      return (Opal.defn(self, '$method_missing', TMP_2 = function $$method_missing(name, $a_rest) {
        var $b, $c, TMP_3, $d, TMP_4, $e, self = this, args, $iter = TMP_2.$$p, block = $iter || nil, scopes = nil, scope = nil, const$ = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_2.$$p = null;
        if ((($b = name['$=~'](/^[A-Z]/)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          scopes = ($b = ($c = self.$name().$to_s().$split("::")).$inject, $b.$$p = (TMP_3 = function(nesting, next_const){var self = TMP_3.$$s || this;
if (nesting == null) nesting = nil;if (next_const == null) next_const = nil;
          return $rb_plus(nesting, [nesting.$last().$const_get(next_const)])}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $b).call($c, [$scope.get('Module')]).$reverse();
          scope = ($b = ($d = scopes).$detect, $b.$$p = (TMP_4 = function(s){var self = TMP_4.$$s || this;
if (s == null) s = nil;
          
            try {return s.$const_get(name) } catch ($err) { 
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
              return nil
              } else { throw $err; } }}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $b).call($d);
          if (scope !== false && scope !== nil && scope != null) {
            const$ = scope.$const_get(name)};};
        if ((($b = ($e = const$['$is_a?']($scope.get('Class')), $e !== false && $e !== nil && $e != null ?$rb_lt(const$, (($scope.get('Hyperloop')).$$scope.get('Operation'))) : $e)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          ($b = ($e = self).$_hyper_operation_original_method_missing, $b.$$p = block.$to_proc(), $b).apply($e, [name].concat(Opal.to_a(args)))
        };
        return ($b = const$).$send.apply($b, ["run"].concat(Opal.to_a(args)));
      }, TMP_2.$$arity = -2), nil) && 'method_missing';
    })(Opal.get_singleton_class(self));

    Opal.alias(self, '_hyper_operation_original_method_missing', 'method_missing');

    return (Opal.defn(self, '$method_missing', TMP_5 = function $$method_missing(name, $a_rest) {
      var $b, $c, TMP_6, $d, TMP_7, $e, self = this, args, $iter = TMP_5.$$p, block = $iter || nil, first = nil, scopes = nil, scope = nil, const$ = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_5.$$p = null;
      if ((($b = name['$=~'](/^[A-Z]/)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        first = (function() {if ((($b = ((($c = self['$is_a?']($scope.get('Module'))) !== false && $c !== nil && $c != null) ? $c : self['$is_a?']($scope.get('Class')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self.$name()
          } else {
          return self.$class().$name()
        }; return nil; })();
        scopes = ($b = ($c = first.$to_s().$split("::")).$inject, $b.$$p = (TMP_6 = function(nesting, next_const){var self = TMP_6.$$s || this;
if (nesting == null) nesting = nil;if (next_const == null) next_const = nil;
        return $rb_plus(nesting, [nesting.$last().$const_get(next_const)])}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6), $b).call($c, [$scope.get('Module')]).$reverse();
        scope = ($b = ($d = scopes).$detect, $b.$$p = (TMP_7 = function(s){var self = TMP_7.$$s || this;
if (s == null) s = nil;
        
          try {return s.$const_get(name) } catch ($err) { 
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
            return nil
            } else { throw $err; } }}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $b).call($d);
        if (scope !== false && scope !== nil && scope != null) {
          const$ = scope.$const_get(name)};};
      if ((($b = ($e = const$['$is_a?']($scope.get('Class')), $e !== false && $e !== nil && $e != null ?$rb_lt(const$, (($scope.get('Hyperloop')).$$scope.get('Operation'))) : $e)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        } else {
        ($b = ($e = self).$_hyper_operation_original_method_missing, $b.$$p = block.$to_proc(), $b).apply($e, [name].concat(Opal.to_a(args)))
      };
      return ($b = const$).$send.apply($b, ["run"].concat(Opal.to_a(args)));
    }, TMP_5.$$arity = -2), nil) && 'method_missing';
  })($scope.base, null);
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/transport/client_drivers"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$opts', '$==', '$each', '$is_a?', '$connect_to', '$name', '$id', '$class', '$raise', '$new', '$+', '$to_s', '$<<', '$open_channels', '$add_connection', '$gsub', '$lambda', '$get_queued_data', '$then', '$action_cable_consumer', '$json', '$sync_dispatch', '$parse', '$post', '$polling_path', '$get', '$include', '$dispatch_from_server', '$constantize', '$!=', '$attr_reader', '$on_opal_client?', '$[]=', '$connect', '$every']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4;

    (function($base, $super) {
      function $Application(){};
      var self = $Application = $klass($base, $super, 'Application', $Application);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      return (Opal.defs(self, '$acting_user_id', TMP_1 = function $$acting_user_id() {
        var self = this;

        return $scope.get('ClientDrivers').$opts()['$[]']("acting_user_id");
      }, TMP_1.$$arity = 0), nil) && 'acting_user_id'
    })($scope.base, null);

    if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      Opal.defs(self, '$connect', TMP_3 = function $$connect($a_rest) {
        var $b, $c, TMP_2, self = this, channels;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        channels = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          channels[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = ($c = channels).$each, $b.$$p = (TMP_2 = function(channel){var self = TMP_2.$$s || this, $a, $d;
if (channel == null) channel = nil;
        if ((($a = channel['$is_a?']($scope.get('Class'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('IncomingBroadcast').$connect_to(channel.$name())
          } else if ((($a = ((($d = channel['$is_a?']($scope.get('String'))) !== false && $d !== nil && $d != null) ? $d : channel['$is_a?']($scope.get('Array')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = $scope.get('IncomingBroadcast')).$connect_to.apply($a, Opal.to_a(channel))
          } else if ((($d = channel.$id()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return $scope.get('IncomingBroadcast').$connect_to(channel.$class().$name(), channel.$id())
            } else {
            return self.$raise("cannot connect to model before it has been saved")
          }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $b).call($c);
      }, TMP_3.$$arity = -1);

      Opal.defs(self, '$action_cable_consumer', TMP_4 = function $$action_cable_consumer() {
        var self = this;

        return $scope.get('ClientDrivers').$opts()['$[]']("action_cable_consumer");
      }, TMP_4.$$arity = 0);

      (function($base, $super) {
        function $IncomingBroadcast(){};
        var self = $IncomingBroadcast = $klass($base, $super, 'IncomingBroadcast', $IncomingBroadcast);

        var def = self.$$proto, $scope = self.$$scope, TMP_5, TMP_6, TMP_9;

        Opal.defs(self, '$open_channels', TMP_5 = function $$open_channels() {
          var $a, self = this;
          if (self.open_channels == null) self.open_channels = nil;

          return ((($a = self.open_channels) !== false && $a !== nil && $a != null) ? $a : self.open_channels = $scope.get('Set').$new());
        }, TMP_5.$$arity = 0);

        Opal.defs(self, '$add_connection', TMP_6 = function $$add_connection(channel_name, id) {
          var self = this, channel_string = nil;

          if (id == null) {
            id = nil;
          }
          channel_string = "" + (channel_name) + ((function() {if (id !== false && id !== nil && id != null) {
            return $rb_plus("-", id.$to_s())
            } else {
            return nil
          }; return nil; })());
          self.$open_channels()['$<<'](channel_string);
          return channel_string;
        }, TMP_6.$$arity = -2);

        return (Opal.defs(self, '$connect_to', TMP_9 = function $$connect_to(channel_name, id) {
          var $a, $b, TMP_7, $c, TMP_8, self = this, channel_string = nil, channel = nil;

          if (id == null) {
            id = nil;
          }
          channel_string = self.$add_connection(channel_name, id);
          if ($scope.get('ClientDrivers').$opts()['$[]']("transport")['$==']("pusher")) {
            channel = "" + ($scope.get('ClientDrivers').$opts()['$[]']("channel")) + "-" + (channel_string);
            
            var channel = $scope.get('ClientDrivers').$opts()['$[]']("pusher_api").subscribe(channel.$gsub("::", "=="));
            channel.bind('dispatch', $scope.get('ClientDrivers').$opts()['$[]']("dispatch"))
            channel.bind('pusher:subscription_succeeded', ($a = ($b = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

            return $scope.get('ClientDrivers').$get_queued_data("connect-to-transport", channel_string)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b))
          ;
          } else if ($scope.get('ClientDrivers').$opts()['$[]']("transport")['$==']("action_cable")) {
            channel = "" + ($scope.get('ClientDrivers').$opts()['$[]']("channel")) + "-" + (channel_string);
            return ($a = ($c = $scope.get('HTTP').$post($scope.get('ClientDrivers').$polling_path("action-cable-auth", channel))).$then, $a.$$p = (TMP_8 = function(response){var self = TMP_8.$$s || this;
if (response == null) response = nil;
            
              $scope.get('Hyperloop').$action_cable_consumer().subscriptions.create(
                {
                  channel: "Hyperloop::ActionCableChannel",
                  client_id: $scope.get('ClientDrivers').$opts()['$[]']("id"),
                  hyperloop_channel: channel_string,
                  authorization: response.$json()['$[]']("authorization"),
                  salt: response.$json()['$[]']("salt")
                },
                {
                  connected: function() {
                    $scope.get('ClientDrivers').$get_queued_data("connect-to-transport", channel_string)
                  },
                  received: function(data) {
                    $scope.get('ClientDrivers').$sync_dispatch($scope.get('JSON').$parse(JSON.stringify(data))['$[]']("data"))
                  }
                }
              )
            ;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($c);
            } else {
            return $scope.get('HTTP').$get($scope.get('ClientDrivers').$polling_path("subscribe", channel_string))
          };
        }, TMP_9.$$arity = -2), nil) && 'connect_to';
      })($scope.base, null);};

    (function($base, $super) {
      function $ClientDrivers(){};
      var self = $ClientDrivers = $klass($base, $super, 'ClientDrivers', $ClientDrivers);

      var def = self.$$proto, $scope = self.$$scope, TMP_10, $a, TMP_13, TMP_17, TMP_18;

      self.$include((($scope.get('React')).$$scope.get('IsomorphicHelpers')));

      Opal.defs(self, '$sync_dispatch', TMP_10 = function $$sync_dispatch(data) {
        var self = this;

        return data['$[]']("operation").$constantize().$dispatch_from_server(data['$[]']("params"));
      }, TMP_10.$$arity = 1);

      if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {};

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto;

        return self.$attr_reader("opts")
      })(Opal.get_singleton_class(self));

      Opal.defs(self, '$get_queued_data', TMP_13 = function $$get_queued_data(operation, channel, opts) {
        var $a, $b, TMP_11, self = this;

        if (channel == null) {
          channel = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        return ($a = ($b = $scope.get('HTTP').$get(self.$polling_path(operation, channel), opts)).$then, $a.$$p = (TMP_11 = function(response){var self = TMP_11.$$s || this, $c, $d, TMP_12;
if (response == null) response = nil;
        return ($c = ($d = response.$json()).$each, $c.$$p = (TMP_12 = function(data){var self = TMP_12.$$s || this;
if (data == null) data = nil;
          return self.$sync_dispatch(data['$[]'](1))}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $c).call($d)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
      }, TMP_13.$$arity = -2);

      Opal.defs(self, '$initialize_client_drivers_on_boot', TMP_17 = function $$initialize_client_drivers_on_boot() {
        var $a, $b, TMP_14, $c, $d, $e, TMP_15, $f, TMP_16, self = this, h = nil, pusher_api = nil;

        if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
          self.opts = $scope.get('Hash').$new(window.HyperloopOpts)};
        if ((($a = self['$on_opal_client?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (self.$opts()['$[]']("transport")['$==']("pusher")) {
            self.$opts()['$[]=']("dispatch", ($a = ($b = self).$lambda, $a.$$p = (TMP_14 = function(data){var self = TMP_14.$$s || this;
if (data == null) data = nil;
            return self.$sync_dispatch($scope.get('JSON').$parse(JSON.stringify(data)))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b));
            if ((($a = ($c = self.$opts()['$[]']("client_logging"), $c !== false && $c !== nil && $c != null ?window.console && window.console.log : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              Pusher.log = function(message) {window.console.log(message);}};
            if ((($a = self.$opts()['$[]']("pusher_fake_js")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.$opts()['$[]=']("pusher_api", eval(self.$opts()['$[]']("pusher_fake_js")))
              } else {
              h = nil;
              pusher_api = nil;
              
              h = {
                encrypted: self.$opts()['$[]']("encrypted"),
                authEndpoint: window.HyperloopEnginePath+'/hyperloop-pusher-auth',
                auth: {headers: {'X-CSRF-Token': self.$opts()['$[]']("form_authenticity_token")}}
              };
              pusher_api = new Pusher(self.$opts()['$[]']("key"), h)
            ;
              self.$opts()['$[]=']("pusher_api", pusher_api);
            };
            return ($a = $scope.get('Hyperloop')).$connect.apply($a, Opal.to_a(self.$opts()['$[]']("auto_connect")));
          } else if (self.$opts()['$[]']("transport")['$==']("action_cable")) {
            self.$opts()['$[]=']("action_cable_consumer", ActionCable.createConsumer.apply(ActionCable, [].concat(Opal.to_a(self.$opts()['$[]']("action_cable_consumer_url")))));
            return ($c = $scope.get('Hyperloop')).$connect.apply($c, Opal.to_a(self.$opts()['$[]']("auto_connect")));
          } else if (self.$opts()['$[]']("transport")['$==']("simple_poller")) {
            ($d = ($e = self.$opts()['$[]']("auto_connect")).$each, $d.$$p = (TMP_15 = function(channel){var self = TMP_15.$$s || this, $f;
if (channel == null) channel = nil;
            return ($f = $scope.get('IncomingBroadcast')).$add_connection.apply($f, Opal.to_a(channel))}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $d).call($e);
            return ($d = ($f = self).$every, $d.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

            return self.$get_queued_data("read", nil, $hash2(["headers"], {"headers": $hash2(["X-HYPERLOOP-SILENT-REQUEST"], {"X-HYPERLOOP-SILENT-REQUEST": true})}))}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $d).call($f, self.$opts()['$[]']("seconds_between_poll"));
            } else {
            return nil
          }
          } else {
          return nil
        };
      }, TMP_17.$$arity = 0);

      return (Opal.defs(self, '$polling_path', TMP_18 = function $$polling_path(to, id) {
        var self = this, s = nil;

        if (id == null) {
          id = nil;
        }
        s = "" + (window.HyperloopEnginePath) + "/hyperloop-" + (to) + "/" + (self.$opts()['$[]']("id"));
        if (id !== false && id !== nil && id != null) {
          s = "" + (s) + "/" + (id)};
        return s;
      }, TMP_18.$$arity = -2), nil) && 'polling_path';
    })($scope.base, null);
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/exception"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $AccessViolation(){};
      var self = $AccessViolation = $klass($base, $super, 'AccessViolation', $AccessViolation);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      return (Opal.defn(self, '$message', TMP_1 = function $$message() {
        var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_1.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return "Hyperloop::Operation::AccessViolation: " + (($a = ($b = self, Opal.find_super_dispatcher(self, 'message', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper));
      }, TMP_1.$$arity = 0), nil) && 'message'
    })($scope.base, $scope.get('StandardError'));

    (function($base, $super) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $ValidationException(){};
        var self = $ValidationException = $klass($base, $super, 'ValidationException', $ValidationException);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, (($scope.get('Mutations')).$$scope.get('ValidationException')))
    })($scope.base, null);
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/promise"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$resolve', '$new', '$reject', '$attr_reader', '$===', '$value', '$has_key?', '$keys', '$!', '$==', '$realized?', '$<<', '$>>', '$exception?', '$[]', '$resolved?', '$rejected?', '$error', '$include?', '$action', '$raise', '$^', '$call', '$resolve!', '$exception!', '$any?', '$each', '$reject!', '$there_can_be_only_one!', '$then', '$to_proc', '$fail', '$always', '$trace', '$class', '$object_id', '$+', '$inspect', '$act?', '$nil?', '$prev', '$push', '$concat', '$it', '$proc', '$reverse', '$pop', '$<=', '$length', '$shift', '$-', '$wait', '$map', '$reduce', '$try', '$tap', '$all?', '$find']);
  return (function($base, $super) {
    function $Promise(){};
    var self = $Promise = $klass($base, $super, 'Promise', $Promise);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_18, TMP_19, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32;

    def.value = def.action = def.exception = def.realized = def.next = def.delayed = def.error = def.prev = nil;
    Opal.defs(self, '$value', TMP_1 = function $$value(value) {
      var self = this;

      return self.$new().$resolve(value);
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$error', TMP_2 = function $$error(value) {
      var self = this;

      return self.$new().$reject(value);
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$when', TMP_3 = function $$when($a_rest) {
      var self = this, promises;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      promises = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        promises[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $scope.get('When').$new(promises);
    }, TMP_3.$$arity = -1);

    self.$attr_reader("error", "prev", "next");

    Opal.defn(self, '$initialize', TMP_4 = function $$initialize(action) {
      var self = this;

      if (action == null) {
        action = $hash2([], {});
      }
      self.action = action;
      self.realized = false;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = false;
      self.prev = nil;
      return self.next = [];
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$value', TMP_5 = function $$value() {
      var $a, self = this;

      if ((($a = $scope.get('Promise')['$==='](self.value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.value.$value()
        } else {
        return self.value
      };
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$act?', TMP_6 = function() {
      var $a, self = this;

      return ((($a = self.action['$has_key?']("success")) !== false && $a !== nil && $a != null) ? $a : self.action['$has_key?']("always"));
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$action', TMP_7 = function $$action() {
      var self = this;

      return self.action.$keys();
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$exception?', TMP_8 = function() {
      var self = this;

      return self.exception;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$realized?', TMP_9 = function() {
      var self = this;

      return self.realized['$!']()['$!']();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$resolved?', TMP_10 = function() {
      var self = this;

      return self.realized['$==']("resolve");
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$rejected?', TMP_11 = function() {
      var self = this;

      return self.realized['$==']("reject");
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$pending?', TMP_12 = function() {
      var self = this;

      return self['$realized?']()['$!']();
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$^', TMP_13 = function(promise) {
      var self = this;

      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$<<', TMP_14 = function(promise) {
      var self = this;

      self.prev = promise;
      return self;
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$>>', TMP_15 = function(promise) {
      var $a, $b, $c, self = this;

      self.next['$<<'](promise);
      if ((($a = self['$exception?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        promise.$reject(self.delayed['$[]'](0))
      } else if ((($a = self['$resolved?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        promise.$resolve((function() {if ((($a = self.delayed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.$value()
        }; return nil; })())
      } else if ((($a = self['$rejected?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = self.action['$has_key?']("failure")['$!']()) !== false && $b !== nil && $b != null) ? $b : $scope.get('Promise')['$==='](((function() {if ((($c = self.delayed) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.error
        }; return nil; })())))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())
        } else if ((($a = promise.$action()['$include?']("always")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())}};
      return self;
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$resolve', TMP_16 = function $$resolve(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      if ((($a = self['$realized?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
        if ((($a = block = ((($b = self.action['$[]']("success")) !== false && $b !== nil && $b != null) ? $b : self.action['$[]']("always"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        self['$resolve!'](value);
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return self;
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$resolve!', TMP_18 = function(value) {
      var $a, $b, TMP_17, self = this;

      self.realized = "resolve";
      self.value = value;
      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self.next).$each, $a.$$p = (TMP_17 = function(p){var self = TMP_17.$$s || this;
if (p == null) p = nil;
        return p.$resolve(value)}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b)
        } else {
        return self.delayed = [value]
      };
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$reject', TMP_19 = function $$reject(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      if ((($a = self['$realized?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
        if ((($a = block = ((($b = self.action['$[]']("failure")) !== false && $b !== nil && $b != null) ? $b : self.action['$[]']("always"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        if ((($a = self.action['$has_key?']("always")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self['$resolve!'](value)
          } else {
          self['$reject!'](value)
        };
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return self;
    }, TMP_19.$$arity = -1);

    Opal.defn(self, '$reject!', TMP_21 = function(value) {
      var $a, $b, TMP_20, self = this;

      self.realized = "reject";
      self.error = value;
      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self.next).$each, $a.$$p = (TMP_20 = function(p){var self = TMP_20.$$s || this;
if (p == null) p = nil;
        return p.$reject(value)}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $a).call($b)
        } else {
        return self.delayed = [value]
      };
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$exception!', TMP_22 = function(error) {
      var self = this;

      self.exception = true;
      return self['$reject!'](error);
    }, TMP_22.$$arity = 1);

    Opal.defn(self, '$then', TMP_23 = function $$then() {
      var self = this, $iter = TMP_23.$$p, block = $iter || nil;

      TMP_23.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["success"], {"success": block})));
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$then!', TMP_24 = function() {
      var $a, $b, self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$then, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_24.$$arity = 0);

    Opal.alias(self, 'do', 'then');

    Opal.alias(self, 'do!', 'then!');

    Opal.defn(self, '$fail', TMP_25 = function $$fail() {
      var self = this, $iter = TMP_25.$$p, block = $iter || nil;

      TMP_25.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["failure"], {"failure": block})));
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$fail!', TMP_26 = function() {
      var $a, $b, self = this, $iter = TMP_26.$$p, block = $iter || nil;

      TMP_26.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$fail, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_26.$$arity = 0);

    Opal.alias(self, 'rescue', 'fail');

    Opal.alias(self, 'catch', 'fail');

    Opal.alias(self, 'rescue!', 'fail!');

    Opal.alias(self, 'catch!', 'fail!');

    Opal.defn(self, '$always', TMP_27 = function $$always() {
      var self = this, $iter = TMP_27.$$p, block = $iter || nil;

      TMP_27.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["always"], {"always": block})));
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$always!', TMP_28 = function() {
      var $a, $b, self = this, $iter = TMP_28.$$p, block = $iter || nil;

      TMP_28.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$always, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_28.$$arity = 0);

    Opal.alias(self, 'finally', 'always');

    Opal.alias(self, 'ensure', 'always');

    Opal.alias(self, 'finally!', 'always!');

    Opal.alias(self, 'ensure!', 'always!');

    Opal.defn(self, '$trace', TMP_29 = function $$trace(depth) {
      var self = this, $iter = TMP_29.$$p, block = $iter || nil;

      if (depth == null) {
        depth = nil;
      }
      TMP_29.$$p = null;
      return self['$^']($scope.get('Trace').$new(depth, block));
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$trace!', TMP_30 = function($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_30.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_30.$$p = null;
      self['$there_can_be_only_one!']();
      return ($b = ($c = self).$trace, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
    }, TMP_30.$$arity = -1);

    Opal.defn(self, '$there_can_be_only_one!', TMP_31 = function() {
      var $a, self = this;

      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "a promise has already been chained")
        } else {
        return nil
      };
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_32 = function $$inspect() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, " >> " + (self.next.$inspect()))};
      if ((($a = self['$realized?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, ": " + ((((($a = self.value) !== false && $a !== nil && $a != null) ? $a : self.error)).$inspect()) + ">")
        } else {
        result = $rb_plus(result, ">")
      };
      return result;
    }, TMP_32.$$arity = 0);

    (function($base, $super) {
      function $Trace(){};
      var self = $Trace = $klass($base, $super, 'Trace', $Trace);

      var def = self.$$proto, $scope = self.$$scope, TMP_33, TMP_34;

      Opal.defs(self, '$it', TMP_33 = function $$it(promise) {
        var $a, $b, self = this, current = nil, prev = nil;

        current = [];
        if ((($a = ((($b = promise['$act?']()) !== false && $b !== nil && $b != null) ? $b : promise.$prev()['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          current.$push(promise.$value())};
        if ((($a = prev = promise.$prev()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return current.$concat(self.$it(prev))
          } else {
          return current
        };
      }, TMP_33.$$arity = 1);

      return (Opal.defn(self, '$initialize', TMP_34 = function $$initialize(depth, block) {
        var $a, $b, $c, $d, TMP_35, self = this, $iter = TMP_34.$$p, $yield = $iter || nil;

        TMP_34.$$p = null;
        self.depth = depth;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_34, false)), $a.$$p = null, $a).call($b, $hash2(["success"], {"success": ($c = ($d = self).$proc, $c.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this, $e, $f, trace = nil;

        trace = $scope.get('Trace').$it(self).$reverse();
          trace.$pop();
          if ((($e = (($f = depth !== false && depth !== nil && depth != null) ? $rb_le(depth, trace.$length()) : depth)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            trace.$shift($rb_minus(trace.$length(), depth))};
          return ($e = block).$call.apply($e, Opal.to_a(trace));}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35), $c).call($d)}));
      }, TMP_34.$$arity = 2), nil) && 'initialize';
    })($scope.base, self);

    return (function($base, $super) {
      function $When(){};
      var self = $When = $klass($base, $super, 'When', $When);

      var def = self.$$proto, $scope = self.$$scope, TMP_36, TMP_38, TMP_40, TMP_42, TMP_45, TMP_47, TMP_48;

      def.wait = nil;
      Opal.defn(self, '$initialize', TMP_36 = function $$initialize(promises) {
        var $a, $b, $c, TMP_37, self = this, $iter = TMP_36.$$p, $yield = $iter || nil;

        if (promises == null) {
          promises = [];
        }
        TMP_36.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_36, false)), $a.$$p = null, $a).call($b);
        self.wait = [];
        return ($a = ($c = promises).$each, $a.$$p = (TMP_37 = function(promise){var self = TMP_37.$$s || this;
if (promise == null) promise = nil;
        return self.$wait(promise)}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37), $a).call($c);
      }, TMP_36.$$arity = -1);

      Opal.defn(self, '$each', TMP_38 = function $$each() {
        var $a, $b, TMP_39, self = this, $iter = TMP_38.$$p, block = $iter || nil;

        TMP_38.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_39 = function(values){var self = TMP_39.$$s || this, $c, $d;
if (values == null) values = nil;
        return ($c = ($d = values).$each, $c.$$p = block.$to_proc(), $c).call($d)}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39), $a).call($b);
      }, TMP_38.$$arity = 0);

      Opal.defn(self, '$collect', TMP_40 = function $$collect() {
        var $a, $b, TMP_41, self = this, $iter = TMP_40.$$p, block = $iter || nil;

        TMP_40.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_41 = function(values){var self = TMP_41.$$s || this, $c, $d;
if (values == null) values = nil;
        return $scope.get('When').$new(($c = ($d = values).$map, $c.$$p = block.$to_proc(), $c).call($d))}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41), $a).call($b);
      }, TMP_40.$$arity = 0);

      Opal.defn(self, '$inject', TMP_42 = function $$inject($a_rest) {
        var $b, $c, TMP_43, self = this, args, $iter = TMP_42.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_42.$$p = null;
        return ($b = ($c = self).$then, $b.$$p = (TMP_43 = function(values){var self = TMP_43.$$s || this, $a, $d;
if (values == null) values = nil;
        return ($a = ($d = values).$reduce, $a.$$p = block.$to_proc(), $a).apply($d, Opal.to_a(args))}, TMP_43.$$s = self, TMP_43.$$arity = 1, TMP_43), $b).call($c);
      }, TMP_42.$$arity = -1);

      Opal.alias(self, 'map', 'collect');

      Opal.alias(self, 'reduce', 'inject');

      Opal.defn(self, '$wait', TMP_45 = function $$wait(promise) {
        var $a, $b, TMP_44, self = this;

        if ((($a = $scope.get('Promise')['$==='](promise)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          promise = $scope.get('Promise').$value(promise)
        };
        if ((($a = promise['$act?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          promise = promise.$then()};
        self.wait['$<<'](promise);
        ($a = ($b = promise).$always, $a.$$p = (TMP_44 = function(){var self = TMP_44.$$s || this, $c;
          if (self.next == null) self.next = nil;

        if ((($c = self.next['$any?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return self.$try()
            } else {
            return nil
          }}, TMP_44.$$s = self, TMP_44.$$arity = 0, TMP_44), $a).call($b);
        return self;
      }, TMP_45.$$arity = 1);

      Opal.alias(self, 'and', 'wait');

      Opal.defn(self, '$>>', TMP_47 = function($a_rest) {
        var $b, $c, TMP_46, $d, $e, self = this, $iter = TMP_47.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_47.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return ($b = ($c = ($d = ($e = self, Opal.find_super_dispatcher(self, '>>', TMP_47, false)), $d.$$p = $iter, $d).apply($e, $zuper)).$tap, $b.$$p = (TMP_46 = function(){var self = TMP_46.$$s || this;

        return self.$try()}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46), $b).call($c);
      }, TMP_47.$$arity = -1);

      return (Opal.defn(self, '$try', TMP_48 = function() {
        var $a, $b, $c, $d, self = this, promise = nil;

        if ((($a = ($b = ($c = self.wait)['$all?'], $b.$$p = "realized?".$to_proc(), $b).call($c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = promise = ($b = ($d = self.wait).$find, $b.$$p = "rejected?".$to_proc(), $b).call($d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$reject(promise.$error())
            } else {
            return self.$resolve(($a = ($b = self.wait).$map, $a.$$p = "value".$to_proc(), $a).call($b))
          }
          } else {
          return nil
        };
      }, TMP_48.$$arity = 0), nil) && 'try';
    })($scope.base, self);
  })($scope.base, null)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/railway"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/api"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$is_a?', '$raise', '$new', '$tap', '$split', '$to_s', '$pop', '$inject', '$to_sym', '$[]', '$[]=', '$!', '$nil?', '$abort!', '$succeed!', '$_Railway', '$class', '$_run', '$instance_eval', '$process_params', '$process_validations', '$run', '$dispatch', '$result', '$then', '$to_proc', '$fail', '$add_param', '$each', '$add_validation', '$add_error', '$add_step', '$add_failed', '$add_async', '$add_receiver', '$singleton_class', '$define_singleton_method', '$superclass', '$==', '$instance_variable_get', '$instance_variable_set', '$dup']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

      def.errors = def.params = nil;
      Opal.defn(self, '$add_error', TMP_3 = function $$add_error(key, kind, message) {
        var $a, $b, TMP_1, self = this;

        if (message == null) {
          message = nil;
        }
        if ((($a = kind['$is_a?']($scope.get('Symbol'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('ArgumentError').$new("Invalid kind"))
        };
        ((($a = self.errors) !== false && $a !== nil && $a != null) ? $a : self.errors = (($scope.get('Mutations')).$$scope.get('ErrorHash')).$new());
        return ($a = ($b = self.errors).$tap, $a.$$p = (TMP_1 = function(errs){var self = TMP_1.$$s || this, $c, $d, TMP_2, path = nil, last = nil, inner = nil;
if (errs == null) errs = nil;
        path = key.$to_s().$split(".");
          last = path.$pop();
          inner = ($c = ($d = path).$inject, $c.$$p = (TMP_2 = function(cur_errors, part){var self = TMP_2.$$s || this, $e, $f, $g;
if (cur_errors == null) cur_errors = nil;if (part == null) part = nil;
          return ($e = part.$to_sym(), $f = cur_errors, ((($g = $f['$[]']($e)) !== false && $g !== nil && $g != null) ? $g : $f['$[]=']($e, (($scope.get('Mutations')).$$scope.get('ErrorHash')).$new())))}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $c).call($d, errs);
          return inner['$[]='](last, (($scope.get('Mutations')).$$scope.get('ErrorAtom')).$new(key, kind, $hash2(["message"], {"message": message})));}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
      }, TMP_3.$$arity = -3);

      Opal.defn(self, '$has_errors?', TMP_4 = function() {
        var self = this;

        return self.errors['$nil?']()['$!']();
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$params', TMP_5 = function $$params() {
        var self = this;

        return self.params;
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$abort!', TMP_6 = function(arg) {
        var self = this;

        if (arg == null) {
          arg = nil;
        }
        return $scope.get('Railway')['$abort!'](arg);
      }, TMP_6.$$arity = -1);

      Opal.defn(self, '$succeed!', TMP_7 = function(arg) {
        var self = this;

        if (arg == null) {
          arg = nil;
        }
        return $scope.get('Railway')['$succeed!'](arg);
      }, TMP_7.$$arity = -1);

      Opal.defn(self, '$initialize', TMP_8 = function $$initialize() {
        var self = this;

        return self._railway = self.$class().$_Railway().$new(self);
      }, TMP_8.$$arity = 0);

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_9, TMP_11, TMP_12, TMP_13, TMP_14, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_35;

        Opal.defn(self, '$run', TMP_9 = function $$run($a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = self).$_run.apply($b, Opal.to_a(args));
        }, TMP_9.$$arity = -1);
        Opal.defn(self, '$_run', TMP_11 = function $$_run($a_rest) {
          var $b, $c, TMP_10, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = ($c = self.$new()).$instance_eval, $b.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;
            if (self._railway == null) self._railway = nil;

          self._railway.$process_params(args);
            self._railway.$process_validations();
            self._railway.$run();
            self._railway.$dispatch();
            return self._railway.$result();}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $b).call($c);
        }, TMP_11.$$arity = -1);
        Opal.defn(self, '$then', TMP_12 = function $$then($a_rest) {
          var $b, $c, $d, self = this, args, $iter = TMP_12.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_12.$$p = null;
          return ($b = ($c = ($d = self).$run.apply($d, Opal.to_a(args))).$then, $b.$$p = block.$to_proc(), $b).call($c);
        }, TMP_12.$$arity = -1);
        Opal.defn(self, '$fail', TMP_13 = function $$fail($a_rest) {
          var $b, $c, $d, self = this, args, $iter = TMP_13.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_13.$$p = null;
          return ($b = ($c = ($d = self).$run.apply($d, Opal.to_a(args))).$fail, $b.$$p = block.$to_proc(), $b).call($c);
        }, TMP_13.$$arity = -1);
        Opal.defn(self, '$param', TMP_14 = function $$param($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_14.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_14.$$p = null;
          return ($b = ($c = self.$_Railway()).$add_param, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_14.$$arity = -1);
        Opal.defn(self, '$outbound', TMP_16 = function $$outbound($a_rest) {
          var $b, $c, TMP_15, self = this, keys;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          keys = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            keys[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = ($c = keys).$each, $b.$$p = (TMP_15 = function(key){var self = TMP_15.$$s || this;
if (key == null) key = nil;
          return self.$_Railway().$add_param($hash(key, nil, "type", "outbound"))}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $b).call($c);
        }, TMP_16.$$arity = -1);
        Opal.defn(self, '$validate', TMP_17 = function $$validate($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_17.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_17.$$p = null;
          return ($b = ($c = self.$_Railway()).$add_validation, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_17.$$arity = -1);
        Opal.defn(self, '$add_error', TMP_18 = function $$add_error(param, symbol, message, $a_rest) {
          var $b, $c, self = this, args, $iter = TMP_18.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 3;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 3; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 3] = arguments[$arg_idx];
          }
          TMP_18.$$p = null;
          return ($b = ($c = self.$_Railway()).$add_error, $b.$$p = block.$to_proc(), $b).apply($c, [param, symbol, message].concat(Opal.to_a(args)));
        }, TMP_18.$$arity = -4);
        Opal.defn(self, '$step', TMP_19 = function $$step($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_19.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_19.$$p = null;
          return ($b = ($c = self.$_Railway()).$add_step, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_19.$$arity = -1);
        Opal.defn(self, '$failed', TMP_20 = function $$failed($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_20.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_20.$$p = null;
          return ($b = ($c = self.$_Railway()).$add_failed, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_20.$$arity = -1);
        Opal.defn(self, '$async', TMP_21 = function $$async($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_21.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_21.$$p = null;
          return ($b = ($c = self.$_Railway()).$add_async, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_21.$$arity = -1);
        Opal.defn(self, '$on_dispatch', TMP_22 = function $$on_dispatch() {
          var $a, $b, self = this, $iter = TMP_22.$$p, block = $iter || nil;

          TMP_22.$$p = null;
          return ($a = ($b = self.$_Railway()).$add_receiver, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_22.$$arity = 0);
        Opal.defn(self, '$_Railway', TMP_23 = function $$_Railway() {
          var self = this;

          return self.$singleton_class().$_Railway();
        }, TMP_23.$$arity = 0);
        return (Opal.defn(self, '$inherited', TMP_35 = function $$inherited(child) {
          var $a, $b, TMP_24, $c, TMP_25, $d, TMP_27, $e, TMP_28, $f, TMP_29, $g, TMP_30, $h, TMP_31, $i, TMP_32, self = this;

          ($a = ($b = child.$singleton_class()).$define_singleton_method, $a.$$p = (TMP_24 = function($c_rest){var self = TMP_24.$$s || this, block, args, $d, $e;

            block = TMP_24.$$p || nil, TMP_24.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return ($d = ($e = self.$_Railway()).$add_param, $d.$$p = block.$to_proc(), $d).apply($e, Opal.to_a(args))}, TMP_24.$$s = self, TMP_24.$$arity = -1, TMP_24), $a).call($b, "param");
          ($a = ($c = child.$singleton_class()).$define_singleton_method, $a.$$p = (TMP_25 = function($d_rest){var self = TMP_25.$$s || this, keys, $e, $f, TMP_26;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            keys = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              keys[$arg_idx - 0] = arguments[$arg_idx];
            }
          return ($e = ($f = keys).$each, $e.$$p = (TMP_26 = function(key){var self = TMP_26.$$s || this;
if (key == null) key = nil;
            return self.$_Railway().$add_param($hash(key, nil, "type", "outbound"))}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $e).call($f)}, TMP_25.$$s = self, TMP_25.$$arity = -1, TMP_25), $a).call($c, "outbound");
          ($a = ($d = child.$singleton_class()).$define_singleton_method, $a.$$p = (TMP_27 = function($e_rest){var self = TMP_27.$$s || this, block, args, $f, $g;

            block = TMP_27.$$p || nil, TMP_27.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return ($f = ($g = self.$_Railway()).$add_validation, $f.$$p = block.$to_proc(), $f).apply($g, Opal.to_a(args))}, TMP_27.$$s = self, TMP_27.$$arity = -1, TMP_27), $a).call($d, "validate");
          ($a = ($e = child.$singleton_class()).$define_singleton_method, $a.$$p = (TMP_28 = function(param, symbol, message, $f_rest){var self = TMP_28.$$s || this, block, args, $g, $h;

            block = TMP_28.$$p || nil, TMP_28.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 3;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 3; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 3] = arguments[$arg_idx];
            }if (param == null) param = nil;if (symbol == null) symbol = nil;if (message == null) message = nil;
          return ($g = ($h = self.$_Railway()).$add_error, $g.$$p = block.$to_proc(), $g).apply($h, [param, symbol, message].concat(Opal.to_a(args)))}, TMP_28.$$s = self, TMP_28.$$arity = -4, TMP_28), $a).call($e, "add_error");
          ($a = ($f = child.$singleton_class()).$define_singleton_method, $a.$$p = (TMP_29 = function($g_rest){var self = TMP_29.$$s || this, block, args, $h, $i;

            block = TMP_29.$$p || nil, TMP_29.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return ($h = ($i = self.$_Railway()).$add_step, $h.$$p = block.$to_proc(), $h).apply($i, [$hash2(["scope"], {"scope": "class"})].concat(Opal.to_a(args)))}, TMP_29.$$s = self, TMP_29.$$arity = -1, TMP_29), $a).call($f, "step");
          ($a = ($g = child.$singleton_class()).$define_singleton_method, $a.$$p = (TMP_30 = function($h_rest){var self = TMP_30.$$s || this, block, args, $i, $j;

            block = TMP_30.$$p || nil, TMP_30.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return ($i = ($j = self.$_Railway()).$add_failed, $i.$$p = block.$to_proc(), $i).apply($j, [$hash2(["scope"], {"scope": "class"})].concat(Opal.to_a(args)))}, TMP_30.$$s = self, TMP_30.$$arity = -1, TMP_30), $a).call($g, "failed");
          ($a = ($h = child.$singleton_class()).$define_singleton_method, $a.$$p = (TMP_31 = function($i_rest){var self = TMP_31.$$s || this, block, args, $j, $k;

            block = TMP_31.$$p || nil, TMP_31.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return ($j = ($k = self.$_Railway()).$add_async, $j.$$p = block.$to_proc(), $j).apply($k, [$hash2(["scope"], {"scope": "class"})].concat(Opal.to_a(args)))}, TMP_31.$$s = self, TMP_31.$$arity = -1, TMP_31), $a).call($h, "async");
          return ($a = ($i = child.$singleton_class()).$define_singleton_method, $a.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this, $j, $k, $l, TMP_33, my_super = nil;
            if (self._railway == null) self._railway = nil;

          return ((($j = self._railway) !== false && $j !== nil && $j != null) ? $j : self._railway = (function() {my_super = ((($k = self.$superclass()) !== false && $k !== nil && $k != null) ? $k : (self.$$singleton_of).$superclass().$singleton_class());
            if (my_super['$==']($scope.get('Operation').$singleton_class())) {
              return $scope.get('Class').$new($scope.get('Railway'))
              } else {
              return ($k = ($l = $scope.get('Class').$new(my_super.$_Railway())).$tap, $k.$$p = (TMP_33 = function(wrapper){var self = TMP_33.$$s || this, $m, $n, TMP_34;
if (wrapper == null) wrapper = nil;
              return ($m = ($n = ["@validations", "@tracks", "@receivers"]).$each, $m.$$p = (TMP_34 = function(var$){var self = TMP_34.$$s || this, $o, value = nil;
if (var$ == null) var$ = nil;
                value = my_super.$_Railway().$instance_variable_get(var$);
                  return wrapper.$instance_variable_set(var$, (($o = value !== false && value !== nil && value != null) ? value.$dup() : value));}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34), $m).call($n)}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33), $k).call($l)
            };})())}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $a).call($i, "_Railway");
        }, TMP_35.$$arity = 1), nil) && 'inherited';
      })(Opal.get_singleton_class(self));

      return (function($base, $super) {
        function $Railway(){};
        var self = $Railway = $klass($base, $super, 'Railway', $Railway);

        var def = self.$$proto, $scope = self.$$scope, TMP_36;

        return (Opal.defn(self, '$initialize', TMP_36 = function $$initialize(operation) {
          var self = this;

          return self.operation = operation;
        }, TMP_36.$$arity = 1), nil) && 'initialize'
      })($scope.base, null);
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/railway/dispatcher"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$receivers', '$class', '$<<', '$then', '$each', '$call', '$dispatch_params', '$params_wrapper', '$params', '$result']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Railway(){};
        var self = $Railway = $klass($base, $super, 'Railway', $Railway);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_6;

        Opal.defn(self, '$receivers', TMP_1 = function $$receivers() {
          var self = this;

          return self.$class().$receivers();
        }, TMP_1.$$arity = 0);

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_2, TMP_3;

          Opal.defn(self, '$receivers', TMP_2 = function $$receivers() {
            var $a, self = this;
            if (self.receivers == null) self.receivers = nil;

            return ((($a = self.receivers) !== false && $a !== nil && $a != null) ? $a : self.receivers = []);
          }, TMP_2.$$arity = 0);
          return (Opal.defn(self, '$add_receiver', TMP_3 = function $$add_receiver() {
            var self = this, $iter = TMP_3.$$p, block = $iter || nil;

            TMP_3.$$p = null;
            return self.$receivers()['$<<'](block);
          }, TMP_3.$$arity = 0), nil) && 'add_receiver';
        })(Opal.get_singleton_class(self));

        return (Opal.defn(self, '$dispatch', TMP_6 = function $$dispatch() {
          var $a, $b, TMP_4, self = this;

          return ($a = ($b = self.$result()).$then, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $c, $d, TMP_5;

          return ($c = ($d = self.$receivers()).$each, $c.$$p = (TMP_5 = function(receiver){var self = TMP_5.$$s || this;
              if (self.operation == null) self.operation = nil;
if (receiver == null) receiver = nil;
            return receiver.$call(self.$class().$params_wrapper().$dispatch_params(self.operation.$params()), self.operation)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $c).call($d)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b);
        }, TMP_6.$$arity = 0), nil) && 'dispatch';
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/railway/params_wrapper"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$with_indifferent_access', '$to_s', '$to_h', '$inject', '$respond_to?', '$raise', '$new', '$merge!', '$combine_arg_array', '$filter', '$hash_filter', '$instance_eval', '$translate_args', '$to_proc', '$key?', '$optional', '$send', '$required', '$define_method', '$[]', '$method_missing', '$[]=', '$dup', '$each', '$lock', '$get_name_and_opts', '$delete', '$is_a?', '$>', '$count', '$first', '$==', '$proc', '$duck', '$underscore', '$last', '$process_params', '$params_wrapper', '$class', '$add_param', '$superclass', '$tap', '$instance_variable_set']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ParamsWrapper(){};
        var self = $ParamsWrapper = $klass($base, $super, 'ParamsWrapper', $ParamsWrapper);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

        def.inputs = nil;
        Opal.defn(self, '$initialize', TMP_1 = function $$initialize(inputs) {
          var self = this;

          return self.inputs = inputs;
        }, TMP_1.$$arity = 1);

        Opal.defn(self, '$lock', TMP_2 = function $$lock() {
          var self = this;

          self.locked = true;
          return self;
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$to_h', TMP_3 = function $$to_h() {
          var self = this;

          return self.inputs.$with_indifferent_access();
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$to_s', TMP_4 = function $$to_s() {
          var self = this;

          return self.$to_h().$to_s();
        }, TMP_4.$$arity = 0);

        return (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_6, TMP_8, TMP_9, TMP_16, TMP_17, TMP_18, TMP_21;

          Opal.defn(self, '$combine_arg_array', TMP_6 = function $$combine_arg_array(args) {
            var $a, $b, TMP_5, self = this, hash = nil;

            return hash = ($a = ($b = args).$inject, $a.$$p = (TMP_5 = function(h, arg){var self = TMP_5.$$s || this, $c;
if (h == null) h = nil;if (arg == null) arg = nil;
            if ((($c = arg['$respond_to?']("to_h")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                } else {
                self.$raise($scope.get('ArgumentError').$new("All arguments must be hashes"))
              };
              return h['$merge!'](arg.$to_h());}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5), $a).call($b, $hash2([], {}).$with_indifferent_access());
          }, TMP_6.$$arity = 1);
          Opal.defn(self, '$process_params', TMP_8 = function $$process_params(operation, args) {
            var $a, $b, TMP_7, self = this, raw_inputs = nil, inputs = nil, errors = nil, params_wrapper = nil;

            raw_inputs = self.$combine_arg_array(args);
            $b = self.$hash_filter().$filter(raw_inputs), $a = Opal.to_ary($b), inputs = ($a[0] == null ? nil : $a[0]), errors = ($a[1] == null ? nil : $a[1]), $b;
            params_wrapper = self.$new(inputs);
            return ($a = ($b = operation).$instance_eval, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $c, $d;

            return $d = [raw_inputs, params_wrapper, errors], $c = Opal.to_ary($d), self.raw_inputs = ($c[0] == null ? nil : $c[0]), self.params = ($c[1] == null ? nil : $c[1]), self.errors = ($c[2] == null ? nil : $c[2]), $d}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b);
          }, TMP_8.$$arity = 2);
          Opal.defn(self, '$add_param', TMP_9 = function $$add_param($a_rest) {
            var $b, $c, $d, $e, TMP_10, TMP_11, $f, TMP_12, $g, TMP_13, self = this, args, $iter = TMP_9.$$p, block = $iter || nil, type_method = nil, name = nil, opts = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            TMP_9.$$p = null;
            $c = ($d = ($e = self).$translate_args, $d.$$p = block.$to_proc(), $d).apply($e, Opal.to_a(args)), $b = Opal.to_ary($c), type_method = ($b[0] == null ? nil : $b[0]), name = ($b[1] == null ? nil : $b[1]), opts = ($b[2] == null ? nil : $b[2]), block = ($b[3] == null ? nil : $b[3]), $c;
            if ((($b = opts['$key?']("default")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              ($b = ($c = self.$hash_filter()).$optional, $b.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $a, $f;

              return ($a = ($f = self).$send, $a.$$p = block.$to_proc(), $a).call($f, type_method, name, opts)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $b).call($c)
              } else {
              ($b = ($d = self.$hash_filter()).$required, $b.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this, $a, $f;

              return ($a = ($f = self).$send, $a.$$p = block.$to_proc(), $a).call($f, type_method, name, opts)}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $b).call($d)
            };
            ($b = ($f = self).$define_method, $b.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;
              if (self.inputs == null) self.inputs = nil;

            return self.inputs['$[]'](name)}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $b).call($f, name);
            return ($b = ($g = self).$define_method, $b.$$p = (TMP_13 = function(x){var self = TMP_13.$$s || this, $a;
              if (self.locked == null) self.locked = nil;
              if (self.inputs == null) self.inputs = nil;
if (x == null) x = nil;
            if ((($a = self.locked) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                self.$method_missing(("" + name.$to_s() + "="), x)};
              return self.inputs['$[]='](name, x);}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $b).call($g, ("" + name.$to_s() + "="));
          }, TMP_9.$$arity = -1);
          Opal.defn(self, '$dispatch_params', TMP_16 = function $$dispatch_params(params, hashes) {
            var $a, $b, TMP_14, self = this;

            if (hashes == null) {
              hashes = $hash2([], {});
            }
            params = params.$dup();
            ($a = ($b = hashes).$each, $a.$$p = (TMP_14 = function(hash){var self = TMP_14.$$s || this, $c, $d, TMP_15;
if (hash == null) hash = nil;
            return ($c = ($d = hash).$each, $c.$$p = (TMP_15 = function(k, v){var self = TMP_15.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
              return params.$send(("" + k.$to_s() + "="), v)}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $c).call($d)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
            return params.$lock();
          }, TMP_16.$$arity = -2);
          Opal.defn(self, '$hash_filter', TMP_17 = function $$hash_filter() {
            var $a, self = this;
            if (self.hash_filter == null) self.hash_filter = nil;

            return ((($a = self.hash_filter) !== false && $a !== nil && $a != null) ? $a : self.hash_filter = (($scope.get('Mutations')).$$scope.get('HashFilter')).$new());
          }, TMP_17.$$arity = 0);
          Opal.defn(self, '$translate_args', TMP_18 = function $$translate_args($a_rest) {
            var $b, $c, $d, $e, TMP_19, $f, TMP_20, self = this, args, $iter = TMP_18.$$p, block = $iter || nil, name = nil, opts = nil, type_method = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            TMP_18.$$p = null;
            $c = ($d = self).$get_name_and_opts.apply($d, Opal.to_a(args)), $b = Opal.to_ary($c), name = ($b[0] == null ? nil : $b[0]), opts = ($b[1] == null ? nil : $b[1]), $c;
            if ((($b = opts['$key?']("type")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              type_method = opts.$delete("type");
              if ((($b = type_method['$is_a?']($scope.get('Array'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                if ((($b = $rb_gt(type_method.$count(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                  opts['$[]=']("class", type_method.$first())};
                type_method = $scope.get('Array');
              } else if ((($b = ((($c = type_method['$is_a?']($scope.get('Hash'))) !== false && $c !== nil && $c != null) ? $c : type_method['$==']($scope.get('Hash')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                type_method = $scope.get('Hash');
                ((($b = block) !== false && $b !== nil && $b != null) ? $b : block = ($c = ($e = self).$proc, $c.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

                return self.$duck("*")}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $c).call($e));};
              type_method = type_method.$to_s().$underscore();
              } else {
              type_method = "duck"
            };
            return [type_method, name, opts, ((($b = block) !== false && $b !== nil && $b != null) ? $b : ($c = ($f = self).$proc, $c.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

            return nil}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $c).call($f))];
          }, TMP_18.$$arity = -1);
          return (Opal.defn(self, '$get_name_and_opts', TMP_21 = function $$get_name_and_opts($a_rest) {
            var $b, self = this, args, opts = nil, name = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ((($b = args['$[]'](0)['$is_a?']($scope.get('Hash'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              opts = args['$[]'](0);
              name = opts.$first().$first();
              opts['$[]=']("default", opts.$first().$last());
              opts.$delete(name);
              } else {
              name = args['$[]'](0);
              opts = ((($b = args['$[]'](1)) !== false && $b !== nil && $b != null) ? $b : $hash2([], {}));
            };
            return [name, opts];
          }, TMP_21.$$arity = -1), nil) && 'get_name_and_opts';
        })(Opal.get_singleton_class(self));
      })($scope.base, null);

      return (function($base, $super) {
        function $Railway(){};
        var self = $Railway = $klass($base, $super, 'Railway', $Railway);

        var def = self.$$proto, $scope = self.$$scope, TMP_22, TMP_23, TMP_25;

        def.operation = nil;
        Opal.defn(self, '$process_params', TMP_22 = function $$process_params(args) {
          var self = this;

          return self.$class().$params_wrapper().$process_params(self.operation, args);
        }, TMP_22.$$arity = 1);

        Opal.defs(self, '$add_param', TMP_23 = function $$add_param($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_23.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_23.$$p = null;
          return ($b = ($c = self.$params_wrapper()).$add_param, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_23.$$arity = -1);

        return (Opal.defs(self, '$params_wrapper', TMP_25 = function $$params_wrapper() {
          var $a, $b, $c, TMP_24, self = this;
          if (self.params_wrapper == null) self.params_wrapper = nil;

          return ((($a = self.params_wrapper) !== false && $a !== nil && $a != null) ? $a : self.params_wrapper = (function() {if ($scope.get('Railway')['$=='](self.$superclass())) {
            return $scope.get('Class').$new($scope.get('ParamsWrapper'))
            } else {
            return ($b = ($c = $scope.get('Class').$new(self.$superclass().$params_wrapper())).$tap, $b.$$p = (TMP_24 = function(wrapper){var self = TMP_24.$$s || this, $d, hash_filter = nil;
if (wrapper == null) wrapper = nil;
            hash_filter = self.$superclass().$params_wrapper().$hash_filter();
              return wrapper.$instance_variable_set("@hash_filter", (($d = hash_filter !== false && hash_filter !== nil && hash_filter != null) ? hash_filter.$dup() : hash_filter));}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $b).call($c)
          }; return nil; })());
        }, TMP_25.$$arity = 0), nil) && 'params_wrapper';
      })($scope.base, null);
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/railway/run"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$tracks', '$class', '$merge', '$zero?', '$count', '$is_a?', '$[]', '$==', '$<', '$proc', '$run', '$params', '$instance_method', '$each', '$define_method', '$<<', '$to_opts', '$to_s', '$raise', '$new', '$then', '$apply', '$fail', '$!=', '$method', '$arity', '$instance_exec', '$to_proc', '$rejected?', '$error', '$resolved?', '$value', '$state', '$result', '$has_errors?', '$instance_variable_get', '$call', '$bind', '$resolve', '$reject']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Exit(){};
        var self = $Exit = $klass($base, $super, 'Exit', $Exit);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$attr_reader("state");

        self.$attr_reader("result");

        return (Opal.defn(self, '$initialize', TMP_1 = function $$initialize(state, result) {
          var self = this;

          self.state = state;
          return self.result = result;
        }, TMP_1.$$arity = 2), nil) && 'initialize';
      })($scope.base, $scope.get('StandardError'));

      return (function($base, $super) {
        function $Railway(){};
        var self = $Railway = $klass($base, $super, 'Railway', $Railway);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_11, TMP_13, TMP_14, TMP_15, TMP_17, TMP_18;

        def.last_result = def.state = def.operation = nil;
        Opal.defn(self, '$tracks', TMP_2 = function $$tracks() {
          var self = this;

          return self.$class().$tracks();
        }, TMP_2.$$arity = 0);

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_3, TMP_5, $a, $b, TMP_6, TMP_8, TMP_9;

          Opal.defn(self, '$tracks', TMP_3 = function $$tracks() {
            var $a, self = this;
            if (self.tracks == null) self.tracks = nil;

            return ((($a = self.tracks) !== false && $a !== nil && $a != null) ? $a : self.tracks = []);
          }, TMP_3.$$arity = 0);
          Opal.defn(self, '$to_opts', TMP_5 = function $$to_opts(tie, args, block) {
            var $a, $b, TMP_4, self = this, scope = nil;

            return (function() {if ((($a = args.$count()['$zero?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return $hash2(["run"], {"run": block})
            } else if ((($a = args['$[]'](0)['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return $hash2(["scope", "run"], {"scope": (function() {if ((($a = args['$[]'](0)['$[]']("class")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return "class"
                } else {
                return args['$[]'](0)['$[]']("scope")
              }; return nil; })(), "run": ((($a = ((($b = args['$[]'](0)['$[]']("class")) !== false && $b !== nil && $b != null) ? $b : args['$[]'](0)['$[]']("run"))) !== false && $a !== nil && $a != null) ? $a : block)})
            } else if ((($a = (($b = args['$[]'](0)['$==']("class")) ? block : args['$[]'](0)['$==']("class"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return $hash2(["run", "scope"], {"run": block, "scope": "class"})
            } else if ((($a = ($b = args['$[]'](0)['$is_a?']($scope.get('Class')), $b !== false && $b !== nil && $b != null ?$rb_lt(args['$[]'](0), $scope.get('Operation')) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return $hash2(["run"], {"run": ($a = ($b = self).$proc, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return args['$[]'](0).$run(self.$params())}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b)})
              } else {
              if ((($a = args['$[]'](1)['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                scope = args['$[]'](1)['$[]']("scope")};
              return $hash2(["run", "scope"], {"run": args['$[]'](0), "scope": scope});
            }; return nil; })().$merge($hash2(["tie"], {"tie": self.$instance_method(tie)}));
          }, TMP_5.$$arity = 3);
          ($a = ($b = ["step", "failed", "async"]).$each, $a.$$p = (TMP_6 = function(tie){var self = TMP_6.$$s || this, $c, $d, TMP_7;
if (tie == null) tie = nil;
          return ($c = ($d = self).$define_method, $c.$$p = (TMP_7 = function($e_rest){var self = TMP_7.$$s || this, block, args;

              block = TMP_7.$$p || nil, TMP_7.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return self.$tracks()['$<<'](self.$to_opts(tie, args, block))}, TMP_7.$$s = self, TMP_7.$$arity = -1, TMP_7), $c).call($d, ("add_" + tie.$to_s()))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);
          Opal.defn(self, '$abort!', TMP_8 = function(arg) {
            var self = this;

            return self.$raise($scope.get('Exit').$new("failed", arg));
          }, TMP_8.$$arity = 1);
          return (Opal.defn(self, '$succeed!', TMP_9 = function(arg) {
            var self = this;

            return self.$raise($scope.get('Exit').$new("success", arg));
          }, TMP_9.$$arity = 1), nil) && 'succeed!';
        })(Opal.get_singleton_class(self));

        Opal.defn(self, '$step', TMP_11 = function $$step(opts) {
          var $a, $b, TMP_10, self = this;

          if ((($a = self.last_result['$is_a?']($scope.get('Promise'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.last_result = ($a = ($b = self.last_result).$then, $a.$$p = (TMP_10 = function($c_rest){var self = TMP_10.$$s || this, result;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              result = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                result[$arg_idx - 0] = arguments[$arg_idx];
              }
            self.last_result = result;
              return self.$apply(opts, "in_promise");}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10), $a).call($b)
          } else if (self.state['$==']("success")) {
            return self.$apply(opts)
            } else {
            return nil
          };
        }, TMP_11.$$arity = 1);

        Opal.defn(self, '$failed', TMP_13 = function $$failed(opts) {
          var $a, $b, TMP_12, self = this;

          if ((($a = self.last_result['$is_a?']($scope.get('Promise'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.last_result = ($a = ($b = self.last_result).$fail, $a.$$p = (TMP_12 = function(e){var self = TMP_12.$$s || this, $c;
              if (self.last_result == null) self.last_result = nil;
if (e == null) e = nil;
            self.last_result = e;
              self.$apply(opts, "in_promise");
              if ((($c = self.last_result['$is_a?']($scope.get('Exception'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                self.$raise(self.last_result)};
              return self.$raise(e);}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($b)
          } else if (self.state['$==']("failed")) {
            return self.$apply(opts)
            } else {
            return nil
          };
        }, TMP_13.$$arity = 1);

        Opal.defn(self, '$async', TMP_14 = function $$async(opts) {
          var $a, self = this;

          if ((($a = self.state['$!=']("failed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$apply(opts)
            } else {
            return nil
          };
        }, TMP_14.$$arity = 1);

        Opal.defn(self, '$apply', TMP_15 = function $$apply(opts, in_promise) {
          var $a, $b, $c, $d, $e, self = this, args = nil, instance = nil, block = nil, e = nil;

          if (in_promise == null) {
            in_promise = nil;
          }
          try {
            if (opts['$[]']("scope")['$==']("class")) {
              args = [self.operation].concat(Opal.to_a(self.last_result));
              instance = self.operation.$class();
              } else {
              args = self.last_result;
              instance = self.operation;
            };
            block = opts['$[]']("run");
            if ((($a = block['$is_a?']($scope.get('Symbol'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              block = instance.$method(block)};
            self.last_result = (function() {if ((($a = block.$arity()['$zero?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = instance).$instance_exec, $a.$$p = block.$to_proc(), $a).call($b)
            } else if ((($a = ($c = args['$is_a?']($scope.get('Array')), $c !== false && $c !== nil && $c != null ?block.$arity()['$=='](args.$count()) : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($c = instance).$instance_exec, $a.$$p = block.$to_proc(), $a).apply($c, Opal.to_a(args))
              } else {
              return ($a = ($d = instance).$instance_exec, $a.$$p = block.$to_proc(), $a).call($d, args)
            }; return nil; })();
            if ((($a = self.last_result['$is_a?']($scope.get('Promise'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              return self.last_result
            };
            if ((($a = self.last_result['$rejected?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.$raise(self.last_result.$error())};
            if ((($a = self.last_result['$resolved?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.last_result = self.last_result.$value()};
            return self.last_result;
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exit')])) {e = $err;
              try {
                self.state = e.$state();
                self.last_result = (function() {if ((($a = (((($e = e.$state()['$!=']("failed")) !== false && $e !== nil && $e != null) ? $e : e.$result()['$is_a?']($scope.get('Exception'))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                  return e.$result()
                  } else {
                  return e
                }; return nil; })();
                return self.$raise(e);
              } finally { Opal.pop_exception() }
            } else 
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                self.state = "failed";
                self.last_result = e;
                if (in_promise !== false && in_promise !== nil && in_promise != null) {
                  self.$raise(e)};
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_15.$$arity = -2);

        Opal.defn(self, '$run', TMP_17 = function $$run() {
          var $a, $b, TMP_16, self = this;

          try {
            if ((($a = ((($b = self.operation['$has_errors?']()) !== false && $b !== nil && $b != null) ? $b : self.state)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              ((($a = self.last_result) !== false && $a !== nil && $a != null) ? $a : self.last_result = $scope.get('ValidationException').$new(self.operation.$instance_variable_get("@errors")));
              if ((($a = self.state) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return nil};
              self.state = "failed";
              } else {
              self.state = "success"
            };
            return ($a = ($b = self.$tracks()).$each, $a.$$p = (TMP_16 = function(opts){var self = TMP_16.$$s || this;
if (opts == null) opts = nil;
            return opts['$[]']("tie").$bind(self).$call(opts)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b);
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exit')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_17.$$arity = 0);

        return (Opal.defn(self, '$result', TMP_18 = function $$result() {
          var $a, self = this;

          if ((($a = self.last_result['$is_a?']($scope.get('Promise'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.last_result};
          return self.last_result = (function() {if (self.state['$==']("success")) {
            return $scope.get('Promise').$new().$resolve(self.last_result)
            } else {
            return $scope.get('Promise').$new().$reject(self.last_result)
          }; return nil; })();
        }, TMP_18.$$arity = 0), nil) && 'result';
      })($scope.base, null);
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/railway/validations"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$validations', '$class', '$add_error', '$+', '$to_s', '$[]', '$<<', '$add_validation', '$instance_eval', '$to_proc', '$==', '$state', '$raise', '$new', '$result', '$each_with_index', '$is_a?', '$method', '$instance_exec', '$add_validation_error', '$===']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Railway(){};
        var self = $Railway = $klass($base, $super, 'Railway', $Railway);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_8;

        def.operation = nil;
        Opal.defn(self, '$validations', TMP_1 = function $$validations() {
          var self = this;

          return self.$class().$validations();
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$add_validation_error', TMP_2 = function $$add_validation_error(i, e) {
          var self = this;

          return self.operation.$add_error("param validation " + ($rb_plus(i, 1)), "validation_error", e.$to_s());
        }, TMP_2.$$arity = 2);

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_3, TMP_4, TMP_5;

          Opal.defn(self, '$validations', TMP_3 = function $$validations() {
            var $a, self = this;
            if (self.validations == null) self.validations = nil;

            return ((($a = self.validations) !== false && $a !== nil && $a != null) ? $a : self.validations = []);
          }, TMP_3.$$arity = 0);
          Opal.defn(self, '$add_validation', TMP_4 = function $$add_validation($a_rest) {
            var $b, self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            TMP_4.$$p = null;
            if ((($b = args['$[]'](0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              block = args['$[]'](0)};
            return self.$validations()['$<<'](block);
          }, TMP_4.$$arity = -1);
          return (Opal.defn(self, '$add_error', TMP_5 = function $$add_error(param, symbol, message, $a_rest) {
            var $b, $c, TMP_6, self = this, args, $iter = TMP_5.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 3;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 3; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 3] = arguments[$arg_idx];
            }
            TMP_5.$$p = null;
            return ($b = ($c = self).$add_validation, $b.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $a, $d, $e, e = nil;

            try {
                if ((($a = ($d = ($e = self).$instance_eval, $d.$$p = block.$to_proc(), $d).call($e)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                  return self.$add_error(param, symbol, message)
                  } else {
                  return nil
                }
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exit')])) {e = $err;
                  try {
                    if (e.$state()['$==']("failed")) {
                      } else {
                      self.$raise(e)
                    };
                    self.$add_error(param, symbol, message);
                    return self.$raise($scope.get('Exit').$new("abort_from_add_error", e.$result()));
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $b).call($c);
          }, TMP_5.$$arity = -4), nil) && 'add_error';
        })(Opal.get_singleton_class(self));

        return (Opal.defn(self, '$process_validations', TMP_8 = function $$process_validations() {try {

          var $a, $b, TMP_7, self = this;

          return ($a = ($b = self.$validations()).$each_with_index, $a.$$p = (TMP_7 = function(validator, i){var self = TMP_7.$$s || this, $c, $d, $e, e = nil, $case = nil;
            if (self.operation == null) self.operation = nil;
if (validator == null) validator = nil;if (i == null) i = nil;
          try {
              if ((($c = validator['$is_a?']($scope.get('Symbol'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                validator = self.operation.$method(validator)};
              if ((($c = ($d = ($e = self.operation).$instance_exec, $d.$$p = validator.$to_proc(), $d).call($e)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return nil;};
              return self.$add_validation_error(i, "param validation " + ($rb_plus(i, 1)) + " failed");
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exit')])) {e = $err;
                try {
                  $case = e.$state();if ("success"['$===']($case)) {self.$add_validation_error(i, "illegal use of succeed! in validation")}else if ("failed"['$===']($case)) {self.$add_validation_error(i, "param validation " + ($rb_plus(i, 1)) + " aborted")};
                  self.state = "failed";
                  Opal.ret(nil);
                } finally { Opal.pop_exception() }
              } else 
              if (Opal.rescue($err, [$scope.get('AccessViolation')])) {e = $err;
                try {
                  self.$add_validation_error(i, e);
                  self.state = "failed";
                  self.last_result = e;
                  Opal.ret(nil);
                } finally { Opal.pop_exception() }
              } else 
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  self.$add_validation_error(i, e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7), $a).call($b);
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_8.$$arity = 0), nil) && 'process_validations';
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/server_op"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$combine_arg_array', '$params_wrapper', '$_Railway', '$serialize_params', '$fail', '$new', '$[]', '$json', '$then', '$deserialize_response', '$post', '$to_json', '$name', '$opts', '$class_eval', '$method_defined?', '$raise', '$serialize_response', '$run', '$constantize', '$URI', '$host', '$port', '$path', '$scheme', '$use_ssl=', '$verify_mode=', '$body=', '$resolve', '$request', '$reject', '$!=', '$lock', '$deserialize_dispatch', '$each', '$call', '$receivers']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ServerOp(){};
      var self = $ServerOp = $klass($base, $super, 'ServerOp', $ServerOp);

      var def = self.$$proto, $scope = self.$$scope;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_3, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, $a, TMP_17;

        if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
          Opal.defn(self, '$run', TMP_3 = function $$run($a_rest) {
            var $b, $c, TMP_1, $d, $e, TMP_2, self = this, args, hash = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            hash = self.$_Railway().$params_wrapper().$combine_arg_array(args);
            hash = self.$serialize_params(hash);
            return ($b = ($c = ($d = ($e = $scope.get('HTTP').$post("" + (window.HyperloopEnginePath) + "/execute_remote", $hash2(["payload", "headers"], {"payload": $hash2(["json"], {"json": $hash2(["operation", "params"], {"operation": self.$name(), "params": hash}).$to_json()}), "headers": $hash2(["X-CSRF-Token"], {"X-CSRF-Token": (($scope.get('Hyperloop')).$$scope.get('ClientDrivers')).$opts()['$[]']("form_authenticity_token")})}))).$then, $d.$$p = (TMP_2 = function(response){var self = TMP_2.$$s || this;
if (response == null) response = nil;
            return self.$deserialize_response(response.$json()['$[]']("response"))}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $d).call($e)).$fail, $b.$$p = (TMP_1 = function(response){var self = TMP_1.$$s || this;
if (response == null) response = nil;
            return $scope.get('Exception').$new(response.$json()['$[]']("error"))}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $b).call($c);
          }, TMP_3.$$arity = -1)};
        Opal.defn(self, '$run_from_client', TMP_7 = function $$run_from_client(security_param, operation, params) {try {

          var $a, $b, TMP_4, self = this, e = nil;

          try {
            return ($a = ($b = operation.$constantize()).$class_eval, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $c, $d, TMP_5, $e, $f, TMP_6;

            if ((($c = self.$_Railway().$params_wrapper()['$method_defined?'](security_param)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                } else {
                self.$raise($scope.get('AccessViolation'))
              };
              return ($c = ($d = ($e = ($f = self.$run(params)).$then, $e.$$p = (TMP_6 = function(r){var self = TMP_6.$$s || this;
if (r == null) r = nil;
              Opal.ret($hash2(["json"], {"json": $hash2(["response"], {"response": self.$serialize_response(r)})}))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $e).call($f)).$fail, $c.$$p = (TMP_5 = function(e){var self = TMP_5.$$s || this;
if (e == null) e = nil;
              Opal.ret($hash2(["json", "status"], {"json": $hash2(["error"], {"error": e}), "status": 500}))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $c).call($d);}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return $hash2(["json", "status"], {"json": $hash2(["error"], {"error": e}), "status": 500})
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_7.$$arity = 3);
        Opal.defn(self, '$remote', TMP_8 = function $$remote(path, $a_rest) {
          var $b, $c, self = this, args, promise = nil, uri = nil, http = nil, request = nil, e = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          try {
            promise = $scope.get('Promise').$new();
            uri = self.$URI("" + (path) + "execute_remote_api");
            http = (($scope.get('Net')).$$scope.get('HTTP')).$new(uri.$host(), uri.$port());
            request = (((($scope.get('Net')).$$scope.get('HTTP'))).$$scope.get('Post')).$new(uri.$path(), $hash2(["Content-Type"], {"Content-Type": "application/json"}));
            if (uri.$scheme()['$==']("https")) {
              (($b = [true]), $c = http, $c['$use_ssl='].apply($c, $b), $b[$b.length-1]);
              (($b = [(((($scope.get('OpenSSL')).$$scope.get('SSL'))).$$scope.get('VERIFY_NONE'))]), $c = http, $c['$verify_mode='].apply($c, $b), $b[$b.length-1]);};
            (($b = [$hash2(["operation", "params"], {"operation": self.$name(), "params": (((($scope.get('Hyperloop')).$$scope.get('Operation'))).$$scope.get('ParamsWrapper')).$combine_arg_array(args)}).$to_json()]), $c = request, $c['$body='].apply($c, $b), $b[$b.length-1]);
            return promise.$resolve(http.$request(request));
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return promise.$reject(e)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_8.$$arity = -2);
        Opal.defn(self, '$serialize_params', TMP_9 = function $$serialize_params(hash) {
          var self = this;

          return hash;
        }, TMP_9.$$arity = 1);
        Opal.defn(self, '$deserialize_params', TMP_10 = function $$deserialize_params(hash) {
          var self = this;

          return hash;
        }, TMP_10.$$arity = 1);
        Opal.defn(self, '$serialize_response', TMP_11 = function $$serialize_response(hash) {
          var self = this;

          return hash;
        }, TMP_11.$$arity = 1);
        Opal.defn(self, '$deserialize_response', TMP_12 = function $$deserialize_response(hash) {
          var self = this;

          return hash;
        }, TMP_12.$$arity = 1);
        Opal.defn(self, '$serialize_dispatch', TMP_13 = function $$serialize_dispatch(hash) {
          var self = this;

          return hash;
        }, TMP_13.$$arity = 1);
        Opal.defn(self, '$deserialize_dispatch', TMP_14 = function $$deserialize_dispatch(hash) {
          var self = this;

          return hash;
        }, TMP_14.$$arity = 1);
        Opal.defn(self, '$dispatch_to', TMP_15 = function $$dispatch_to($a_rest) {
          var $b, self = this, args, $iter = TMP_15.$$p, regulation = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_15.$$p = null;
          if ((($b = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            return nil
          };
        }, TMP_15.$$arity = -1);
        if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {};
        return (Opal.defn(self, '$dispatch_from_server', TMP_17 = function $$dispatch_from_server(params_hash) {
          var $a, $b, TMP_16, self = this, params = nil;

          params = self.$_Railway().$params_wrapper().$new(self.$deserialize_dispatch(params_hash)).$lock();
          return ($a = ($b = self.$_Railway().$receivers()).$each, $a.$$p = (TMP_16 = function(receiver){var self = TMP_16.$$s || this;
if (receiver == null) receiver = nil;
          return receiver.$call(params)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b);
        }, TMP_17.$$arity = 1), nil) && 'dispatch_from_server';
      })(Opal.get_singleton_class(self))
    })($scope.base, $scope.get('Operation'))
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation/boot"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$inherited', '$add_receiver', '$to_proc', '$_Railway', '$initialize_client_drivers_on_boot', '$_run', '$respond_to?', '$each', '$on_dispatch', '$receivers']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Application(){};
      var self = $Application = $klass($base, $super, 'Application', $Application);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_3;

      if ((($a = ($scope.Boot != null)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $scope.get('Operation').$inherited($scope.get('Boot'))};

      (function($base, $super) {
        function $Boot(){};
        var self = $Boot = $klass($base, $super, 'Boot', $Boot);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        Opal.defs(self, '$on_dispatch', TMP_1 = function $$on_dispatch() {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          TMP_1.$$p = null;
          return ($a = ($b = self.$_Railway()).$add_receiver, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_1.$$arity = 0);

        return (Opal.defs(self, '$run', TMP_2 = function $$run($a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          $scope.get('ClientDrivers').$initialize_client_drivers_on_boot();
          return ($b = self).$_run.apply($b, Opal.to_a(args));
        }, TMP_2.$$arity = -1), nil) && 'run';
      })($scope.base, $scope.get('Operation'));

      if ((($a = $scope.get('Boot')['$respond_to?']("receivers")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = $scope.get('Boot').$receivers()).$each, $a.$$p = (TMP_3 = function(r){var self = TMP_3.$$s || this, $c, $d;
if (r == null) r = nil;
        return ($c = ($d = $scope.get('Boot')).$on_dispatch, $c.$$p = r.$to_proc(), $c).call($d)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)
        } else {
        return nil
      };
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
Opal.modules["hyper-operation"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$import', '$==']);
  self.$require("hyper-operation/version");
  self.$require("hyperloop-config");
  $scope.get('Hyperloop').$import("hyper-operation");
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("active_support/core_ext/string");
    self.$require("mutations");
    self.$require("hyper-operation/filters/outbound_filter");
    self.$require("hyper-component");
    self.$require("hyper-operation/call_by_class_name");
    self.$require("hyper-operation/transport/client_drivers");
    (function($base, $super) {
      function $HashWithIndifferentAccess(){};
      var self = $HashWithIndifferentAccess = $klass($base, $super, 'HashWithIndifferentAccess', $HashWithIndifferentAccess);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('Hash'));
    (function($base, $super) {
      function $String(){};
      var self = $String = $klass($base, $super, 'String', $String);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      return (Opal.defn(self, '$titleize', TMP_1 = function $$titleize() {
        var self = this;

        return self;
      }, TMP_1.$$arity = 0), nil) && 'titleize'
    })($scope.base, null);
    self.$require("hyper-operation/exception");
    self.$require("hyper-operation/promise");
    self.$require("hyper-operation/railway");
    self.$require("hyper-operation/api");
    self.$require("hyper-operation/railway/dispatcher");
    self.$require("hyper-operation/railway/params_wrapper");
    self.$require("hyper-operation/railway/run");
    self.$require("hyper-operation/railway/validations");
    self.$require("hyper-operation/server_op");
    return self.$require("hyper-operation/boot");};
};

/* Generated by Opal 0.10.3 */
Opal.modules["react/top_level_render"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$!', '$to_n', '$raise']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defs(self, '$render', TMP_1 = function $$render(element, container) {
      var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, cb = nil, native$ = nil;

      TMP_1.$$p = null;
      container = container.$$class ? container[0] : container;
      cb = 
      function(){
        setTimeout(function(){
          (function() {if (($yield !== nil)) {
        return Opal.yieldX($yield, []);
        } else {
        return nil
      }; return nil; })()
        }, 0)
      }
    ;
      if ((($a = ((typeof ReactDOM === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        native$ = ReactDOM.render(element.$to_n(), container, cb)
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        native$ = React.render(element.$to_n(), container, cb)
        } else {
        self.$raise("render is not defined.  In React >= v15 you must import it with ReactDOM")
      };
      if ((($a = native$._getOpalInstance !== undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return native$._getOpalInstance();
      } else if ((($a = React.findDOMNode !== undefined && native$.nodeType === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return React.findDOMNode(native$);
        } else {
        return native$
      };
    }, TMP_1.$$arity = 2)
  })($scope.base)
};

/* Generated by Opal 0.10.3 */
(function(Opal) {
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$ready?', '$each_with_index', '$attr', '$<<', '$then', '$[]=', '$body', '$get', '$html', '$[]', '$compile', '$new', '$join', '$message', '$each', '$const_get', '$flatten', '$compact', '$collect', '$==', '$underscore', '$data', '$render', '$create_element', '$when']);
  self.$require("browser/interval");
  self.$require("browser/delay");
  self.$require("opal-jquery");
  (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Component(){};
      var self = $Component = $klass($base, $super, 'Component', $Component);

      var def = self.$$proto, $scope = self.$$scope;

      return Opal.cdecl($scope, 'VERSION', "0.12.4")
    })($scope.base, null)
  })($scope.base);
  self.$require("hyper-operation");
  self.$require("hyper-store");
  self.$require("react/top_level_render");
  return ($a = ($b = $scope.get('Document'))['$ready?'], $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c, $d, TMP_2, $e, TMP_4, $f, promises = nil, code = nil;

  promises = [];
    code = [];
    ($c = ($d = $scope.get('Element')['$[]']("script[type=\"text/ruby\"]")).$each_with_index, $c.$$p = (TMP_2 = function(script_tag, index){var self = TMP_2.$$s || this, $e, $f, TMP_3, src = nil;
if (script_tag == null) script_tag = nil;if (index == null) index = nil;
    src = script_tag.$attr("src");
      if (src !== false && src !== nil && src != null) {
        return promises['$<<'](($e = ($f = $scope.get('HTTP').$get(src)).$then, $e.$$p = (TMP_3 = function(response){var self = TMP_3.$$s || this;
if (response == null) response = nil;
        return code['$[]='](index, response.$body())}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $e).call($f))
        } else {
        return code['$[]='](index, script_tag.$html())
      };}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $c).call($d);
    return ($c = ($e = ($f = $scope.get('Promise')).$when.apply($f, Opal.to_a(promises))).$then, $c.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $f, $g, TMP_5, compiled_code = nil, continue_to_mounting = nil, e = nil, message = nil;

    compiled_code = nil;
      continue_to_mounting = nil;
      try {
        compiled_code = (($scope.get('Opal')).$$scope.get('Compiler')).$new(code.$join("\n")).$compile()
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            message = "Error raised while compiling: " + (e.$message());
            console.error(message);
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      if (compiled_code !== false && compiled_code !== nil && compiled_code != null) {
        try {
          eval(compiled_code);
          continue_to_mounting = true;
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            try {
              message = "Error raised during execution: " + (e.$message());
              console.error(message);
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }};
      if (continue_to_mounting !== false && continue_to_mounting !== nil && continue_to_mounting != null) {
        return ($f = ($g = $scope.get('Element')['$[]']("[data-reactrb-mount]")).$each, $f.$$p = (TMP_5 = function(mount_point){var self = TMP_5.$$s || this, $h, $i, $j, TMP_6, component_name = nil, component = nil, params = nil;
if (mount_point == null) mount_point = nil;
        component_name = mount_point.$attr("data-reactrb-mount");
          component = nil;
          try {
            component = $scope.get('Object').$const_get(component_name)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
              try {
                message = "Could not find Component class named " + (component_name);
                console.error(message);
                return nil;;
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
          params = ($h = $scope.get('Hash'))['$[]'].apply($h, Opal.to_a(($i = ($j = $scope.get('Hash').$new(mount_point.$data())).$collect, $i.$$p = (TMP_6 = function(name, value){var self = TMP_6.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          if (name['$==']("reactrbMount")) {
              return nil
              } else {
              return [name.$underscore(), value]
            }}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6), $i).call($j).$compact().$flatten(1)));
          return $scope.get('React').$render($scope.get('React').$create_element(component, params), mount_point);}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $f).call($g)
        } else {
        return nil
      };}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $c).call($e);}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
})(Opal);
